
testXF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086cc  080086cc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d4  080086d4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080086ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  2000006c  08008758  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08008758  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d1c2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000083a5  00000000  00000000  0005d2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00065648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fa  00000000  00000000  00066d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9bd  00000000  00000000  00067dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219ee  00000000  00000000  000927b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e56a0  00000000  00000000  000b41a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e00  00000000  00000000  00199848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001a1648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008278 	.word	0x08008278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008278 	.word	0x08008278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fbb2 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f818 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8da 	bl	8000780 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f880 	bl	80006d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d0:	f000 f8a8 	bl	8000724 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  trace_initialize();
 80005d4:	f003 fc5c 	bl	8003e90 <trace_initialize>

  trace_out("Initializing XF...");
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x38>)
 80005da:	f003 fc5f 	bl	8003e9c <trace_out>
  XF_initialize(10);
 80005de:	200a      	movs	r0, #10
 80005e0:	f006 fa4b 	bl	8006a7a <XF_initialize>
  Factory_initialize();
 80005e4:	f003 fb8e 	bl	8003d04 <Factory_initialize>
  Factory_build();
 80005e8:	f003 fb92 	bl	8003d10 <Factory_build>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
     XF_execOnce();
 80005ec:	f006 fa52 	bl	8006a94 <XF_execOnce>
 80005f0:	e7fc      	b.n	80005ec <main+0x30>
 80005f2:	bf00      	nop
 80005f4:	08008290 	.word	0x08008290

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fe82 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xd4>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f001 febd 	bl	8002400 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 f926 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f832 	bl	8001718 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 f90f 	bl	80008dc <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART3_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000708:	f002 f918 	bl	800293c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8e3 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000088 	.word	0x20000088
 8000720:	40004800 	.word	0x40004800

08000724 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800072e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2206      	movs	r2, #6
 8000734:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2202      	movs	r2, #2
 8000746:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2201      	movs	r2, #1
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	f000 fe8d 	bl	8001486 <HAL_PCD_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f8b3 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000cc 	.word	0x200000cc

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b49      	ldr	r3, [pc, #292]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a44      	ldr	r2, [pc, #272]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a36      	ldr	r2, [pc, #216]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <MX_GPIO_Init+0x14c>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_GPIO_Init+0x14c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0181 	movw	r1, #16513	; 0x4081
 8000844:	4822      	ldr	r0, [pc, #136]	; (80008d0 <MX_GPIO_Init+0x150>)
 8000846:	f000 fe05 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	4821      	ldr	r0, [pc, #132]	; (80008d4 <MX_GPIO_Init+0x154>)
 8000850:	f000 fe00 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	481b      	ldr	r0, [pc, #108]	; (80008d8 <MX_GPIO_Init+0x158>)
 800086c:	f000 fc5e 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000870:	f244 0381 	movw	r3, #16513	; 0x4081
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_GPIO_Init+0x150>)
 800088a:	f000 fc4f 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0x154>)
 80008a6:	f000 fc41 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0x154>)
 80008be:	f000 fc35 	bl	800112c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	; 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40021800 	.word	0x40021800
 80008d8:	40020800 	.word	0x40020800

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12c      	bne.n	80009b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000992:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009a4:	2307      	movs	r3, #7
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_UART_MspInit+0x8c>)
 80009b0:	f000 fbbc 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40004800 	.word	0x40004800
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020c00 	.word	0x40020c00

080009c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0a0      	sub	sp, #128	; 0x80
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	225c      	movs	r2, #92	; 0x5c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f006 fc91 	bl	8007310 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009f6:	d14e      	bne.n	8000a96 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009fe:	2300      	movs	r3, #0
 8000a00:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 ffa0 	bl	800194c <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a12:	f7ff ff63 	bl	80008dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a44:	230a      	movs	r3, #10
 8000a46:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <HAL_PCD_MspInit+0xdc>)
 8000a50:	f000 fb6c 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a66:	4619      	mov	r1, r3
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <HAL_PCD_MspInit+0xdc>)
 8000a6a:	f000 fb5f 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6353      	str	r3, [r2, #52]	; 0x34
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_PCD_MspInit+0xd8>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3780      	adds	r7, #128	; 0x80
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b598      	push	{r3, r4, r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f96a 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000af8:	f004 fed9 	bl	80058ae <XF_isRunning>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d00e      	beq.n	8000b20 <SysTick_Handler+0x30>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000b02:	f000 f977 	bl	8000df4 <HAL_GetTick>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f004 fec4 	bl	8005894 <XF_tickIntervalInMilliseconds>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	fbb4 f2f3 	udiv	r2, r4, r3
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	1ae3      	subs	r3, r4, r3
  if (XF_isRunning() &&
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <SysTick_Handler+0x30>
  {
      XF_tick();
 8000b1c:	f004 fea0 	bl	8005860 <XF_tick>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd98      	pop	{r3, r4, r7, pc}

08000b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return 1;
 8000b28:	2301      	movs	r3, #1
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_kill>:

int _kill(int pid, int sig)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b3e:	f006 fc89 	bl	8007454 <__errno>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2216      	movs	r2, #22
 8000b46:	601a      	str	r2, [r3, #0]
  return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_exit>:

void _exit (int status)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ffe7 	bl	8000b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b66:	e7fe      	b.n	8000b66 <_exit+0x12>

08000b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7a:	f3af 8000 	nop.w
 8000b7e:	4601      	mov	r1, r0
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	60ba      	str	r2, [r7, #8]
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf0      	blt.n	8000b7a <_read+0x12>
  }

  return len;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	e009      	b.n	8000bc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf1      	blt.n	8000bb4 <_write+0x12>
  }
  return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_close>:

int _close(int file)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c02:	605a      	str	r2, [r3, #4]
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_isatty>:

int _isatty(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f006 fbee 	bl	8007454 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	200005d8 	.word	0x200005d8
 8000cac:	20000a20 	.word	0x20000a20

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfe:	f7ff ffd7 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f006 fbad 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc59 	bl	80005bc <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d18:	080086ec 	.word	0x080086ec
  ldr r2, =_sbss
 8000d1c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d20:	20000a1c 	.word	0x20000a1c

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_Init+0x40>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_Init+0x40>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x40>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f931 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fdc4 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f93b 	bl	8001006 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f911 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200005dc 	.word	0x200005dc

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200005dc 	.word	0x200005dc

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff47 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff5c 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb0 	bl	8000f74 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_DMA_Start_IT+0x26>
 8001040:	2302      	movs	r3, #2
 8001042:	e040      	b.n	80010c6 <HAL_DMA_Start_IT+0xa8>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d12f      	bne.n	80010b8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2202      	movs	r2, #2
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f82e 	bl	80010ce <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	223f      	movs	r2, #63	; 0x3f
 8001078:	409a      	lsls	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0216 	orr.w	r2, r2, #22
 800108c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0208 	orr.w	r2, r2, #8
 80010a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0201 	orr.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e005      	b.n	80010c4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010c0:	2302      	movs	r3, #2
 80010c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ea:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b40      	cmp	r3, #64	; 0x40
 80010fa:	d108      	bne.n	800110e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800110c:	e007      	b.n	800111e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e165      	b.n	8001414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	f040 8154 	bne.w	800140e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	2b02      	cmp	r3, #2
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	69b9      	ldr	r1, [r7, #24]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ae 	beq.w	800140e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_GPIO_Init+0x300>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a5c      	ldr	r2, [pc, #368]	; (800142c <HAL_GPIO_Init+0x300>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_GPIO_Init+0x300>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ce:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_GPIO_Init+0x304>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <HAL_GPIO_Init+0x308>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x21a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4e      	ldr	r2, [pc, #312]	; (8001438 <HAL_GPIO_Init+0x30c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x216>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4d      	ldr	r2, [pc, #308]	; (800143c <HAL_GPIO_Init+0x310>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x212>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4c      	ldr	r2, [pc, #304]	; (8001440 <HAL_GPIO_Init+0x314>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x20e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4b      	ldr	r2, [pc, #300]	; (8001444 <HAL_GPIO_Init+0x318>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x20a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_GPIO_Init+0x31c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x206>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x320>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x202>
 800132a:	2306      	movs	r3, #6
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 800132e:	2307      	movs	r3, #7
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x21c>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x304>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_GPIO_Init+0x324>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_GPIO_Init+0x324>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x324>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_GPIO_Init+0x324>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_GPIO_Init+0x324>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_GPIO_Init+0x324>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x324>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_GPIO_Init+0x324>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae96 	bls.w	8001148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001488:	b08f      	sub	sp, #60	; 0x3c
 800148a:	af0a      	add	r7, sp, #40	; 0x28
 800148c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e116      	b.n	80016c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fa88 	bl	80009c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f81f 	bl	800351a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	687e      	ldr	r6, [r7, #4]
 80014e4:	466d      	mov	r5, sp
 80014e6:	f106 0410 	add.w	r4, r6, #16
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fa:	1d33      	adds	r3, r6, #4
 80014fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	f001 ffaa 	bl	8003458 <USB_CoreInit>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d7      	b.n	80016c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f80d 	bl	800353c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e04a      	b.n	80015be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	333d      	adds	r3, #61	; 0x3d
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	333c      	adds	r3, #60	; 0x3c
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	b298      	uxth	r0, r3
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3344      	adds	r3, #68	; 0x44
 8001564:	4602      	mov	r2, r0
 8001566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3340      	adds	r3, #64	; 0x40
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3348      	adds	r3, #72	; 0x48
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	334c      	adds	r3, #76	; 0x4c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3354      	adds	r3, #84	; 0x54
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3af      	bcc.n	8001528 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e044      	b.n	8001658 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	3301      	adds	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3b5      	bcc.n	80015ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	687e      	ldr	r6, [r7, #4]
 800166a:	466d      	mov	r5, sp
 800166c:	f106 0410 	add.w	r4, r6, #16
 8001670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800167c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001680:	1d33      	adds	r3, r6, #4
 8001682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f001 ffa5 	bl	80035d4 <USB_DevInit>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e014      	b.n	80016c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f80a 	bl	80016ce <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f963 	bl	800398a <USB_DevDisconnect>

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	f043 0303 	orr.w	r3, r3, #3
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff faf4 	bl	8000df4 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff faf0 	bl	8000df4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189e:	f000 fb7f 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa54 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080083f0 	.word	0x080083f0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000

080018fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001900:	f7ff fff0 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	08008400 	.word	0x08008400

08001924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001928:	f7ff ffdc 	bl	80018e4 <HAL_RCC_GetHCLKFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0b5b      	lsrs	r3, r3, #13
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	08008400 	.word	0x08008400

0800194c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001984:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800198a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	496c      	ldr	r1, [pc, #432]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001994:	4313      	orrs	r3, r2
 8001996:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019a2:	2301      	movs	r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d010      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019b2:	4b64      	ldr	r3, [pc, #400]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	4960      	ldr	r1, [pc, #384]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d017      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019e0:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4955      	ldr	r1, [pc, #340]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019fe:	d101      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d017      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a1c:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	4946      	ldr	r1, [pc, #280]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 808a 	beq.w	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a38      	ldr	r2, [pc, #224]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a82:	f7ff f9b7 	bl	8000df4 <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f9b3 	bl	8000df4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e278      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02f      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d028      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ace:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d114      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff f981 	bl	8000df4 <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f97d 	bl	8000df4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e240      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ee      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b24:	d114      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3a:	4902      	ldr	r1, [pc, #8]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
 8001b40:	e00c      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	42470e40 	.word	0x42470e40
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b5a:	6093      	str	r3, [r2, #8]
 8001b5c:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b68:	4944      	ldr	r1, [pc, #272]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b82:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	492e      	ldr	r1, [pc, #184]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d011      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	4926      	ldr	r1, [pc, #152]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	491a      	ldr	r1, [pc, #104]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d011      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	4911      	ldr	r1, [pc, #68]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c44:	d101      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c46:	2301      	movs	r3, #1
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c58:	f040 80ff 	bne.w	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c62:	f7ff f8c7 	bl	8000df4 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c6a:	f7ff f8c3 	bl	8000df4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e188      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	424711e0 	.word	0x424711e0
 8001c84:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c88:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d028      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d124      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cbc:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cd4:	0e1b      	lsrs	r3, r3, #24
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	3b01      	subs	r3, #1
 8001cee:	041b      	lsls	r3, r3, #16
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	071b      	lsls	r3, r3, #28
 8001cfe:	4961      	ldr	r1, [pc, #388]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d1a:	d00a      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d035      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d30:	d130      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4a:	0f1b      	lsrs	r3, r3, #28
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	019b      	lsls	r3, r3, #6
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	071b      	lsls	r3, r3, #28
 8001d74:	4943      	ldr	r1, [pc, #268]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d7c:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d82:	f023 021f 	bic.w	r2, r3, #31
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	493d      	ldr	r1, [pc, #244]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d029      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da8:	d124      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc2:	0f1b      	lsrs	r3, r3, #28
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	019b      	lsls	r3, r3, #6
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	431a      	orrs	r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	431a      	orrs	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	071b      	lsls	r3, r3, #28
 8001dec:	4925      	ldr	r1, [pc, #148]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	071b      	lsls	r3, r3, #28
 8001e26:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e34:	f7fe ffde 	bl	8000df4 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e3c:	f7fe ffda 	bl	8000df4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e09f      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8095 	bne.w	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e68:	f7fe ffc4 	bl	8000df4 <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e70:	f7fe ffc0 	bl	8000df4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d908      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e085      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	42470068 	.word	0x42470068
 8001e8c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e9c:	d0e8      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d02b      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d127      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	061b      	lsls	r3, r3, #24
 8001ef4:	4928      	ldr	r1, [pc, #160]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4922      	ldr	r1, [pc, #136]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f2a:	d118      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	0e1b      	lsrs	r3, r3, #24
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	019b      	lsls	r3, r3, #6
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4910      	ldr	r1, [pc, #64]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f64:	f7fe ff46 	bl	8000df4 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f6c:	f7fe ff42 	bl	8000df4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e007      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8a:	d1ef      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3730      	adds	r7, #48	; 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470070 	.word	0x42470070

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b0ae      	sub	sp, #184	; 0xb8
 8001fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc6:	4bcb      	ldr	r3, [pc, #812]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	f200 8206 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x440>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08002011 	.word	0x08002011
 8001fe0:	080023e1 	.word	0x080023e1
 8001fe4:	080023e1 	.word	0x080023e1
 8001fe8:	080023e1 	.word	0x080023e1
 8001fec:	08002019 	.word	0x08002019
 8001ff0:	080023e1 	.word	0x080023e1
 8001ff4:	080023e1 	.word	0x080023e1
 8001ff8:	080023e1 	.word	0x080023e1
 8001ffc:	08002021 	.word	0x08002021
 8002000:	080023e1 	.word	0x080023e1
 8002004:	080023e1 	.word	0x080023e1
 8002008:	080023e1 	.word	0x080023e1
 800200c:	08002211 	.word	0x08002211
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4bb9      	ldr	r3, [pc, #740]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002016:	e1e7      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002018:	4bb8      	ldr	r3, [pc, #736]	; (80022fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800201a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800201e:	e1e3      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002020:	4bb4      	ldr	r3, [pc, #720]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202c:	4bb1      	ldr	r3, [pc, #708]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d071      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002038:	4bae      	ldr	r3, [pc, #696]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	2200      	movs	r2, #0
 8002040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002044:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800204c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002050:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800205a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800205e:	4622      	mov	r2, r4
 8002060:	462b      	mov	r3, r5
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4621      	mov	r1, r4
 8002078:	1a51      	subs	r1, r2, r1
 800207a:	6439      	str	r1, [r7, #64]	; 0x40
 800207c:	4629      	mov	r1, r5
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002090:	4649      	mov	r1, r9
 8002092:	018b      	lsls	r3, r1, #6
 8002094:	4641      	mov	r1, r8
 8002096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209a:	4641      	mov	r1, r8
 800209c:	018a      	lsls	r2, r1, #6
 800209e:	4641      	mov	r1, r8
 80020a0:	1a51      	subs	r1, r2, r1
 80020a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020a4:	4649      	mov	r1, r9
 80020a6:	eb63 0301 	sbc.w	r3, r3, r1
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80020b8:	4649      	mov	r1, r9
 80020ba:	00cb      	lsls	r3, r1, #3
 80020bc:	4641      	mov	r1, r8
 80020be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020c2:	4641      	mov	r1, r8
 80020c4:	00ca      	lsls	r2, r1, #3
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	4622      	mov	r2, r4
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	462b      	mov	r3, r5
 80020d4:	460a      	mov	r2, r1
 80020d6:	eb42 0303 	adc.w	r3, r2, r3
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020e8:	4629      	mov	r1, r5
 80020ea:	024b      	lsls	r3, r1, #9
 80020ec:	4621      	mov	r1, r4
 80020ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020f2:	4621      	mov	r1, r4
 80020f4:	024a      	lsls	r2, r1, #9
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002108:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800210c:	f7fe f8d8 	bl	80002c0 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800211a:	e067      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002128:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800212c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002134:	67bb      	str	r3, [r7, #120]	; 0x78
 8002136:	2300      	movs	r3, #0
 8002138:	67fb      	str	r3, [r7, #124]	; 0x7c
 800213a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800213e:	4622      	mov	r2, r4
 8002140:	462b      	mov	r3, r5
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4621      	mov	r1, r4
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	62b9      	str	r1, [r7, #40]	; 0x28
 800215c:	4629      	mov	r1, r5
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002170:	4649      	mov	r1, r9
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	4641      	mov	r1, r8
 8002176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217a:	4641      	mov	r1, r8
 800217c:	018a      	lsls	r2, r1, #6
 800217e:	4641      	mov	r1, r8
 8002180:	ebb2 0a01 	subs.w	sl, r2, r1
 8002184:	4649      	mov	r1, r9
 8002186:	eb63 0b01 	sbc.w	fp, r3, r1
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002196:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800219a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800219e:	4692      	mov	sl, r2
 80021a0:	469b      	mov	fp, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	eb1a 0303 	adds.w	r3, sl, r3
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	462b      	mov	r3, r5
 80021ac:	eb4b 0303 	adc.w	r3, fp, r3
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021be:	4629      	mov	r1, r5
 80021c0:	028b      	lsls	r3, r1, #10
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c8:	4621      	mov	r1, r4
 80021ca:	028a      	lsls	r2, r1, #10
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021d4:	2200      	movs	r2, #0
 80021d6:	673b      	str	r3, [r7, #112]	; 0x70
 80021d8:	677a      	str	r2, [r7, #116]	; 0x74
 80021da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021de:	f7fe f86f 	bl	80002c0 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4613      	mov	r3, r2
 80021e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80021fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800220e:	e0eb      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002210:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d06b      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2200      	movs	r2, #0
 8002230:	66bb      	str	r3, [r7, #104]	; 0x68
 8002232:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223a:	663b      	str	r3, [r7, #96]	; 0x60
 800223c:	2300      	movs	r3, #0
 800223e:	667b      	str	r3, [r7, #100]	; 0x64
 8002240:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002244:	4622      	mov	r2, r4
 8002246:	462b      	mov	r3, r5
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	0159      	lsls	r1, r3, #5
 8002252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002256:	0150      	lsls	r0, r2, #5
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4621      	mov	r1, r4
 800225e:	1a51      	subs	r1, r2, r1
 8002260:	61b9      	str	r1, [r7, #24]
 8002262:	4629      	mov	r1, r5
 8002264:	eb63 0301 	sbc.w	r3, r3, r1
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002276:	4659      	mov	r1, fp
 8002278:	018b      	lsls	r3, r1, #6
 800227a:	4651      	mov	r1, sl
 800227c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002280:	4651      	mov	r1, sl
 8002282:	018a      	lsls	r2, r1, #6
 8002284:	4651      	mov	r1, sl
 8002286:	ebb2 0801 	subs.w	r8, r2, r1
 800228a:	4659      	mov	r1, fp
 800228c:	eb63 0901 	sbc.w	r9, r3, r1
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
 80022a8:	4623      	mov	r3, r4
 80022aa:	eb18 0303 	adds.w	r3, r8, r3
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	462b      	mov	r3, r5
 80022b2:	eb49 0303 	adc.w	r3, r9, r3
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022c4:	4629      	mov	r1, r5
 80022c6:	024b      	lsls	r3, r1, #9
 80022c8:	4621      	mov	r1, r4
 80022ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ce:	4621      	mov	r1, r4
 80022d0:	024a      	lsls	r2, r1, #9
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022da:	2200      	movs	r2, #0
 80022dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80022de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022e4:	f7fd ffec 	bl	80002c0 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022f2:	e065      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x420>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	4618      	mov	r0, r3
 800230a:	4611      	mov	r1, r2
 800230c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002310:	653b      	str	r3, [r7, #80]	; 0x50
 8002312:	2300      	movs	r3, #0
 8002314:	657b      	str	r3, [r7, #84]	; 0x54
 8002316:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800231a:	4642      	mov	r2, r8
 800231c:	464b      	mov	r3, r9
 800231e:	f04f 0000 	mov.w	r0, #0
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	0159      	lsls	r1, r3, #5
 8002328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800232c:	0150      	lsls	r0, r2, #5
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4641      	mov	r1, r8
 8002334:	1a51      	subs	r1, r2, r1
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	4649      	mov	r1, r9
 800233a:	eb63 0301 	sbc.w	r3, r3, r1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800234c:	4659      	mov	r1, fp
 800234e:	018b      	lsls	r3, r1, #6
 8002350:	4651      	mov	r1, sl
 8002352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002356:	4651      	mov	r1, sl
 8002358:	018a      	lsls	r2, r1, #6
 800235a:	4651      	mov	r1, sl
 800235c:	1a54      	subs	r4, r2, r1
 800235e:	4659      	mov	r1, fp
 8002360:	eb63 0501 	sbc.w	r5, r3, r1
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	464b      	mov	r3, r9
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a8:	2200      	movs	r2, #0
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023b2:	f7fd ff85 	bl	80002c0 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4613      	mov	r3, r2
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0f1b      	lsrs	r3, r3, #28
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80023ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023de:	e003      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80023e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	37b8      	adds	r7, #184	; 0xb8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400

08002400 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e28d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8083 	beq.w	8002526 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002420:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d019      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800242c:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002434:	2b08      	cmp	r3, #8
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002438:	4b8e      	ldr	r3, [pc, #568]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x124>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e25a      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x90>
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7b      	ldr	r2, [pc, #492]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xb4>
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b73      	ldr	r3, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a72      	ldr	r2, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6e      	ldr	r2, [pc, #440]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6b      	ldr	r2, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fc8e 	bl	8000df4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fc8a 	bl	8000df4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e21f      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xdc>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fc7a 	bl	8000df4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fc76 	bl	8000df4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e20b      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b57      	ldr	r3, [pc, #348]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x104>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06f      	beq.n	8002612 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002532:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1d3      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fc23 	bl	8000df4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fc1f 	bl	8000df4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1b4      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc02 	bl	8000df4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fbfe 	bl	8000df4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e193      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fbe2 	bl	8000df4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fbde 	bl	8000df4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e173      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x234>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fbcb 	bl	8000df4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fbc7 	bl	8000df4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e15c      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fb87 	bl	8000df4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fb83 	bl	8000df4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e118      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x31e>
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x340>
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a59      	ldr	r2, [pc, #356]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fb48 	bl	8000df4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fb44 	bl	8000df4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0d7      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x368>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fb32 	bl	8000df4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fb2e 	bl	8000df4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c1      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80ad 	beq.w	800292c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d060      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d145      	bne.n	8002872 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fb02 	bl	8000df4 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fafe 	bl	8000df4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e093      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fad3 	bl	8000df4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe facf 	bl	8000df4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e064      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x452>
 8002870:	e05c      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fabc 	bl	8000df4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fab8 	bl	8000df4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e04d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x480>
 800289e:	e045      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e040      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_RCC_OscConfig+0x538>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d122      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10f      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03f      	b.n	80029ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd ffe8 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 faf5 	bl	8002f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d17c      	bne.n	8002af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x2c>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e075      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x3e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e06e      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f9e3 	bl	8000df4 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a68:	e02a      	b.n	8002ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f982 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e007      	b.n	8002ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cf      	bne.n	8002a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f952 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d165      	bne.n	8002be2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_UART_Transmit_DMA+0x26>
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e05e      	b.n	8002be4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Transmit_DMA+0x38>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e057      	b.n	8002be4 <HAL_UART_Transmit_DMA+0xe8>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_UART_Transmit_DMA+0xf0>)
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_UART_Transmit_DMA+0xf4>)
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_UART_Transmit_DMA+0xf8>)
 8002b72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	2200      	movs	r2, #0
 8002b7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	461a      	mov	r2, r3
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	f7fe fa43 	bl	800101e <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	627a      	str	r2, [r7, #36]	; 0x24
 8002bcc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6a39      	ldr	r1, [r7, #32]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08002c35 	.word	0x08002c35
 8002bf0:	08002ccf 	.word	0x08002ccf
 8002bf4:	08002ceb 	.word	0x08002ceb

08002bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b090      	sub	sp, #64	; 0x40
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d137      	bne.n	8002cc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	2200      	movs	r2, #0
 8002c54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	623b      	str	r3, [r7, #32]
   return(result);
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c76:	633a      	str	r2, [r7, #48]	; 0x30
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e5      	bne.n	8002c56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cbe:	e002      	b.n	8002cc6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002cc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cc2:	f7ff ff99 	bl	8002bf8 <HAL_UART_TxCpltCallback>
}
 8002cc6:	bf00      	nop
 8002cc8:	3740      	adds	r7, #64	; 0x40
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff ff95 	bl	8002c0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b21      	cmp	r3, #33	; 0x21
 8002d1c:	d108      	bne.n	8002d30 <UART_DMAError+0x46>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2200      	movs	r2, #0
 8002d28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	f000 f895 	bl	8002e5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	d108      	bne.n	8002d64 <UART_DMAError+0x7a>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d5e:	68b8      	ldr	r0, [r7, #8]
 8002d60:	f000 f8a3 	bl	8002eaa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d70:	68b8      	ldr	r0, [r7, #8]
 8002d72:	f7ff ff55 	bl	8002c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b090      	sub	sp, #64	; 0x40
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	e050      	b.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d04c      	beq.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	f7fe f829 	bl	8000df4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d241      	bcs.n	8002e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dce:	637a      	str	r2, [r7, #52]	; 0x34
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3314      	adds	r3, #20
 8002de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	613b      	str	r3, [r7, #16]
   return(result);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e02:	623a      	str	r2, [r7, #32]
 8002e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	69f9      	ldr	r1, [r7, #28]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e00f      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d09f      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3740      	adds	r7, #64	; 0x40
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b089      	sub	sp, #36	; 0x24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	61ba      	str	r2, [r7, #24]
 8002e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b095      	sub	sp, #84	; 0x54
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed2:	643a      	str	r2, [r7, #64]	; 0x40
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e5      	bne.n	8002eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3314      	adds	r3, #20
 8002eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e5      	bne.n	8002ee6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d119      	bne.n	8002f56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f023 0310 	bic.w	r3, r3, #16
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f42:	61ba      	str	r2, [r7, #24]
 8002f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f64:	bf00      	nop
 8002f66:	3754      	adds	r7, #84	; 0x54
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f74:	b0c0      	sub	sp, #256	; 0x100
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	68d9      	ldr	r1, [r3, #12]
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	ea40 0301 	orr.w	r3, r0, r1
 8002f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fc8:	f021 010c 	bic.w	r1, r1, #12
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	6999      	ldr	r1, [r3, #24]
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	ea40 0301 	orr.w	r3, r0, r1
 8002ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b8f      	ldr	r3, [pc, #572]	; (800323c <UART_SetConfig+0x2cc>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0xa0>
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b8d      	ldr	r3, [pc, #564]	; (8003240 <UART_SetConfig+0x2d0>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d104      	bne.n	800301a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003010:	f7fe fc88 	bl	8001924 <HAL_RCC_GetPCLK2Freq>
 8003014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003018:	e003      	b.n	8003022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800301a:	f7fe fc6f 	bl	80018fc <HAL_RCC_GetPCLK1Freq>
 800301e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302c:	f040 810c 	bne.w	8003248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003034:	2200      	movs	r2, #0
 8003036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800303a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800303e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	1891      	adds	r1, r2, r2
 8003048:	65b9      	str	r1, [r7, #88]	; 0x58
 800304a:	415b      	adcs	r3, r3
 800304c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800304e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003052:	4621      	mov	r1, r4
 8003054:	eb12 0801 	adds.w	r8, r2, r1
 8003058:	4629      	mov	r1, r5
 800305a:	eb43 0901 	adc.w	r9, r3, r1
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800306e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003072:	4690      	mov	r8, r2
 8003074:	4699      	mov	r9, r3
 8003076:	4623      	mov	r3, r4
 8003078:	eb18 0303 	adds.w	r3, r8, r3
 800307c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003080:	462b      	mov	r3, r5
 8003082:	eb49 0303 	adc.w	r3, r9, r3
 8003086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800309a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800309e:	460b      	mov	r3, r1
 80030a0:	18db      	adds	r3, r3, r3
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
 80030a4:	4613      	mov	r3, r2
 80030a6:	eb42 0303 	adc.w	r3, r2, r3
 80030aa:	657b      	str	r3, [r7, #84]	; 0x54
 80030ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030b4:	f7fd f904 	bl	80002c0 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4b61      	ldr	r3, [pc, #388]	; (8003244 <UART_SetConfig+0x2d4>)
 80030be:	fba3 2302 	umull	r2, r3, r3, r2
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	011c      	lsls	r4, r3, #4
 80030c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030d8:	4642      	mov	r2, r8
 80030da:	464b      	mov	r3, r9
 80030dc:	1891      	adds	r1, r2, r2
 80030de:	64b9      	str	r1, [r7, #72]	; 0x48
 80030e0:	415b      	adcs	r3, r3
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030e8:	4641      	mov	r1, r8
 80030ea:	eb12 0a01 	adds.w	sl, r2, r1
 80030ee:	4649      	mov	r1, r9
 80030f0:	eb43 0b01 	adc.w	fp, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003108:	4692      	mov	sl, r2
 800310a:	469b      	mov	fp, r3
 800310c:	4643      	mov	r3, r8
 800310e:	eb1a 0303 	adds.w	r3, sl, r3
 8003112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003116:	464b      	mov	r3, r9
 8003118:	eb4b 0303 	adc.w	r3, fp, r3
 800311c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800312c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003134:	460b      	mov	r3, r1
 8003136:	18db      	adds	r3, r3, r3
 8003138:	643b      	str	r3, [r7, #64]	; 0x40
 800313a:	4613      	mov	r3, r2
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
 8003142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800314a:	f7fd f8b9 	bl	80002c0 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4611      	mov	r1, r2
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <UART_SetConfig+0x2d4>)
 8003156:	fba3 2301 	umull	r2, r3, r3, r1
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2264      	movs	r2, #100	; 0x64
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	1acb      	subs	r3, r1, r3
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <UART_SetConfig+0x2d4>)
 800316c:	fba3 2302 	umull	r2, r3, r3, r2
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003178:	441c      	add	r4, r3
 800317a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	1891      	adds	r1, r2, r2
 8003192:	63b9      	str	r1, [r7, #56]	; 0x38
 8003194:	415b      	adcs	r3, r3
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800319c:	4641      	mov	r1, r8
 800319e:	1851      	adds	r1, r2, r1
 80031a0:	6339      	str	r1, [r7, #48]	; 0x30
 80031a2:	4649      	mov	r1, r9
 80031a4:	414b      	adcs	r3, r1
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031b4:	4659      	mov	r1, fp
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4651      	mov	r1, sl
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d0:	464b      	mov	r3, r9
 80031d2:	460a      	mov	r2, r1
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031f0:	460b      	mov	r3, r1
 80031f2:	18db      	adds	r3, r3, r3
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f6:	4613      	mov	r3, r2
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003206:	f7fd f85b 	bl	80002c0 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <UART_SetConfig+0x2d4>)
 8003210:	fba3 1302 	umull	r1, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2164      	movs	r1, #100	; 0x64
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	3332      	adds	r3, #50	; 0x32
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <UART_SetConfig+0x2d4>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 0207 	and.w	r2, r3, #7
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4422      	add	r2, r4
 8003236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003238:	e106      	b.n	8003448 <UART_SetConfig+0x4d8>
 800323a:	bf00      	nop
 800323c:	40011000 	.word	0x40011000
 8003240:	40011400 	.word	0x40011400
 8003244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324c:	2200      	movs	r2, #0
 800324e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800325a:	4642      	mov	r2, r8
 800325c:	464b      	mov	r3, r9
 800325e:	1891      	adds	r1, r2, r2
 8003260:	6239      	str	r1, [r7, #32]
 8003262:	415b      	adcs	r3, r3
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800326a:	4641      	mov	r1, r8
 800326c:	1854      	adds	r4, r2, r1
 800326e:	4649      	mov	r1, r9
 8003270:	eb43 0501 	adc.w	r5, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	00eb      	lsls	r3, r5, #3
 800327e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003282:	00e2      	lsls	r2, r4, #3
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4643      	mov	r3, r8
 800328a:	18e3      	adds	r3, r4, r3
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003290:	464b      	mov	r3, r9
 8003292:	eb45 0303 	adc.w	r3, r5, r3
 8003296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032b6:	4629      	mov	r1, r5
 80032b8:	008b      	lsls	r3, r1, #2
 80032ba:	4621      	mov	r1, r4
 80032bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c0:	4621      	mov	r1, r4
 80032c2:	008a      	lsls	r2, r1, #2
 80032c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032c8:	f7fc fffa 	bl	80002c0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b60      	ldr	r3, [pc, #384]	; (8003454 <UART_SetConfig+0x4e4>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011c      	lsls	r4, r3, #4
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	1891      	adds	r1, r2, r2
 80032f2:	61b9      	str	r1, [r7, #24]
 80032f4:	415b      	adcs	r3, r3
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fc:	4641      	mov	r1, r8
 80032fe:	1851      	adds	r1, r2, r1
 8003300:	6139      	str	r1, [r7, #16]
 8003302:	4649      	mov	r1, r9
 8003304:	414b      	adcs	r3, r1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003314:	4659      	mov	r1, fp
 8003316:	00cb      	lsls	r3, r1, #3
 8003318:	4651      	mov	r1, sl
 800331a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331e:	4651      	mov	r1, sl
 8003320:	00ca      	lsls	r2, r1, #3
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	4603      	mov	r3, r0
 8003328:	4642      	mov	r2, r8
 800332a:	189b      	adds	r3, r3, r2
 800332c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003330:	464b      	mov	r3, r9
 8003332:	460a      	mov	r2, r1
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	67bb      	str	r3, [r7, #120]	; 0x78
 8003346:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003354:	4649      	mov	r1, r9
 8003356:	008b      	lsls	r3, r1, #2
 8003358:	4641      	mov	r1, r8
 800335a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800335e:	4641      	mov	r1, r8
 8003360:	008a      	lsls	r2, r1, #2
 8003362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003366:	f7fc ffab 	bl	80002c0 <__aeabi_uldivmod>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4611      	mov	r1, r2
 8003370:	4b38      	ldr	r3, [pc, #224]	; (8003454 <UART_SetConfig+0x4e4>)
 8003372:	fba3 2301 	umull	r2, r3, r3, r1
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	1acb      	subs	r3, r1, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a33      	ldr	r2, [pc, #204]	; (8003454 <UART_SetConfig+0x4e4>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	441c      	add	r4, r3
 8003392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003396:	2200      	movs	r2, #0
 8003398:	673b      	str	r3, [r7, #112]	; 0x70
 800339a:	677a      	str	r2, [r7, #116]	; 0x74
 800339c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	415b      	adcs	r3, r3
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b0:	4641      	mov	r1, r8
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	4649      	mov	r1, r9
 80033b8:	414b      	adcs	r3, r1
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033c8:	4659      	mov	r1, fp
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4651      	mov	r1, sl
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4642      	mov	r2, r8
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e2:	464b      	mov	r3, r9
 80033e4:	460a      	mov	r2, r1
 80033e6:	eb42 0303 	adc.w	r3, r2, r3
 80033ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60
 80033f6:	667a      	str	r2, [r7, #100]	; 0x64
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003404:	4649      	mov	r1, r9
 8003406:	008b      	lsls	r3, r1, #2
 8003408:	4641      	mov	r1, r8
 800340a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340e:	4641      	mov	r1, r8
 8003410:	008a      	lsls	r2, r1, #2
 8003412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003416:	f7fc ff53 	bl	80002c0 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <UART_SetConfig+0x4e4>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <UART_SetConfig+0x4e4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4422      	add	r2, r4
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	bf00      	nop
 800344a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800344e:	46bd      	mov	sp, r7
 8003450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003454:	51eb851f 	.word	0x51eb851f

08003458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003458:	b084      	sub	sp, #16
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	f107 001c 	add.w	r0, r7, #28
 8003466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2b01      	cmp	r3, #1
 800346e:	d122      	bne.n	80034b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa9c 	bl	80039e8 <USB_CoreReset>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e01a      	b.n	80034ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa90 	bl	80039e8 <USB_CoreReset>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
 80034de:	e005      	b.n	80034ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10b      	bne.n	800350a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f043 0206 	orr.w	r2, r3, #6
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003516:	b004      	add	sp, #16
 8003518:	4770      	bx	lr

0800351a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d115      	bne.n	800358a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800356a:	2001      	movs	r0, #1
 800356c:	f7fd fc4e 	bl	8000e0c <HAL_Delay>
      ms++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa28 	bl	80039cc <USB_GetMode>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d01e      	beq.n	80035c0 <USB_SetCurrentMode+0x84>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b31      	cmp	r3, #49	; 0x31
 8003586:	d9f0      	bls.n	800356a <USB_SetCurrentMode+0x2e>
 8003588:	e01a      	b.n	80035c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d115      	bne.n	80035bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800359c:	2001      	movs	r0, #1
 800359e:	f7fd fc35 	bl	8000e0c <HAL_Delay>
      ms++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa0f 	bl	80039cc <USB_GetMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <USB_SetCurrentMode+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b31      	cmp	r3, #49	; 0x31
 80035b8:	d9f0      	bls.n	800359c <USB_SetCurrentMode+0x60>
 80035ba:	e001      	b.n	80035c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e005      	b.n	80035cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b32      	cmp	r3, #50	; 0x32
 80035c4:	d101      	bne.n	80035ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d4:	b084      	sub	sp, #16
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e009      	b.n	8003608 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3340      	adds	r3, #64	; 0x40
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3301      	adds	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0e      	cmp	r3, #14
 800360c:	d9f2      	bls.n	80035f4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11c      	bne.n	800364e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e005      	b.n	800365a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	4619      	mov	r1, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003674:	461a      	mov	r2, r3
 8003676:	680b      	ldr	r3, [r1, #0]
 8003678:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003686:	2100      	movs	r1, #0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f965 	bl	8003958 <USB_SetDevSpeed>
 800368e:	e008      	b.n	80036a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003690:	2101      	movs	r1, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f960 	bl	8003958 <USB_SetDevSpeed>
 8003698:	e003      	b.n	80036a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800369a:	2103      	movs	r1, #3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f95b 	bl	8003958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036a2:	2110      	movs	r1, #16
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8f3 	bl	8003890 <USB_FlushTxFifo>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f91f 	bl	80038f8 <USB_FlushRxFifo>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	461a      	mov	r2, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	e043      	b.n	8003776 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003704:	d118      	bne.n	8003738 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e013      	b.n	800374a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	461a      	mov	r2, r3
 8003730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e008      	b.n	800374a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003768:	461a      	mov	r2, r3
 800376a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800376e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	3301      	adds	r3, #1
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b7      	bcc.n	80036ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e043      	b.n	800380c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800379a:	d118      	bne.n	80037ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	461a      	mov	r2, r3
 80037b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e013      	b.n	80037e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e008      	b.n	80037e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	461a      	mov	r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2300      	movs	r3, #0
 80037f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	461a      	mov	r2, r3
 8003800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3301      	adds	r3, #1
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d3b7      	bcc.n	8003784 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <USB_DevInit+0x2b8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f043 0208 	orr.w	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800387c:	7dfb      	ldrb	r3, [r7, #23]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003888:	b004      	add	sp, #16
 800388a:	4770      	bx	lr
 800388c:	803c3800 	.word	0x803c3800

08003890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <USB_FlushTxFifo+0x64>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e01b      	b.n	80038e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	daf2      	bge.n	800389e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	019b      	lsls	r3, r3, #6
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <USB_FlushTxFifo+0x64>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e006      	b.n	80038e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d0f0      	beq.n	80038c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	00030d40 	.word	0x00030d40

080038f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <USB_FlushRxFifo+0x5c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e018      	b.n	8003948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	daf2      	bge.n	8003904 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2210      	movs	r2, #16
 8003926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <USB_FlushRxFifo+0x5c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e006      	b.n	8003948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d0f0      	beq.n	8003928 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	00030d40 	.word	0x00030d40

08003958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80039a4:	f023 0303 	bic.w	r3, r3, #3
 80039a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0301 	and.w	r3, r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <USB_CoreReset+0x64>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e01b      	b.n	8003a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	daf2      	bge.n	80039f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <USB_CoreReset+0x64>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d0f0      	beq.n	8003a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	00030d40 	.word	0x00030d40

08003a50 <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	791b      	ldrb	r3, [r3, #4]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : status_(eventStatus) {}
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fd05 	bl	80044bc <_ZN10XFBehavior13getDispatcherEv>
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	681c      	ldr	r4, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	47a0      	blx	r4
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <_ZNK14StateMachine0117getRepeatIntervalEv>:
    ~StateMachine01() override;

protected:
    XFEventStatus processEvent() override;								///< Remplementation from XFBehavior

    inline int getRepeatInterval() const { return repeatInterval_; }	///< Returns repeat interval. Accessor for #_repeatInterval.
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_ZNK14StateMachine017getTextB5cxx11Ev>:
    inline string getText() const { return text_; }						///< Returns text. Accessor for #_text.
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f003 f97f 	bl	8006df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 * Constructor
 *
 * \param repeatInterval Interval in milliseconds used in state machine.
 * \param text Text to display by the state machine.
 */
StateMachine01::StateMachine01(int repeatInterval, string text)
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 : repeatInterval_(repeatInterval),
   text_(text)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fc2e 	bl	8004370 <_ZN10XFBehaviorC1Ev>
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]
 : repeatInterval_(repeatInterval),
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	611a      	str	r2, [r3, #16]
   text_(text)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3314      	adds	r3, #20
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 f964 	bl	8006df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
{
	currentState_ = STATE_INITIAL;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	731a      	strb	r2, [r3, #12]
}
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	08008410 	.word	0x08008410

08003b40 <_ZN14StateMachine01D1Ev>:

StateMachine01::~StateMachine01()
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <_ZN14StateMachine01D1Ev+0x2c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3314      	adds	r3, #20
 8003b52:	4618      	mov	r0, r3
 8003b54:	f003 f8c0 	bl	8006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fc1e 	bl	800439c <_ZN10XFBehaviorD1Ev>
{

}
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08008410 	.word	0x08008410

08003b70 <_ZN14StateMachine01D0Ev>:
StateMachine01::~StateMachine01()
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
}
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ffe1 	bl	8003b40 <_ZN14StateMachine01D1Ev>
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f002 ffc3 	bl	8006b0c <_ZdlPvj>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN14StateMachine0112processEventEv>:

XFEventStatus StateMachine01::processEvent()
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b92:	b091      	sub	sp, #68	; 0x44
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	72fb      	strb	r3, [r7, #11]
    switch (currentState_)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <_ZN14StateMachine0112processEventEv+0x1a>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d026      	beq.n	8003bf6 <_ZN14StateMachine0112processEventEv+0x66>
				eventStatus = XFEventStatus::Consumed;
			}
		}
		break;
	default:
		break;
 8003ba8:	e07b      	b.n	8003ca2 <_ZN14StateMachine0112processEventEv+0x112>
			if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fc79 	bl	80044a4 <_ZNK10XFBehavior15getCurrentEventEv>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff4b 	bl	8003a50 <_ZNK7XFEvent12getEventTypeEv>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d068      	beq.n	8003c9c <_ZN14StateMachine0112processEventEv+0x10c>
				GEN(XFDefaultTransition());
 8003bca:	687d      	ldr	r5, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	681c      	ldr	r4, [r3, #0]
 8003bd4:	2010      	movs	r0, #16
 8003bd6:	f002 ffaa 	bl	8006b2e <_Znwj>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461e      	mov	r6, r3
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 fd44 	bl	800466c <_ZN19XFDefaultTransitionC1Ev>
 8003be4:	4631      	mov	r1, r6
 8003be6:	4628      	mov	r0, r5
 8003be8:	47a0      	blx	r4
				currentState_ = STATE_SAY_HELLO;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	731a      	strb	r2, [r3, #12]
				eventStatus = XFEventStatus::Consumed;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	72fb      	strb	r3, [r7, #11]
		break;
 8003bf4:	e052      	b.n	8003c9c <_ZN14StateMachine0112processEventEv+0x10c>
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fc53 	bl	80044a4 <_ZNK10XFBehavior15getCurrentEventEv>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff25 	bl	8003a50 <_ZNK7XFEvent12getEventTypeEv>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d015      	beq.n	8003c38 <_ZN14StateMachine0112processEventEv+0xa8>
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fc48 	bl	80044a4 <_ZNK10XFBehavior15getCurrentEventEv>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff1a 	bl	8003a50 <_ZNK7XFEvent12getEventTypeEv>
 8003c1c:	4603      	mov	r3, r0
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d10c      	bne.n	8003c3c <_ZN14StateMachine0112processEventEv+0xac>
				 getCurrentTimeout()->getId() == Timeout_SAY_HELLO_id))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fc54 	bl	80044d2 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff1b 	bl	8003a68 <_ZNK7XFEvent5getIdEv>
 8003c32:	4603      	mov	r3, r0
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <_ZN14StateMachine0112processEventEv+0xac>
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <_ZN14StateMachine0112processEventEv+0xae>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d02e      	beq.n	8003ca0 <_ZN14StateMachine0112processEventEv+0x110>
					Trace::out(getText()+"\r");
 8003c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff49 	bl	8003ae0 <_ZNK14StateMachine017getTextB5cxx11Ev>
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <_ZN14StateMachine0112processEventEv+0x12c>)
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f831 	bl	8003cc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f96c 	bl	8003f40 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 f833 	bl	8006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f003 f82e 	bl	8006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				scheduleTimeout(Timeout_SAY_HELLO_id, getRepeatInterval());
 8003c7c:	687c      	ldr	r4, [r7, #4]
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff22 	bl	8003ac8 <_ZNK14StateMachine0117getRepeatIntervalEv>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7ff ff08 	bl	8003aa0 <_ZN10XFBehavior15scheduleTimeoutEii>
				currentState_ = STATE_SAY_HELLO;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	731a      	strb	r2, [r3, #12]
				eventStatus = XFEventStatus::Consumed;
 8003c96:	2301      	movs	r3, #1
 8003c98:	72fb      	strb	r3, [r7, #11]
		break;
 8003c9a:	e001      	b.n	8003ca0 <_ZN14StateMachine0112processEventEv+0x110>
		break;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <_ZN14StateMachine0112processEventEv+0x112>
		break;
 8003ca0:	bf00      	nop
	}

	return eventStatus;
 8003ca2:	7afa      	ldrb	r2, [r7, #11]
 8003ca4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fee8 	bl	8003a80 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8003cb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3744      	adds	r7, #68	; 0x44
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	080082a4 	.word	0x080082a4

08003cc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	68b8      	ldr	r0, [r7, #8]
 8003cd0:	f003 f854 	bl	8006d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f809 	bl	8003cee <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f002 ffdf 	bl	8006ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <Factory_initialize>:
#include "xf/xf.h"
#include "trace/trace.h"
#include "testfactory01.h"

void Factory_initialize()
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
    TestFactory01::initialize();
 8003d08:	f000 f808 	bl	8003d1c <_ZN13TestFactory0110initializeEv>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <Factory_build>:

void Factory_build()
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
    TestFactory01::build();
 8003d14:	f000 f80a 	bl	8003d2c <_ZN13TestFactory015buildEv>
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZN13TestFactory0110initializeEv>:
{
}

// static
void TestFactory01::initialize()
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <_ZN13TestFactory015buildEv>:

// static
void TestFactory01::build()
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
    Trace::out("Starting test1...");
 8003d30:	4806      	ldr	r0, [pc, #24]	; (8003d4c <_ZN13TestFactory015buildEv+0x20>)
 8003d32:	f000 f937 	bl	8003fa4 <_ZN5Trace3outEPKcz>
    Trace::out("---------------------");
 8003d36:	4806      	ldr	r0, [pc, #24]	; (8003d50 <_ZN13TestFactory015buildEv+0x24>)
 8003d38:	f000 f934 	bl	8003fa4 <_ZN5Trace3outEPKcz>

    // Start state machine
    task01_.startBehavior();
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <_ZN13TestFactory015buildEv+0x28>)
 8003d3e:	f000 fb5b 	bl	80043f8 <_ZN10XFBehavior13startBehaviorEv>
    task02_.startBehavior();
 8003d42:	4805      	ldr	r0, [pc, #20]	; (8003d58 <_ZN13TestFactory015buildEv+0x2c>)
 8003d44:	f000 fb58 	bl	80043f8 <_ZN10XFBehavior13startBehaviorEv>
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	080082a8 	.word	0x080082a8
 8003d50:	080082bc 	.word	0x080082bc
 8003d54:	200005e0 	.word	0x200005e0
 8003d58:	2000060c 	.word	0x2000060c

08003d5c <_Z41__static_initialization_and_destruction_0ii>:
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b090      	sub	sp, #64	; 0x40
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d142      	bne.n	8003df2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d13d      	bne.n	8003df2 <_Z41__static_initialization_and_destruction_0ii+0x96>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 8003d76:	f107 0320 	add.w	r3, r7, #32
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f002 fee8 	bl	8006b50 <_ZNSaIcEC1Ev>
 8003d80:	f107 0220 	add.w	r2, r7, #32
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	4923      	ldr	r1, [pc, #140]	; (8003e18 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 f866 	bl	8006e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	461a      	mov	r2, r3
 8003d96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d9a:	4820      	ldr	r0, [pc, #128]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003d9c:	f7ff feb0 	bl	8003b00 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 ff97 	bl	8006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003daa:	f107 0320 	add.w	r3, r7, #32
 8003dae:	4618      	mov	r0, r3
 8003db0:	f002 fecf 	bl	8006b52 <_ZNSaIcED1Ev>
StateMachine01 TestFactory01::task02_(500, "Echo");
 8003db4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 fec9 	bl	8006b50 <_ZNSaIcEC1Ev>
 8003dbe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc6:	4916      	ldr	r1, [pc, #88]	; (8003e20 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 f847 	bl	8006e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003dd8:	4812      	ldr	r0, [pc, #72]	; (8003e24 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003dda:	f7ff fe91 	bl	8003b00 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 ff78 	bl	8006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 feb0 	bl	8006b52 <_ZNSaIcED1Ev>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <_Z41__static_initialization_and_destruction_0ii+0xb2>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d105      	bne.n	8003e0e <_Z41__static_initialization_and_destruction_0ii+0xb2>
 8003e02:	4808      	ldr	r0, [pc, #32]	; (8003e24 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003e04:	f7ff fe9c 	bl	8003b40 <_ZN14StateMachine01D1Ev>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 8003e08:	4804      	ldr	r0, [pc, #16]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003e0a:	f7ff fe99 	bl	8003b40 <_ZN14StateMachine01D1Ev>
}
 8003e0e:	bf00      	nop
 8003e10:	3740      	adds	r7, #64	; 0x40
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080082d4 	.word	0x080082d4
 8003e1c:	200005e0 	.word	0x200005e0
 8003e20:	080082e0 	.word	0x080082e0
 8003e24:	2000060c 	.word	0x2000060c

08003e28 <_GLOBAL__sub_I_Factory_initialize>:
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7ff ff93 	bl	8003d5c <_Z41__static_initialization_and_destruction_0ii>
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_GLOBAL__sub_D_Factory_initialize>:
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7ff ff8b 	bl	8003d5c <_Z41__static_initialization_and_destruction_0ii>
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <_ZL10traceMutexv>:
static int32_t checkStringEnding(char * str, uint32_t len);

static XFMutex * mutex = XFMutex::create();

static interface::XFMutex & traceMutex()
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
    return *mutex;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <_ZL10traceMutexv+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	200007c8 	.word	0x200007c8

08003e60 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    traceMutex().lock();
 8003e64:	f7ff fff0 	bl	8003e48 <_ZL10traceMutexv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	4790      	blx	r2
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
    traceMutex().unlock();
 8003e7c:	f7ff ffe4 	bl	8003e48 <_ZL10traceMutexv>
 8003e80:	4603      	mov	r3, r0
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	320c      	adds	r2, #12
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	4790      	blx	r2
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <trace_initialize>:

void trace_initialize()
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    Trace::initialize();
 8003e94:	f000 f826 	bl	8003ee4 <_ZN5Trace10initializeEv>
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <trace_out>:

void trace_out(const char * const format , ...)
{
 8003e9c:	b40f      	push	{r0, r1, r2, r3}
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
    va_list args;

    // Format string
    va_start(args, format);
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	607b      	str	r3, [r7, #4]
    vsprintf(strTrace, format, args);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6939      	ldr	r1, [r7, #16]
 8003eae:	480b      	ldr	r0, [pc, #44]	; (8003edc <trace_out+0x40>)
 8003eb0:	f003 fa0a 	bl	80072c8 <vsiprintf>
    va_end(args);

    checkStringEnding(strTrace, strlen(strTrace));
 8003eb4:	4809      	ldr	r0, [pc, #36]	; (8003edc <trace_out+0x40>)
 8003eb6:	f7fc f9fb 	bl	80002b0 <strlen>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <trace_out+0x40>)
 8003ec0:	f000 f81a 	bl	8003ef8 <_ZL17checkStringEndingPcm>

    traceUart.write(strTrace);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4905      	ldr	r1, [pc, #20]	; (8003edc <trace_out+0x40>)
 8003ec8:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <trace_out+0x44>)
 8003eca:	f000 f994 	bl	80041f6 <_ZN4Uart5writeEPKcj>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed8:	b004      	add	sp, #16
 8003eda:	4770      	bx	lr
 8003edc:	200006c8 	.word	0x200006c8
 8003ee0:	20000638 	.word	0x20000638

08003ee4 <_ZN5Trace10initializeEv>:

//static
void Trace::initialize()
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	traceUart.initialize(TRACE_UART_BAUD_RATE);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <_ZN5Trace10initializeEv+0x10>)
 8003eea:	f000 f979 	bl	80041e0 <_ZN4Uart10initializeEv>
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000638 	.word	0x20000638

08003ef8 <_ZL17checkStringEndingPcm>:

static int32_t checkStringEnding(char * str, uint32_t len)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	if (!len)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <_ZL17checkStringEndingPcm+0x14>
	{
		return 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e015      	b.n	8003f38 <_ZL17checkStringEndingPcm+0x40>
	}

	if (str[len-1] != '\n')
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b0a      	cmp	r3, #10
 8003f18:	d00a      	beq.n	8003f30 <_ZL17checkStringEndingPcm+0x38>
		str[len] = '\r';
		str[len+1] = '\n';
		str[len+2] = '\0';
#else
		// Add "\n" at the end of the string
		str[len] = '\n';
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	220a      	movs	r2, #10
 8003f22:	701a      	strb	r2, [r3, #0]
		str[len+1] = '\0';
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fc f9bd 	bl	80002b0 <strlen>
 8003f36:	4603      	mov	r3, r0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Trace::out(string str)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	traceMutexLock();
 8003f48:	f7ff ff8a 	bl	8003e60 <_ZL14traceMutexLockv>
	if (str[str.length()-1] != '\n')
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f002 fec9 	bl	8006ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003f52:	4603      	mov	r3, r0
 8003f54:	3b01      	subs	r3, #1
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f002 fec5 	bl	8006ce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
	{
		str += '\n';
 8003f70:	210a      	movs	r1, #10
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f002 feda 	bl	8006d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	if(str[str.length()-2] != '\r'){
		str.insert(str.length()-1, "\r");
	}
#endif // TRACE_ADD_CRLF_SEQU

	traceUart.write(str.data(), str.length());
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f002 ff15 	bl	8006da8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f002 feaf 	bl	8006ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4804      	ldr	r0, [pc, #16]	; (8003fa0 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8003f8e:	f000 f932 	bl	80041f6 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 8003f92:	f7ff ff71 	bl	8003e78 <_ZL16traceMutexUnlockv>
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000638 	.word	0x20000638

08003fa4 <_ZN5Trace3outEPKcz>:

void Trace::out(const char * format, ...)
{
 8003fa4:	b40f      	push	{r0, r1, r2, r3}
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
	traceMutexLock();
 8003fac:	f7ff ff58 	bl	8003e60 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	607b      	str	r3, [r7, #4]
	vsprintf(strTrace, format, args);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6939      	ldr	r1, [r7, #16]
 8003fba:	480c      	ldr	r0, [pc, #48]	; (8003fec <_ZN5Trace3outEPKcz+0x48>)
 8003fbc:	f003 f984 	bl	80072c8 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 8003fc0:	480a      	ldr	r0, [pc, #40]	; (8003fec <_ZN5Trace3outEPKcz+0x48>)
 8003fc2:	f7fc f975 	bl	80002b0 <strlen>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4808      	ldr	r0, [pc, #32]	; (8003fec <_ZN5Trace3outEPKcz+0x48>)
 8003fcc:	f7ff ff94 	bl	8003ef8 <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4906      	ldr	r1, [pc, #24]	; (8003fec <_ZN5Trace3outEPKcz+0x48>)
 8003fd4:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <_ZN5Trace3outEPKcz+0x4c>)
 8003fd6:	f000 f90e 	bl	80041f6 <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 8003fda:	f7ff ff4d 	bl	8003e78 <_ZL16traceMutexUnlockv>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe8:	b004      	add	sp, #16
 8003fea:	4770      	bx	lr
 8003fec:	200006c8 	.word	0x200006c8
 8003ff0:	20000638 	.word	0x20000638

08003ff4 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10f      	bne.n	8004024 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <_Z41__static_initialization_and_destruction_0ii+0x30>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800400e:	2300      	movs	r3, #0
 8004010:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004012:	2100      	movs	r1, #0
 8004014:	480c      	ldr	r0, [pc, #48]	; (8004048 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004016:	f000 f877 	bl	8004108 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
static XFMutex * mutex = XFMutex::create();
 800401a:	f002 fd01 	bl	8006a20 <_ZN9interface7XFMutex6createEv>
 800401e:	4603      	mov	r3, r0
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004030:	4293      	cmp	r3, r2
 8004032:	d102      	bne.n	800403a <_Z41__static_initialization_and_destruction_0ii+0x46>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8004034:	4804      	ldr	r0, [pc, #16]	; (8004048 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004036:	f000 f8b3 	bl	80041a0 <_ZN4UartD1Ev>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000088 	.word	0x20000088
 8004048:	20000638 	.word	0x20000638
 800404c:	200007c8 	.word	0x200007c8

08004050 <_GLOBAL__sub_I_trace_initialize>:
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
 8004054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004058:	2001      	movs	r0, #1
 800405a:	f7ff ffcb 	bl	8003ff4 <_Z41__static_initialization_and_destruction_0ii>
 800405e:	bd80      	pop	{r7, pc}

08004060 <_GLOBAL__sub_D_trace_initialize>:
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
 8004064:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004068:	2000      	movs	r0, #0
 800406a:	f7ff ffc3 	bl	8003ff4 <_Z41__static_initialization_and_destruction_0ii>
 800406e:	bd80      	pop	{r7, pc}

08004070 <_Z5inISRv>:

volatile int bInISR = 0;
volatile int bOMEnterCriticalRegionNested = 0;

int inISR()
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <_Z5inISRv+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200007cc 	.word	0x200007cc

08004088 <_Z13enterCriticalv>:

void enterCritical()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 800408c:	f7ff fff0 	bl	8004070 <_Z5inISRv>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <_Z13enterCriticalv+0x38>
	{
		if (!bOMEnterCriticalRegionNested)
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <_Z13enterCriticalv+0x3c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <_Z13enterCriticalv+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80040b2:	b672      	cpsid	i
}
 80040b4:	bf00      	nop
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 80040b6:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <_Z13enterCriticalv+0x3c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a01      	ldr	r2, [pc, #4]	; (80040c4 <_Z13enterCriticalv+0x3c>)
 80040be:	6013      	str	r3, [r2, #0]
	}
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200007d0 	.word	0x200007d0

080040c8 <_Z12exitCriticalv>:

void exitCritical()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 80040cc:	f7ff ffd0 	bl	8004070 <_Z5inISRv>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <_Z12exitCriticalv+0x38>
	{
		bOMEnterCriticalRegionNested--;
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <_Z12exitCriticalv+0x3c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	4a07      	ldr	r2, [pc, #28]	; (8004104 <_Z12exitCriticalv+0x3c>)
 80040e8:	6013      	str	r3, [r2, #0]

		if (!bOMEnterCriticalRegionNested)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <_Z12exitCriticalv+0x3c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_Z12exitCriticalv+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 80040fc:	b662      	cpsie	i
}
 80040fe:	bf00      	nop
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200007d0 	.word	0x200007d0

08004108 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	72fb      	strb	r3, [r7, #11]
 8004118:	4613      	mov	r3, r2
 800411a:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 800411c:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]
 : _uartNbr(-1),
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	711a      	strb	r2, [r3, #4]
   _pUartHandle(NULL),
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
   _bTxDMA(bTxDMA)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	7aba      	ldrb	r2, [r7, #10]
 8004132:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d905      	bls.n	8004146 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 800413c:	4a14      	ldr	r2, [pc, #80]	; (8004190 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 800413e:	2111      	movs	r1, #17
 8004140:	4814      	ldr	r0, [pc, #80]	; (8004194 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004142:	f002 feb3 	bl	8006eac <__assert_func>

	if (uartNbr < UART_COUNT)
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d817      	bhi.n	800417c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 800414c:	7afb      	ldrb	r3, [r7, #11]
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	490f      	ldr	r1, [pc, #60]	; (8004198 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	7afa      	ldrb	r2, [r7, #11]
 8004166:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	e005      	b.n	800417c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 8004172:	4a07      	ldr	r2, [pc, #28]	; (8004190 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8004174:	211f      	movs	r1, #31
 8004176:	4807      	ldr	r0, [pc, #28]	; (8004194 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004178:	f002 fe98 	bl	8006eac <__assert_func>
        }
    }
}
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	08008438 	.word	0x08008438
 800418c:	080082e8 	.word	0x080082e8
 8004190:	08008300 	.word	0x08008300
 8004194:	08008338 	.word	0x08008338
 8004198:	200007d4 	.word	0x200007d4
 800419c:	08008364 	.word	0x08008364

080041a0 <_ZN4UartD1Ev>:

Uart::~Uart()
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <_ZN4UartD1Ev+0x1c>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
{

}
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	08008438 	.word	0x08008438

080041c0 <_ZN4UartD0Ev>:
Uart::~Uart()
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
}
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffe9 	bl	80041a0 <_ZN4UartD1Ev>
 80041ce:	2190      	movs	r1, #144	; 0x90
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f002 fc9b 	bl	8006b0c <_ZdlPvj>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	return true;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
	if (!length)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7fc f851 	bl	80002b0 <strlen>
 800420e:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	7b1b      	ldrb	r3, [r3, #12]
 8004214:	f083 0301 	eor.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6898      	ldr	r0, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b29a      	uxth	r2, r3
 8004226:	2332      	movs	r3, #50	; 0x32
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	f7fe fbd4 	bl	80029d6 <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 800422e:	e004      	b.n	800423a <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f805 	bl	8004244 <_ZN4Uart13writeUsingDMAEPKhm>
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d905      	bls.n	8004262 <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 800425a:	2150      	movs	r1, #80	; 0x50
 800425c:	4814      	ldr	r0, [pc, #80]	; (80042b0 <_ZN4Uart13writeUsingDMAEPKhm+0x6c>)
 800425e:	f002 fe25 	bl	8006eac <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	330d      	adds	r3, #13
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f003 f91f 	bl	80074ae <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004270:	e000      	b.n	8004274 <_ZN4Uart13writeUsingDMAEPKhm+0x30>
    { continue; }
 8004272:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f2      	bne.n	8004272 <_ZN4Uart13writeUsingDMAEPKhm+0x2e>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6898      	ldr	r0, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	330d      	adds	r3, #13
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	b292      	uxth	r2, r2
 8004298:	4619      	mov	r1, r3
 800429a:	f7fe fc2f 	bl	8002afc <HAL_UART_Transmit_DMA>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	0800836c 	.word	0x0800836c
 80042ac:	0800838c 	.word	0x0800838c
 80042b0:	08008338 	.word	0x08008338

080042b4 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>:
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	{
        return (this->status_ == eventStatus);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
	}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZN9interface10XFBehaviorC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  	///< Called by the dispatcher to process an event.

protected:
    XFBehavior() = default;
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <_ZN9interface10XFBehaviorC1Ev+0x1c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	08008470 	.word	0x08008470

08004330 <_ZN9interface10XFBehaviorD1Ev>:
    virtual ~XFBehavior() = default;
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <_ZN9interface10XFBehaviorD1Ev+0x1c>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	08008470 	.word	0x08008470

08004350 <_ZN9interface10XFBehaviorD0Ev>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ffe9 	bl	8004330 <_ZN9interface10XFBehaviorD1Ev>
 800435e:	2104      	movs	r1, #4
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f002 fbd3 	bl	8006b0c <_ZdlPvj>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN10XFBehaviorC1Ev>:
#include "xf/initialevent.h"
#include "xf/behavior.h"
#include "trace/trace.h"
// TODO: Implement code for XFBehavior class  

XFBehavior::XFBehavior()
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ffc8 	bl	8004310 <_ZN9interface10XFBehaviorC1Ev>
 8004380:	4a05      	ldr	r2, [pc, #20]	; (8004398 <_ZN10XFBehaviorC1Ev+0x28>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
{
    this->deleteOnTerminate_ = false; // false by default
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	711a      	strb	r2, [r3, #4]
}
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	08008448 	.word	0x08008448

0800439c <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <_ZN10XFBehaviorD1Ev+0x38>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
{
    if(this->deleteOnTerminate()){
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f85f 	bl	800446e <_ZNK10XFBehavior17deleteOnTerminateEv>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <_ZN10XFBehaviorD1Ev+0x26>
        delete this;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <_ZN10XFBehaviorD1Ev+0x26>
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f80b 	bl	80043d8 <_ZN10XFBehaviorD0Ev>
XFBehavior::~XFBehavior()
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ffb3 	bl	8004330 <_ZN9interface10XFBehaviorD1Ev>
    }
}
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	08008448 	.word	0x08008448

080043d8 <_ZN10XFBehaviorD0Ev>:
XFBehavior::~XFBehavior()
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
}
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ffdb 	bl	800439c <_ZN10XFBehaviorD1Ev>
 80043e6:	210c      	movs	r1, #12
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f002 fb8f 	bl	8006b0c <_ZdlPvj>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
    XFInitialEvent* evInit = new XFInitialEvent();
 8004400:	2010      	movs	r0, #16
 8004402:	f002 fb94 	bl	8006b2e <_Znwj>
 8004406:	4603      	mov	r3, r0
 8004408:	461c      	mov	r4, r3
 800440a:	4620      	mov	r0, r4
 800440c:	f000 f970 	bl	80046f0 <_ZN14XFInitialEventC1Ev>
 8004410:	60fc      	str	r4, [r7, #12]
    this->pushEvent(evInit);//send an init event
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}

08004428 <_ZN10XFBehavior9pushEventEP7XFEvent>:

void XFBehavior::pushEvent(XFEvent *pEvent){
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    /*
    if(pEvent->getEventType()== XFEvent::DefaultTransition||pEvent->getEventType()== XFEvent::Initial){
        pEvent->setBehavior(this);
    }*/
    if(pEvent->getBehavior()==nullptr){
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f7ff ff3e 	bl	80042b4 <_ZNK7XFEvent11getBehaviorEv>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <_ZN10XFBehavior9pushEventEP7XFEvent+0x2a>
        pEvent->setBehavior(this);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4619      	mov	r1, r3
 800444c:	6838      	ldr	r0, [r7, #0]
 800444e:	f7ff ff3d 	bl	80042cc <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>
    }
    getDispatcher()->pushEvent(pEvent);// push event further
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f832 	bl	80044bc <_ZN10XFBehavior13getDispatcherEv>
 8004458:	4603      	mov	r3, r0
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	3208      	adds	r2, #8
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	4790      	blx	r2
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
    return this->deleteOnTerminate_;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	791b      	ldrb	r3, [r3, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	70fb      	strb	r3, [r7, #3]
    this->deleteOnTerminate_ = deleteBehaviour;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	711a      	strb	r2, [r3, #4]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent *XFBehavior::getCurrentEvent() const
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    return this->pCurrentEvent_;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher *XFBehavior::getDispatcher(){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    return interface::XFDispatcher::getInstance();
 80044c4:	f000 f9ac 	bl	8004820 <_ZN9interface12XFDispatcher11getInstanceEv>
 80044c8:	4603      	mov	r3, r0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout *XFBehavior::getCurrentTimeout()
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    if(this->pCurrentEvent_->getEventType() == XFEvent::Timeout){
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fab6 	bl	8003a50 <_ZNK7XFEvent12getEventTypeEv>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <_ZN10XFBehavior17getCurrentTimeoutEv+0x28>
    return (XFTimeout*)this->pCurrentEvent_;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	e000      	b.n	80044fc <_ZN10XFBehavior17getCurrentTimeoutEv+0x2a>
    }
    return nullptr;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent *pEvent)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
    this->pCurrentEvent_= pEvent;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent *pEvent)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
    XFBehavior::TerminateBehavior terminateBehavior = false;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
    XFEventStatus status;
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff faa3 	bl	8003a80 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
    this->setCurrentEvent(pEvent);
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ffe1 	bl	8004504 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    status = this->processEvent();
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	331c      	adds	r3, #28
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
 800454e:	4603      	mov	r3, r0
 8004550:	733b      	strb	r3, [r7, #12]
    if(status == XFEventStatus::Consumed && pEvent->deleteAfterConsume()){
 8004552:	2301      	movs	r3, #1
 8004554:	737b      	strb	r3, [r7, #13]
 8004556:	f107 020d 	add.w	r2, r7, #13
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fec1 	bl	80042e8 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <_ZN10XFBehavior7processEPK7XFEvent+0x62>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	4798      	blx	r3
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <_ZN10XFBehavior7processEPK7XFEvent+0x62>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <_ZN10XFBehavior7processEPK7XFEvent+0x64>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <_ZN10XFBehavior7processEPK7XFEvent+0x78>
        delete pEvent;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <_ZN10XFBehavior7processEPK7XFEvent+0x78>
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	3204      	adds	r2, #4
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	4790      	blx	r2
    }
    if(status == XFEventStatus::Terminate && this->deleteOnTerminate()){
 8004598:	2308      	movs	r3, #8
 800459a:	73bb      	strb	r3, [r7, #14]
 800459c:	f107 020e 	add.w	r2, r7, #14
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fe9e 	bl	80042e8 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <_ZN10XFBehavior7processEPK7XFEvent+0xa8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3310      	adds	r3, #16
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <_ZN10XFBehavior7processEPK7XFEvent+0xa8>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <_ZN10XFBehavior7processEPK7XFEvent+0xaa>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <_ZN10XFBehavior7processEPK7XFEvent+0xb2>
        terminateBehavior = true;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]

    }
    return terminateBehavior;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZN7XFEventC1ENS_11XFEventTypeEi>:
    XFEvent(XFEventType eventType, int id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr) {}
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	460b      	mov	r3, r1
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	72fb      	strb	r3, [r7, #11]
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <_ZN7XFEventC1ENS_11XFEventTypeEi+0x34>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	7afa      	ldrb	r2, [r7, #11]
 80045f4:	711a      	strb	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	08008494 	.word	0x08008494

08004614 <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <_ZN7XFEventD1Ev+0x1c>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	08008494 	.word	0x08008494

08004634 <_ZN7XFEventD0Ev>:
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ffe9 	bl	8004614 <_ZN7XFEventD1Ev>
 8004642:	2110      	movs	r1, #16
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f002 fa61 	bl	8006b0c <_ZdlPvj>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	2300      	movs	r3, #0
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <_ZN19XFDefaultTransitionC1Ev>:
#include "xf/defaulttransition.h"

// TODO: Implement code for XFDefaultTransition class

XFDefaultTransition::XFDefaultTransition():XFEvent(DefaultTransition)
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ffae 	bl	80045dc <_ZN7XFEventC1ENS_11XFEventTypeEi>
 8004680:	4a03      	ldr	r2, [pc, #12]	; (8004690 <_ZN19XFDefaultTransitionC1Ev+0x24>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
{

}
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	080084a8 	.word	0x080084a8

08004694 <_ZNK19XFDefaultTransition18deleteAfterConsumeEv>:

bool XFDefaultTransition::deleteAfterConsume() const
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
    return false;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <_ZN19XFDefaultTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * another (without a trigger) a default transition must be pushed.
 */
class XFDefaultTransition : public XFEvent
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	4a05      	ldr	r2, [pc, #20]	; (80046cc <_ZN19XFDefaultTransitionD1Ev+0x20>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ffa9 	bl	8004614 <_ZN7XFEventD1Ev>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	080084a8 	.word	0x080084a8

080046d0 <_ZN19XFDefaultTransitionD0Ev>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ffe7 	bl	80046ac <_ZN19XFDefaultTransitionD1Ev>
 80046de:	2110      	movs	r1, #16
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f002 fa13 	bl	8006b0c <_ZdlPvj>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

// TODO: Implement code for XFInitialEvent class

XFInitialEvent::XFInitialEvent()
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
    :XFEvent(Initial)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ff6c 	bl	80045dc <_ZN7XFEventC1ENS_11XFEventTypeEi>
 8004704:	4a03      	ldr	r2, [pc, #12]	; (8004714 <_ZN14XFInitialEventC1Ev+0x24>)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
{

}
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	080084bc 	.word	0x080084bc

08004718 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    return false;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	4a05      	ldr	r2, [pc, #20]	; (8004750 <_ZN14XFInitialEventD1Ev+0x20>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff67 	bl	8004614 <_ZN7XFEventD1Ev>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	080084bc 	.word	0x080084bc

08004754 <_ZN14XFInitialEventD0Ev>:
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ffe7 	bl	8004730 <_ZN14XFInitialEventD1Ev>
 8004762:	2110      	movs	r1, #16
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f002 f9d1 	bl	8006b0c <_ZdlPvj>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>:
#include "xf/timeout.h"
#include "xf/interface/timeoutmanager.h"
// TODO: Implement code for XFTimeout class

XFTimeout::XFTimeout(int id, int interval, interface::XFBehavior *pBehavior)
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
    :XFEvent(Timeout,id),interval_(interval)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	2104      	movs	r1, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff27 	bl	80045dc <_ZN7XFEventC1ENS_11XFEventTypeEi>
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x3c>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]
{
    this->setBehavior(pBehavior);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd94 	bl	80042cc <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>
}
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	080084d0 	.word	0x080084d0

080047b4 <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
    return false;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	4a05      	ldr	r2, [pc, #20]	; (80047ec <_ZN9XFTimeoutD1Ev+0x20>)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff19 	bl	8004614 <_ZN7XFEventD1Ev>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	080084d0 	.word	0x080084d0

080047f0 <_ZN9XFTimeoutD0Ev>:
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ffe7 	bl	80047cc <_ZN9XFTimeoutD1Ev>
 80047fe:	2118      	movs	r1, #24
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f002 f983 	bl	8006b0c <_ZdlPvj>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <__tcf_0>:
//       returned by the 'interface::XFDispatcher' class.


interface::XFDispatcher * interface::XFDispatcher::getInstance()
{
    static ::XFDispatcher dispatcher;
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__tcf_0+0xc>)
 8004816:	f000 f84f 	bl	80048b8 <_ZN12XFDispatcherD1Ev>
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200007e0 	.word	0x200007e0

08004820 <_ZN9interface12XFDispatcher11getInstanceEv>:
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
    static ::XFDispatcher dispatcher;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3bf 8f5b 	dmb	ish
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d013      	beq.n	8004866 <_ZN9interface12XFDispatcher11getInstanceEv+0x46>
 800483e:	480b      	ldr	r0, [pc, #44]	; (800486c <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 8004840:	f002 f966 	bl	8006b10 <__cxa_guard_acquire>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <_ZN9interface12XFDispatcher11getInstanceEv+0x46>
 8004854:	4806      	ldr	r0, [pc, #24]	; (8004870 <_ZN9interface12XFDispatcher11getInstanceEv+0x50>)
 8004856:	f000 f8d1 	bl	80049fc <_ZN12XFDispatcherC1Ev>
 800485a:	4806      	ldr	r0, [pc, #24]	; (8004874 <_ZN9interface12XFDispatcher11getInstanceEv+0x54>)
 800485c:	f002 fb44 	bl	8006ee8 <atexit>
 8004860:	4802      	ldr	r0, [pc, #8]	; (800486c <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 8004862:	f002 f961 	bl	8006b28 <__cxa_guard_release>
    return &dispatcher;
 8004866:	4b02      	ldr	r3, [pc, #8]	; (8004870 <_ZN9interface12XFDispatcher11getInstanceEv+0x50>)
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000818 	.word	0x20000818
 8004870:	200007e0 	.word	0x200007e0
 8004874:	08004811 	.word	0x08004811

08004878 <_ZN9interface12XFDispatcherD1Ev>:
{
    friend class ::XF;
    friend class ::DispatcherThread;

public:
    virtual ~XFDispatcher() = default;
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <_ZN9interface12XFDispatcherD1Ev+0x1c>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	0800850c 	.word	0x0800850c

08004898 <_ZN9interface12XFDispatcherD0Ev>:
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ffe9 	bl	8004878 <_ZN9interface12XFDispatcherD1Ev>
 80048a6:	2104      	movs	r1, #4
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 f92f 	bl	8006b0c <_ZdlPvj>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZN12XFDispatcherD1Ev>:

// TODO: Implement code for XFDispatcher class

#endif // USE_XF_COMMON_DISPATCHER_CLASS

XFDispatcher::~XFDispatcher()
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <_ZN12XFDispatcherD1Ev+0x2c>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f8b2 	bl	8005a34 <_ZN12XFEventQueueD1Ev>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ffd0 	bl	8004878 <_ZN9interface12XFDispatcherD1Ev>
{

}
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	080084e4 	.word	0x080084e4

080048e8 <_ZN12XFDispatcherD0Ev>:
XFDispatcher::~XFDispatcher()
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
}
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffe1 	bl	80048b8 <_ZN12XFDispatcherD1Ev>
 80048f6:	2138      	movs	r1, #56	; 0x38
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f002 f907 	bl	8006b0c <_ZdlPvj>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN12XFDispatcher9pushEventEP7XFEvent>:

void XFDispatcher::pushEvent(XFEvent *pEvent)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
    //TODO: search for the isInISR=> how we know that we are in ISR or not
    //Trace::out("Push event");
    this->events_.push(pEvent,false);//push the event in the queue
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	2200      	movs	r2, #0
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f8c4 	bl	8005aa8 <_ZN12XFEventQueue4pushEPK7XFEventb>
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZN12XFDispatcher15scheduleTimeoutEiiPN9interface10XFBehaviorE>:

void XFDispatcher::scheduleTimeout(int timeoutId, int interval, interface::XFBehavior *pBehavior)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
    XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId,interval,pBehavior);//add the timeout in timeoutManager, call timeoutManager with getInstance
 8004936:	f000 f93b 	bl	8004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800493a:	6803      	ldr	r3, [r0, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	681c      	ldr	r4, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	47a0      	blx	r4
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bd90      	pop	{r4, r7, pc}

08004950 <_ZN12XFDispatcher17unscheduleTimeoutEiPN9interface10XFBehaviorE>:
void XFDispatcher::unscheduleTimeout(int timeoutId, interface::XFBehavior *pBehavior)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
   XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId,pBehavior);//call timoutManager with getInstance to remove the timeout
 800495c:	f000 f928 	bl	8004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004960:	4603      	mov	r3, r0
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	3218      	adds	r2, #24
 8004966:	6814      	ldr	r4, [r2, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	47a0      	blx	r4
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}

08004978 <_ZN12XFDispatcher11executeOnceEv>:

// TODO: pop an event and execute it
void XFDispatcher::executeOnce()
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    if(!this->events_.empty()){// if there is an event in the queue   
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f881 	bl	8005a8c <_ZNK12XFEventQueue5emptyEv>
 800498a:	4603      	mov	r3, r0
 800498c:	f083 0301 	eor.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <_ZN12XFDispatcher11executeOnceEv+0x42>
        dispatchEvent(this->events_.front());// dispatch the event
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	331c      	adds	r3, #28
 800499c:	681c      	ldr	r4, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f8a4 	bl	8005af0 <_ZN12XFEventQueue5frontEv>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	47a0      	blx	r4
        this->events_.pop();// pop the event
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f8aa 	bl	8005b0e <_ZN12XFEventQueue3popEv>
    }
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <_ZN12XFDispatcher7executeEPKv>:


int XFDispatcher::execute(const void *param)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
    while(true){
        this->executeOnce();
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3318      	adds	r3, #24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
 80049d8:	e7f8      	b.n	80049cc <_ZN12XFDispatcher7executeEPKv+0xa>
	...

080049dc <_ZN9interface12XFDispatcherC1Ev>:
protected:
    /**
     * Constructor is protected because only method createInstance()
     * should be called to create Dispatcher instances
     */
    XFDispatcher() = default;
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <_ZN9interface12XFDispatcherC1Ev+0x1c>)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	0800850c 	.word	0x0800850c

080049fc <_ZN12XFDispatcherC1Ev>:
    }
}

XFDispatcher::XFDispatcher()
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ffe8 	bl	80049dc <_ZN9interface12XFDispatcherC1Ev>
 8004a0c:	4a06      	ldr	r2, [pc, #24]	; (8004a28 <_ZN12XFDispatcherC1Ev+0x2c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fff0 	bl	80059fc <_ZN12XFEventQueueC1Ev>
{

}
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	080084e4 	.word	0x080084e4

08004a2c <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent>:


void XFDispatcher::dispatchEvent(const XFEvent *pEvent) const
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
    XFBehavior::TerminateBehavior terminateBehavior;
    terminateBehavior = pEvent->getBehavior()->process(pEvent); // call the process method
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f7ff fc3c 	bl	80042b4 <_ZNK7XFEvent11getBehaviorEv>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	3218      	adds	r2, #24
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	4790      	blx	r2
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]

    if(terminateBehavior){// if we should delete the behavior
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x3e>
        delete (pEvent->getBehavior());
 8004a54:	6838      	ldr	r0, [r7, #0]
 8004a56:	f7ff fc2d 	bl	80042b4 <_ZNK7XFEvent11getBehaviorEv>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x3e>
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	3204      	adds	r2, #4
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	4790      	blx	r2
    }

}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f805 	bl	8004aa2 <_ZNSt8__detail17_List_node_header7_M_initEv>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
#endif
      }
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <_ZNKSt14_Function_base8_M_emptyEv>:
    {
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
    {
        tickInterval_ = tickInterval;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
    }
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    {
        return tickInterval_;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
    }
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
        tickInterval_(0)
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <_ZN9interface16XFTimeoutManagerC1Ev+0x24>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
    {}
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	08008560 	.word	0x08008560

08004b48 <_ZN9XFTimeout11setRelTicksEi>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline int getInterval() const { return interval_; }                                            ///< Returns the timeout interval in milliseconds.
    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	615a      	str	r2, [r3, #20]
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <_ZNK9XFTimeout11getRelTicksEv>:
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	615a      	str	r2, [r3, #20]
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <__tcf_0>:
//       returned by the 'interface::XFTimeoutManager' class.


interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
    static ::XFTimeoutManager timeoutManager;
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__tcf_0+0xc>)
 8004ba6:	f000 f85d 	bl	8004c64 <_ZN16XFTimeoutManagerD1Ev>
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	2000081c 	.word	0x2000081c

08004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
    static ::XFTimeoutManager timeoutManager;
 8004bb4:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3bf 8f5b 	dmb	ish
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d013      	beq.n	8004bf6 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x46>
 8004bce:	480b      	ldr	r0, [pc, #44]	; (8004bfc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 8004bd0:	f001 ff9e 	bl	8006b10 <__cxa_guard_acquire>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x46>
 8004be4:	4806      	ldr	r0, [pc, #24]	; (8004c00 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x50>)
 8004be6:	f000 f9b9 	bl	8004f5c <_ZN16XFTimeoutManagerC1Ev>
 8004bea:	4806      	ldr	r0, [pc, #24]	; (8004c04 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x54>)
 8004bec:	f002 f97c 	bl	8006ee8 <atexit>
 8004bf0:	4802      	ldr	r0, [pc, #8]	; (8004bfc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 8004bf2:	f001 ff99 	bl	8006b28 <__cxa_guard_release>
    return &timeoutManager;
 8004bf6:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x50>)
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000834 	.word	0x20000834
 8004c00:	2000081c 	.word	0x2000081c
 8004c04:	08004ba1 	.word	0x08004ba1

08004c08 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <_ZN9interface16XFTimeoutManagerD1Ev+0x1c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	08008560 	.word	0x08008560

08004c28 <_ZN9interface16XFTimeoutManagerD0Ev>:
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ffe9 	bl	8004c08 <_ZN9interface16XFTimeoutManagerD1Ev>
 8004c36:	2108      	movs	r1, #8
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 ff67 	bl	8006b0c <_ZdlPvj>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa79 	bl	800514a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <_ZN16XFTimeoutManagerD1Ev>:

#endif // USE_XF_COMMON_TIMEOUTMANAGER_CLASS


XFTimeoutManager::~XFTimeoutManager()
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <_ZN16XFTimeoutManagerD1Ev+0x2c>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3308      	adds	r3, #8
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ffe6 	bl	8004c48 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ffc2 	bl	8004c08 <_ZN9interface16XFTimeoutManagerD1Ev>
{

}
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	08008534 	.word	0x08008534

08004c94 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
}
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ffe1 	bl	8004c64 <_ZN16XFTimeoutManagerD1Ev>
 8004ca2:	2118      	movs	r1, #24
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 ff31 	bl	8006b0c <_ZdlPvj>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZN16XFTimeoutManager5startESt8functionIFvmEE>:

void XFTimeoutManager::start(std::function<void (uint32_t)> startTimeoutManagerTimer)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
    startTimeoutManagerTimer(this->tickInterval_);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f000 fa50 	bl	800516a <_ZNKSt8functionIFvmEEclEm>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZN16XFTimeoutManager15scheduleTimeoutEllPN9interface10XFBehaviorE>:

// add a timeout in the list with the target to reach when the event is done
void XFTimeoutManager::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFBehavior *pBehavior)
{
 8004cd2:	b590      	push	{r4, r7, lr}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
    XFTimeout * timeout = new XFTimeout(timeoutId,interval,pBehavior);// create a new timeout
 8004ce0:	2018      	movs	r0, #24
 8004ce2:	f001 ff24 	bl	8006b2e <_Znwj>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461c      	mov	r4, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7ff fd3f 	bl	8004774 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>
 8004cf6:	617c      	str	r4, [r7, #20]
    timeout->setRelTicks(interval/this->getTickInterval());// set the ticks
 8004cf8:	697c      	ldr	r4, [r7, #20]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
 8004d08:	4602      	mov	r2, r0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff ff18 	bl	8004b48 <_ZN9XFTimeout11setRelTicksEi>
    addTimeout(timeout);//push it in the list
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3320      	adds	r3, #32
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	4798      	blx	r3
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd90      	pop	{r4, r7, pc}

08004d2e <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE>:

void XFTimeoutManager::unscheduleTimeout(int32_t timeoutId, interface::XFBehavior *pBehavior)
{
 8004d2e:	b590      	push	{r4, r7, lr}
 8004d30:	b089      	sub	sp, #36	; 0x24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
    this->pMutex_->lock();
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4798      	blx	r3
    TimeoutList::iterator it;
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa27 	bl	80051a4 <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>
    for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fa30 	bl	80051c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8004d60:	4603      	mov	r3, r0
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e02a      	b.n	8004dbc <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x8e>
        if((*it)->getId()== timeoutId){
 8004d66:	f107 0314 	add.w	r3, r7, #20
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa71 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004d70:	4603      	mov	r3, r0
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fe77 	bl	8003a68 <_ZNK7XFEvent5getIdEv>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d011      	beq.n	8004db0 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x82>
            it = this->timeouts_.erase(it);// we remove the concerned timeout
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f103 0408 	add.w	r4, r3, #8
 8004d92:	f107 0214 	add.w	r2, r7, #20
 8004d96:	f107 0318 	add.w	r3, r7, #24
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fa66 	bl	800526e <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fa72 	bl	800528e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8004daa:	4603      	mov	r3, r0
 8004dac:	617b      	str	r3, [r7, #20]
            break;
 8004dae:	e017      	b.n	8004de0 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0xb2>
    for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa37 	bl	800522a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fa0e 	bl	80051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	f107 021c 	add.w	r2, r7, #28
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fa14 	bl	8005202 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1c2      	bne.n	8004d66 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x38>
        }
    }
    this->pMutex_->unlock();
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4610      	mov	r0, r2
 8004df0:	4798      	blx	r3
}
 8004df2:	bf00      	nop
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}

08004dfa <_ZN16XFTimeoutManager4tickEv>:

void XFTimeoutManager::tick()
{
 8004dfa:	b590      	push	{r4, r7, lr}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
    this->pMutex_->lock();// lock mutex
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
                it--;
            }
        }
    }*/

    if(!this->timeouts_.empty()){// if there is something in the list
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3308      	adds	r3, #8
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa53 	bl	80052c4 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f083 0301 	eor.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d064      	beq.n	8004ef4 <_ZN16XFTimeoutManager4tickEv+0xfa>
        TimeoutList::iterator it = this->timeouts_.begin();
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f9c6 	bl	80051c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	60fb      	str	r3, [r7, #12]
        if((*it)->getRelTicks() > 0){
 8004e38:	f107 030c 	add.w	r3, r7, #12
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa08 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fe8c 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bfcc      	ite	gt
 8004e52:	2301      	movgt	r3, #1
 8004e54:	2300      	movle	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d027      	beq.n	8004eac <_ZN16XFTimeoutManager4tickEv+0xb2>
            (*it)->substractFromRelTicks(1);}// we substract one tick if relTick is not 0
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f9f6 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004e66:	4603      	mov	r3, r0
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fe85 	bl	8004b7c <_ZN9XFTimeout21substractFromRelTicksEi>
 8004e72:	e03f      	b.n	8004ef4 <_ZN16XFTimeoutManager4tickEv+0xfa>
        else{
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
                returnTimeout((*it));// we push the event
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f9ea 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f94c 	bl	8005122 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                it = this->timeouts_.erase(it);// and we delete the timeout from the list
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0408 	add.w	r4, r3, #8
 8004e90:	f107 020c 	add.w	r2, r7, #12
 8004e94:	f107 0310 	add.w	r3, r7, #16
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f9e7 	bl	800526e <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f9f3 	bl	800528e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f996 	bl	80051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	f107 0214 	add.w	r2, r7, #20
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f99c 	bl	8005202 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <_ZN16XFTimeoutManager4tickEv+0xf4>
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f9bc 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004eda:	4603      	mov	r3, r0
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fe40 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <_ZN16XFTimeoutManager4tickEv+0xf4>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <_ZN16XFTimeoutManager4tickEv+0xf6>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1bf      	bne.n	8004e74 <_ZN16XFTimeoutManager4tickEv+0x7a>
            }
        }

    }

    this->pMutex_->unlock();// unlock mutex
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4610      	mov	r0, r2
 8004f04:	4798      	blx	r3
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd90      	pop	{r4, r7, pc}

08004f0e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9f6 	bl	8005308 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      _List_base() = default;
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f9d9 	bl	80052e8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:
      list() = default;
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ffeb 	bl	8004f26 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <_ZN16XFTimeoutManagerC1Ev>:

XFTimeoutManager::XFTimeoutManager()
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fdda 	bl	8004b20 <_ZN9interface16XFTimeoutManagerC1Ev>
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <_ZN16XFTimeoutManagerC1Ev+0x34>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3308      	adds	r3, #8
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ffe2 	bl	8004f40 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
{
    this->pMutex_ = interface::XFMutex::create();
 8004f7c:	f001 fd50 	bl	8006a20 <_ZN9interface7XFMutex6createEv>
 8004f80:	4602      	mov	r2, r0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	615a      	str	r2, [r3, #20]
}
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	08008534 	.word	0x08008534

08004f94 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:

void XFTimeoutManager::addTimeout(XFTimeout *pNewTimeout)
{
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]

    bool timeoutInserted = false; // flag used to know if we have inserted the timeout in the list
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
    this->pMutex_->lock();
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
    //this->timeouts_.push_back(pNewTimeout);// add a timeout in the list
    if(!this->timeouts_.empty()){// if there is something in the list
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f983 	bl	80052c4 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f083 0301 	eor.w	r3, r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8097 	beq.w	80050fa <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x166>

        TimeoutList::iterator it;
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f8e7 	bl	80051a4 <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>
        for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f8f0 	bl	80051c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	e067      	b.n	80050b6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x122>
            XFTimeout* currentTimeout = (*it);// cast the iterator into a timeout
 8004fe6:	f107 0308 	add.w	r3, r7, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f931 	bl	8005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61bb      	str	r3, [r7, #24]
            if(!timeoutInserted){
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	f083 0301 	eor.w	r3, r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d053      	beq.n	80050aa <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x116>
                if(currentTimeout->getRelTicks() > pNewTimeout->getRelTicks()){// if the relTicks in current timeout are bigger than the ticks in newTimeout
 8005002:	69b8      	ldr	r0, [r7, #24]
 8005004:	f7ff fdae 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8005008:	4604      	mov	r4, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fda9 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8005012:	4603      	mov	r3, r0
 8005014:	429c      	cmp	r4, r3
 8005016:	bfcc      	ite	gt
 8005018:	2301      	movgt	r3, #1
 800501a:	2300      	movle	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d034      	beq.n	800508c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xf8>
                  this->timeouts_.insert(it,pNewTimeout);// insert the timeout in the list
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f103 0408 	add.w	r4, r3, #8
 8005028:	f107 0208 	add.w	r2, r7, #8
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f91b 	bl	800526e <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8005038:	463b      	mov	r3, r7
 800503a:	461a      	mov	r2, r3
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	4620      	mov	r0, r4
 8005040:	f000 f96e 	bl	8005320 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    timeoutInserted=true;
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
                    if(it!=this->timeouts_.end()){currentTimeout->setRelTicks(currentTimeout->getRelTicks()-pNewTimeout->getRelTicks());}
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3308      	adds	r3, #8
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f8c8 	bl	80051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005052:	4603      	mov	r3, r0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	f107 0210 	add.w	r2, r7, #16
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f8ce 	bl	8005202 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d037      	beq.n	80050dc <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x148>
 800506c:	69bc      	ldr	r4, [r7, #24]
 800506e:	69b8      	ldr	r0, [r7, #24]
 8005070:	f7ff fd78 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8005074:	4605      	mov	r5, r0
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fd73 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 800507e:	4603      	mov	r3, r0
 8005080:	1aeb      	subs	r3, r5, r3
 8005082:	4619      	mov	r1, r3
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff fd5f 	bl	8004b48 <_ZN9XFTimeout11setRelTicksEi>
                    break;
 800508a:	e027      	b.n	80050dc <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x148>
                }
                else{
                    pNewTimeout->setRelTicks(pNewTimeout->getRelTicks()-currentTimeout->getRelTicks());
 800508c:	683c      	ldr	r4, [r7, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fd67 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 8005096:	4605      	mov	r5, r0
 8005098:	69b8      	ldr	r0, [r7, #24]
 800509a:	f7ff fd63 	bl	8004b64 <_ZNK9XFTimeout11getRelTicksEv>
 800509e:	4603      	mov	r3, r0
 80050a0:	1aeb      	subs	r3, r5, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7ff fd4f 	bl	8004b48 <_ZN9XFTimeout11setRelTicksEi>
        for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 80050aa:	f107 0308 	add.w	r3, r7, #8
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f8ba 	bl	800522a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3308      	adds	r3, #8
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f891 	bl	80051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80050c0:	4603      	mov	r3, r0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	f107 0214 	add.w	r2, r7, #20
 80050c8:	f107 0308 	add.w	r3, r7, #8
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f897 	bl	8005202 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d185      	bne.n	8004fe6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x52>
 80050da:	e000      	b.n	80050de <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x14a>
                    break;
 80050dc:	bf00      	nop
            /*
            else{
                currentTimeout->setRelTicks(currentTimeout->getRelTicks()-pNewTimeout->getRelTicks());// remove the new timeout ticks in the timeouts further in list
            }*/
        }
        if(!timeoutInserted){// if we didn't inserted the timeout in the list, we push it now in the back
 80050de:	7ffb      	ldrb	r3, [r7, #31]
 80050e0:	f083 0301 	eor.w	r3, r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x174>
            this->timeouts_.push_back(pNewTimeout);// add a timeout in the list
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3308      	adds	r3, #8
 80050ee:	463a      	mov	r2, r7
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f93a 	bl	800536c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9push_backERKS2_>
 80050f8:	e006      	b.n	8005108 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x174>
        }
    }
    else{// if the list is empty
        this->timeouts_.push_front(pNewTimeout);// add a timeout in the list
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3308      	adds	r3, #8
 80050fe:	463a      	mov	r2, r7
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f944 	bl	8005390 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
    }
    this->pMutex_->unlock();
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3

}
 800511a:	bf00      	nop
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bdb0      	pop	{r4, r5, r7, pc}

08005122 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:

void XFTimeoutManager::returnTimeout(XFTimeout *pTimeout)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f8c0 	bl	80042b4 <_ZNK7XFEvent11getBehaviorEv>
 8005134:	4603      	mov	r3, r0
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	320c      	adds	r2, #12
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	4790      	blx	r2
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f92e 	bl	80053b4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fed7 	bl	8004f0e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <_ZNKSt8functionIFvmEEclEm>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800516a:	b5b0      	push	{r4, r5, r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
      {
	if (_M_empty())
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fca7 	bl	8004aca <_ZNKSt14_Function_base8_M_emptyEv>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <_ZNKSt8functionIFvmEEclEm+0x1c>
	  __throw_bad_function_call();
 8005182:	f001 fcff 	bl	8006b84 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68dc      	ldr	r4, [r3, #12]
 800518a:	687d      	ldr	r5, [r7, #4]
 800518c:	463b      	mov	r3, r7
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f936 	bl	8005400 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005194:	4603      	mov	r3, r0
 8005196:	4619      	mov	r1, r3
 8005198:	4628      	mov	r0, r5
 800519a:	47a0      	blx	r4
 800519c:	bf00      	nop
      }
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bdb0      	pop	{r4, r5, r7, pc}

080051a4 <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>:
      _List_iterator() _GLIBCXX_NOEXCEPT
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f91f 	bl	8005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f90f 	bl	8005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
	return __tmp;
 8005244:	68fb      	ldr	r3, [r7, #12]
      }
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f8e8 	bl	8005434 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005264:	4603      	mov	r3, r0
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f8b7 	bl	8005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 80052a8:	463b      	mov	r3, r7
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f8f6 	bl	800549c <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8cb 	bl	8005450 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 80052ba:	68fb      	ldr	r3, [r7, #12]
    }
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8e4 	bl	80054be <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fbc6 	bl	8004a8a <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f8e0 	bl	80054d6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f8dc 	bl	80054ec <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8005334:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8005336:	697c      	ldr	r4, [r7, #20]
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f8ad 	bl	800549c <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8005342:	4603      	mov	r3, r0
 8005344:	4619      	mov	r1, r3
 8005346:	4620      	mov	r0, r4
 8005348:	f001 fc04 	bl	8006b54 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f8ff 	bl	8005554 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 8005356:	f107 0310 	add.w	r3, r7, #16
 800535a:	6979      	ldr	r1, [r7, #20]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f85a 	bl	8005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8005362:	693b      	ldr	r3, [r7, #16]
    }
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}

0800536c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9push_backERKS2_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff33 	bl	80051e2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800537c:	4603      	mov	r3, r0
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8f7 	bl	8005576 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff10 	bl	80051c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80053a0:	4603      	mov	r3, r0
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8e5 	bl	8005576 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80053c2:	e014      	b.n	80053ee <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x3a>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80053ce:	6938      	ldr	r0, [r7, #16]
 80053d0:	f000 f830 	bl	8005434 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80053d4:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f8eb 	bl	80055b2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80053dc:	4603      	mov	r3, r0
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f8f1 	bl	80055c8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 80053e6:	6939      	ldr	r1, [r7, #16]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8fa 	bl	80055e2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d1e6      	bne.n	80053c4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x10>
    }
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3308      	adds	r3, #8
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f8dd 	bl	8005600 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 8005446:	4603      	mov	r3, r0
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f8da 	bl	8005618 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fb7b 	bl	8006b62 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f89d 	bl	80055b2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8005478:	4604      	mov	r4, r0
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff ffda 	bl	8005434 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005480:	4603      	mov	r3, r0
 8005482:	4619      	mov	r1, r3
 8005484:	4620      	mov	r0, r4
 8005486:	f000 f89f 	bl	80055c8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f8a7 	bl	80055e2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f107 030c 	add.w	r3, r7, #12
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ffb1 	bl	8005416 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8b7 	bl	800563a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f8a9 	bl	8005650 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 80054fe:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f855 	bl	80055b2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8005508:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	6939      	ldr	r1, [r7, #16]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f8aa 	bl	800566c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f7ff ff8b 	bl	8005434 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800551e:	4604      	mov	r4, r0
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f000 f8cc 	bl	80056be <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	4621      	mov	r1, r4
 800552c:	6938      	ldr	r0, [r7, #16]
 800552e:	f000 f8d1 	bl	80056d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f8de 	bl	80056fa <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 800553e:	697c      	ldr	r4, [r7, #20]
	}
 8005540:	f107 0308 	add.w	r3, r7, #8
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f8a5 	bl	8005694 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 800554a:	4623      	mov	r3, r4
	}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}

08005554 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8005576:	b580      	push	{r7, lr}
 8005578:	b086      	sub	sp, #24
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f89b 	bl	80056be <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8005588:	4603      	mov	r3, r0
 800558a:	4619      	mov	r1, r3
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff ffad 	bl	80054ec <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8005592:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fada 	bl	8006b54 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ffd5 	bl	8005554 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 80055aa:	bf00      	nop
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f89f 	bl	8005718 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f89b 	bl	800572e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f89f 	bl	800574c <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 800560e:	4603      	mov	r3, r0
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f880 	bl	8005762 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 8005662:	4603      	mov	r3, r0
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f000 f881 	bl	8005780 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]
      { }
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4619      	mov	r1, r3
 80056b0:	f000 f83d 	bl	800572e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ffec 	bl	80056be <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f852 	bl	8005796 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]
	return *this;
 800570a:	687b      	ldr	r3, [r7, #4]
      }
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f83f 	bl	80057c2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800576c:	2200      	movs	r2, #0
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f847 	bl	8005804 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 8005776:	4603      	mov	r3, r0
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005796:	b590      	push	{r4, r7, lr}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff ff8b 	bl	80056be <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80057a8:	4603      	mov	r3, r0
 80057aa:	681c      	ldr	r4, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4619      	mov	r1, r3
 80057b0:	2004      	movs	r0, #4
 80057b2:	f7ff f95e 	bl	8004a72 <_ZnwjPv>
 80057b6:	4603      	mov	r3, r0
 80057b8:	601c      	str	r4, [r3, #0]
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}

080057c2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4619      	mov	r1, r3
 80057da:	68b8      	ldr	r0, [r7, #8]
 80057dc:	f001 f996 	bl	8006b0c <_ZdlPvj>
      }
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	0aaaaaaa 	.word	0x0aaaaaaa

08005804 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ffe9 	bl	80057e8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4293      	cmp	r3, r2
 800581c:	bf8c      	ite	hi
 800581e:	2301      	movhi	r3, #1
 8005820:	2300      	movls	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a09      	ldr	r2, [pc, #36]	; (800585c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x58>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800583a:	f001 f99a 	bl	8006b72 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800583e:	f001 f995 	bl	8006b6c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f96e 	bl	8006b2e <_Znwj>
 8005852:	4603      	mov	r3, r0
      }
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	15555555 	.word	0x15555555

08005860 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
	bInISR = true;								// Tell critical section we are in an ISR
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <XF_tick+0x30>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 800586a:	f001 f943 	bl	8006af4 <_ZN2XF9isRunningEv>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <XF_tick+0x24>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8005874:	f7ff f99c 	bl	8004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005878:	4603      	mov	r3, r0
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	321c      	adds	r2, #28
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	4790      	blx	r2
	}
	bInISR = false;
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <XF_tick+0x30>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200007cc 	.word	0x200007cc

08005894 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 8005898:	f7ff f98a 	bl	8004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800589c:	4603      	mov	r3, r0
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	320c      	adds	r2, #12
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	4790      	blx	r2
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	bd80      	pop	{r7, pc}

080058ae <XF_isRunning>:

bool XF_isRunning()
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	af00      	add	r7, sp, #0
    return XF::isRunning();
 80058b2:	f001 f91f 	bl	8006af4 <_ZN2XF9isRunningEv>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ca:	d205      	bcs.n	80058d8 <_ZSt16__deque_buf_sizej+0x1c>
 80058cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	e000      	b.n	80058da <_ZSt16__deque_buf_sizej+0x1e>
 80058d8:	2301      	movs	r3, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_ZN12XFEventQueue4pendEv>:
#include "eventqueue.h"

// TODO: Implement code for XFEventQueue class

bool XFEventQueue::pend()
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;									///< Returns pointer to next event to pop.
    virtual void pop() = 0;													///< Pops the next event from the queue.
    virtual bool pend() = 0;												///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <_ZN9interface12XFEventQueueC1Ev+0x1c>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	080085cc 	.word	0x080085cc

0800591c <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	4a04      	ldr	r2, [pc, #16]	; (8005938 <_ZN9interface12XFEventQueueD1Ev+0x1c>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	080085cc 	.word	0x080085cc

0800593c <_ZN9interface12XFEventQueueD0Ev>:
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ffe9 	bl	800591c <_ZN9interface12XFEventQueueD1Ev>
 800594a:	2104      	movs	r1, #4
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f8dd 	bl	8006b0c <_ZdlPvj>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <_ZN9interface7XFMutexC1Ev+0x1c>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	080085b0 	.word	0x080085b0

0800597c <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	4a04      	ldr	r2, [pc, #16]	; (8005998 <_ZN9interface7XFMutexD1Ev+0x1c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	080085b0 	.word	0x080085b0

0800599c <_ZN9interface7XFMutexD0Ev>:
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff ffe9 	bl	800597c <_ZN9interface7XFMutexD1Ev>
 80059aa:	2104      	movs	r1, #4
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 f8ad 	bl	8006b0c <_ZdlPvj>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN7XFMutexC1Ev>:
	void unlock() override;

	bool tryLock(int32_t timeout = 0) override;

protected:
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff ffc8 	bl	800595c <_ZN9interface7XFMutexC1Ev>
 80059cc:	4a03      	ldr	r2, [pc, #12]	; (80059dc <_ZN7XFMutexC1Ev+0x20>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	080085f0 	.word	0x080085f0

080059e0 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f8bd 	bl	8005b6a <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <_ZN12XFEventQueueC1Ev>:

XFEventQueue::XFEventQueue() {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ff78 	bl	80058fc <_ZN9interface12XFEventQueueC1Ev>
 8005a0c:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <_ZN12XFEventQueueC1Ev+0x34>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ffd0 	bl	80059bc <_ZN7XFMutexC1Ev>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f88e 	bl	8005b42 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
}
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	0800858c 	.word	0x0800858c

08005a34 <_ZN12XFEventQueueD1Ev>:

XFEventQueue::~XFEventQueue() {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <_ZN12XFEventQueueD1Ev+0x34>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3308      	adds	r3, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffca 	bl	80059e0 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 ffc3 	bl	80069dc <_ZN7XFMutexD1Ev>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff5f 	bl	800591c <_ZN9interface12XFEventQueueD1Ev>
}
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	0800858c 	.word	0x0800858c

08005a6c <_ZN12XFEventQueueD0Ev>:
XFEventQueue::~XFEventQueue() {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
}
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ffdd 	bl	8005a34 <_ZN12XFEventQueueD1Ev>
 8005a7a:	2130      	movs	r1, #48	; 0x30
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f845 	bl	8006b0c <_ZdlPvj>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <_ZNK12XFEventQueue5emptyEv>:

bool XFEventQueue::empty() const {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	return this->queue_.empty();
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3308      	adds	r3, #8
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f88b 	bl	8005bb4 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 8005a9e:	4603      	mov	r3, r0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <_ZN12XFEventQueue4pushEPK7XFEventb>:

bool XFEventQueue::push(const XFEvent *pEvent, bool fromISR) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
	if(fromISR){
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <_ZN12XFEventQueue4pushEPK7XFEventb+0x1e>
		this->mutex_.lock();
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 ffba 	bl	8006a3a <_ZN7XFMutex4lockEv>
	}
	this->queue_.push(pEvent);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	f107 0208 	add.w	r2, r7, #8
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f87c 	bl	8005bce <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
	if(fromISR){
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <_ZN12XFEventQueue4pushEPK7XFEventb+0x3e>
		this->mutex_.unlock();
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 ffb4 	bl	8006a4e <_ZN7XFMutex6unlockEv>
	}
	return true;
 8005ae6:	2301      	movs	r3, #1
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <_ZN12XFEventQueue5frontEv>:

const XFEvent* XFEventQueue::front() {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	return this->queue_.front();
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3308      	adds	r3, #8
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f874 	bl	8005bea <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 8005b02:	4603      	mov	r3, r0
 8005b04:	681b      	ldr	r3, [r3, #0]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZN12XFEventQueue3popEv>:

void XFEventQueue::pop() {
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
	this->queue_.pop();
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f872 	bl	8005c04 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f87e 	bl	8005c34 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
	: c() { }
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	2328      	movs	r3, #40	; 0x28
 8005b50:	461a      	mov	r2, r3
 8005b52:	2100      	movs	r1, #0
 8005b54:	f001 fbdc 	bl	8007310 <memset>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ffe4 	bl	8005b28 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b08a      	sub	sp, #40	; 0x28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f88e 	bl	8005c9a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8005b7e:	f107 0318 	add.w	r3, r7, #24
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f897 	bl	8005cb8 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f8a2 	bl	8005cd6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f107 0218 	add.w	r2, r7, #24
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f8c1 	bl	8005d24 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 f856 	bl	8005c56 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f8bd 	bl	8005d3e <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f8c0 	bl	8005d62 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
	return c.front();
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f8d5 	bl	8005da4 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 8005bfa:	4603      	mov	r3, r0
      }
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f8dc 	bl	8005dcc <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f904 	bl	8005e32 <_ZNSaIPK7XFEventED1Ev>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f8e7 	bl	8005e12 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8005c44:	2100      	movs	r1, #0
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8ff 	bl	8005e4a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8005c6e:	3304      	adds	r3, #4
 8005c70:	461a      	mov	r2, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f94c 	bl	8005f10 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	461a      	mov	r2, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f95f 	bl	8005f46 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff ffc6 	bl	8005c1c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f81e 	bl	8005cec <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f80f 	bl	8005cec <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8005d24:	b480      	push	{r7}
 8005d26:	b08d      	sub	sp, #52	; 0x34
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8005d32:	bf00      	nop
 8005d34:	3734      	adds	r7, #52	; 0x34
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f103 0218 	add.w	r2, r3, #24
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f000 f912 	bl	8005f7c <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d00c      	beq.n	8005d94 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	f000 f90e 	bl	8005fa4 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
      }
 8005d92:	e003      	b.n	8005d9c <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3a>
	  _M_push_back_aux(__x);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f918 	bl	8005fcc <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	return *begin();
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff ff71 	bl	8005c9a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f949 	bl	8006054 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 8005dc2:	4603      	mov	r3, r0
      }
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d010      	beq.n	8005e04 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff76 	bl	8005cd6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8005dea:	4602      	mov	r2, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 f93a 	bl	800606c <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	609a      	str	r2, [r3, #8]
      }
 8005e02:	e002      	b.n	8005e0a <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f93e 	bl	8006086 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f95b 	bl	80060d6 <_ZNSaIPK7XFEventEC1Ev>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f963 	bl	80060ee <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>
	{ }
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f970 	bl	8006120 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005e4a:	b590      	push	{r4, r7, lr}
 8005e4c:	b089      	sub	sp, #36	; 0x24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8005e54:	2004      	movs	r0, #4
 8005e56:	f7ff fd31 	bl	80058bc <_ZSt16__deque_buf_sizej>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e62:	3301      	adds	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005e66:	2308      	movs	r3, #8
 8005e68:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005e70:	f107 0210 	add.w	r2, r7, #16
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f95b 	bl	8006136 <_ZSt3maxIjERKT_S2_S2_>
 8005e80:	4603      	mov	r3, r0
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f965 	bl	800615e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 8005e94:	4602      	mov	r2, r0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1acb      	subs	r3, r1, r3
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005eaa:	4413      	add	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f96b 	bl	8006198 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	69b9      	ldr	r1, [r7, #24]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f980 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f103 0218 	add.w	r2, r3, #24
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 f977 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005eec:	2004      	movs	r0, #4
 8005eee:	f7ff fce5 	bl	80058bc <_ZSt16__deque_buf_sizej>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005efa:	fb01 f202 	mul.w	r2, r1, r2
 8005efe:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	619a      	str	r2, [r3, #24]
    }
 8005f08:	bf00      	nop
 8005f0a:	3724      	adds	r7, #36	; 0x24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e008      	b.n	8005f34 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x24>
	_M_deallocate_node(*__n);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f969 	bl	8006200 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3304      	adds	r3, #4
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3f2      	bcc.n	8005f22 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x12>
    }
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f964 	bl	8006226 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8005f5e:	f107 0314 	add.w	r3, r7, #20
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f97a 	bl	8006260 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
      }
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f969 	bl	8006248 <_ZNSaIPPK7XFEventED1Ev>
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f964 	bl	800627e <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f969 	bl	8006294 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8005fcc:	b5b0      	push	{r4, r5, r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f972 	bl	80062c0 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f980 	bl	80062e4 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8005ff4:	4816      	ldr	r0, [pc, #88]	; (8006050 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x84>)
 8005ff6:	f000 fdc2 	bl	8006b7e <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f982 	bl	8006306 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	1d1c      	adds	r4, r3, #4
 800600a:	4610      	mov	r0, r2
 800600c:	f000 f996 	bl	800633c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 8006010:	4603      	mov	r3, r0
 8006012:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8006014:	687c      	ldr	r4, [r7, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699d      	ldr	r5, [r3, #24]
 800601a:	6838      	ldr	r0, [r7, #0]
 800601c:	f000 f92f 	bl	800627e <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	4629      	mov	r1, r5
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff ffbc 	bl	8005fa4 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0218 	add.w	r2, r3, #24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 f8c7 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bdb0      	pop	{r4, r5, r7, pc}
 8006050:	080083c0 	.word	0x080083c0

08006054 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f971 	bl	8006360 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
	}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fe20 	bl	8005cd6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7ff ffe4 	bl	800606c <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f000 f8a7 	bl	8006200 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f103 0208 	add.w	r2, r3, #8
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f000 f884 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]
    }
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <_ZNSaIPK7XFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f949 	bl	8006376 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3308      	adds	r3, #8
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f940 	bl	800638c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3318      	adds	r3, #24
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f93b 	bl	800638c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d201      	bcs.n	8006150 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	e000      	b.n	8006152 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006150:	687b      	ldr	r3, [r7, #4]
    }
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800615e:	b590      	push	{r4, r7, lr}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006168:	f107 030c 	add.w	r3, r7, #12
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f859 	bl	8006226 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f91d 	bl	80063ba <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 8006180:	4604      	mov	r4, r0
 8006182:	bf00      	nop
      }
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	4618      	mov	r0, r3
 800618a:	f000 f85d 	bl	8006248 <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800618e:	4623      	mov	r3, r4
      }
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bd90      	pop	{r4, r7, pc}

08006198 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e008      	b.n	80061bc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x24>
	    *__cur = this->_M_allocate_node();
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f8c6 	bl	800633c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 80061b0:	4602      	mov	r2, r0
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	3304      	adds	r3, #4
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3f2      	bcc.n	80061aa <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x12>
    }
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80061ce:	b590      	push	{r4, r7, lr}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685c      	ldr	r4, [r3, #4]
 80061ea:	f000 f8f5 	bl	80063d8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 80061ee:	4603      	mov	r3, r0
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	18e2      	adds	r2, r4, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	609a      	str	r2, [r3, #8]
      }
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd90      	pop	{r4, r7, pc}

08006200 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800620a:	687c      	ldr	r4, [r7, #4]
 800620c:	2004      	movs	r0, #4
 800620e:	f7ff fb55 	bl	80058bc <_ZSt16__deque_buf_sizej>
 8006212:	4603      	mov	r3, r0
 8006214:	461a      	mov	r2, r3
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f8e5 	bl	80063e8 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}

08006226 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006230:	6838      	ldr	r0, [r7, #0]
 8006232:	f000 f8e8 	bl	8006406 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8006236:	4603      	mov	r3, r0
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f8ee 	bl	800641c <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZNSaIPPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8f0 	bl	8006436 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f8eb 	bl	800644c <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ffec 	bl	800627e <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 80062a6:	4603      	mov	r3, r0
 80062a8:	681c      	ldr	r4, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4619      	mov	r1, r3
 80062ae:	2004      	movs	r0, #4
 80062b0:	f7fe fbdf 	bl	8004a72 <_ZnwjPv>
 80062b4:	4603      	mov	r3, r0
 80062b6:	601c      	str	r4, [r3, #0]
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd90      	pop	{r4, r7, pc}

080062c0 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f103 0218 	add.w	r2, r3, #24
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3308      	adds	r3, #8
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f000 f8c9 	bl	800646c <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 80062da:	4603      	mov	r3, r0
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 f889 	bl	8006406 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f8e4 	bl	80064c4 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>
 80062fc:	4603      	mov	r3, r0
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	6809      	ldr	r1, [r1, #0]
 8006320:	1a41      	subs	r1, r0, r1
 8006322:	1089      	asrs	r1, r1, #2
 8006324:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8006326:	429a      	cmp	r2, r3
 8006328:	d904      	bls.n	8006334 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800632a:	2200      	movs	r2, #0
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8e2 	bl	80064f8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8006344:	687c      	ldr	r4, [r7, #4]
 8006346:	2004      	movs	r0, #4
 8006348:	f7ff fab8 	bl	80058bc <_ZSt16__deque_buf_sizej>
 800634c:	4603      	mov	r3, r0
 800634e:	4619      	mov	r1, r3
 8006350:	4620      	mov	r0, r4
 8006352:	f000 f96b 	bl	800662c <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 8006356:	4603      	mov	r3, r0
      }
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}

08006360 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	605a      	str	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	609a      	str	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80063c4:	2200      	movs	r2, #0
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f94a 	bl	8006662 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80063dc:	2004      	movs	r0, #4
 80063de:	f7ff fa6d 	bl	80058bc <_ZSt16__deque_buf_sizej>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f95b 	bl	80066b4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f954 	bl	80066d4 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4619      	mov	r1, r3
 800645e:	68b8      	ldr	r0, [r7, #8]
 8006460:	f000 fb54 	bl	8006b0c <_ZdlPvj>
      }
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8006476:	f7ff ffaf 	bl	80063d8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 800647a:	4603      	mov	r3, r0
 800647c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	109b      	asrs	r3, r3, #2
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6811      	ldr	r1, [r2, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6852      	ldr	r2, [r2, #4]
 80064a8:	1a8a      	subs	r2, r1, r2
 80064aa:	1092      	asrs	r2, r2, #2
 80064ac:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	6891      	ldr	r1, [r2, #8]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	1a8a      	subs	r2, r1, r2
 80064b8:	1092      	asrs	r2, r2, #2
 80064ba:	4413      	add	r3, r2
      }
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80064cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80064d0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f909 	bl	80066ea <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>
 80064d8:	4603      	mov	r3, r0
 80064da:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80064dc:	f107 0208 	add.w	r2, r7, #8
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f90b 	bl	8006702 <_ZSt3minIjERKT_S2_S2_>
 80064ec:	4603      	mov	r3, r0
 80064ee:	681b      	ldr	r3, [r3, #0]
      }
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b08b      	sub	sp, #44	; 0x2c
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	109b      	asrs	r3, r3, #2
 8006512:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006514:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	429a      	cmp	r2, r3
 8006528:	d92d      	bls.n	8006586 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	1acb      	subs	r3, r1, r3
 8006536:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006538:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x4e>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	e000      	b.n	8006548 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
 8006546:	2300      	movs	r3, #0
 8006548:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800654a:	4413      	add	r3, r2
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	429a      	cmp	r2, r3
 8006556:	d209      	bcs.n	800656c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006560:	3304      	adds	r3, #4
 8006562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006564:	4619      	mov	r1, r3
 8006566:	f000 f8e0 	bl	800672a <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 800656a:	e048      	b.n	80065fe <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006574:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	4413      	add	r3, r2
 800657e:	461a      	mov	r2, r3
 8006580:	f000 f8eb 	bl	800675a <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 8006584:	e03b      	b.n	80065fe <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3304      	adds	r3, #4
 800658e:	f107 0208 	add.w	r2, r7, #8
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff fdce 	bl	8006136 <_ZSt3maxIjERKT_S2_S2_>
 800659a:	4603      	mov	r3, r0
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80065a0:	3302      	adds	r3, #2
 80065a2:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff fdd8 	bl	800615e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 80065ae:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xce>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	e000      	b.n	80065c8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd0>
 80065c6:	2300      	movs	r3, #0
 80065c8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80065d8:	3304      	adds	r3, #4
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	4619      	mov	r1, r3
 80065de:	f000 f8a4 	bl	800672a <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	461a      	mov	r2, r3
 80065ee:	f7ff fcaa 	bl	8005f46 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3308      	adds	r3, #8
 8006602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fde2 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f103 0018 	add.w	r0, r3, #24
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006616:	3b01      	subs	r3, #1
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	4413      	add	r3, r2
 800661e:	4619      	mov	r1, r3
 8006620:	f7ff fdd5 	bl	80061ce <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 8006624:	bf00      	nop
 8006626:	372c      	adds	r7, #44	; 0x2c
 8006628:	46bd      	mov	sp, r7
 800662a:	bd90      	pop	{r4, r7, pc}

0800662c <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006636:	2200      	movs	r2, #0
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8b1 	bl	80067a2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 8006640:	4603      	mov	r3, r0
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006652:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff ffeb 	bl	800664a <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>
 8006674:	4602      	mov	r2, r0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4293      	cmp	r3, r2
 800667a:	bf8c      	ite	hi
 800667c:	2301      	movhi	r3, #1
 800667e:	2300      	movls	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006696:	d301      	bcc.n	800669c <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006698:	f000 fa6b 	bl	8006b72 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800669c:	f000 fa66 	bl	8006b6c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fa42 	bl	8006b2e <_Znwj>
 80066aa:	4603      	mov	r3, r0
      }
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4619      	mov	r1, r3
 80066c6:	68b8      	ldr	r0, [r7, #8]
 80066c8:	f000 fa20 	bl	8006b0c <_ZdlPvj>
      }
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f87e 	bl	80067f4 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 80066f8:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d201      	bcs.n	800671c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	e000      	b.n	800671e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800671c:	687b      	ldr	r3, [r7, #4]
    }
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800672a:	b590      	push	{r4, r7, lr}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f868 	bl	800680c <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800673c:	4604      	mov	r4, r0
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f000 f864 	bl	800680c <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8006744:	4603      	mov	r3, r0
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4619      	mov	r1, r3
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f869 	bl	8006822 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8006750:	4603      	mov	r3, r0
    }
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f850 	bl	800680c <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800676c:	4604      	mov	r4, r0
 800676e:	68b8      	ldr	r0, [r7, #8]
 8006770:	f000 f84c 	bl	800680c <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8006774:	4603      	mov	r3, r0
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4619      	mov	r1, r3
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f874 	bl	8006868 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8006780:	4603      	mov	r3, r0
    }
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}

0800678a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006792:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff ffeb 	bl	800678a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf8c      	ite	hi
 80067bc:	2301      	movhi	r3, #1
 80067be:	2300      	movls	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d301      	bcc.n	80067dc <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80067d8:	f000 f9cb 	bl	8006b72 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80067dc:	f000 f9c6 	bl	8006b6c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 f9a2 	bl	8006b2e <_Znwj>
 80067ea:	4603      	mov	r3, r0
      }
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff ffc4 	bl	800678a <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 8006802:	4603      	mov	r3, r0
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006822:	b5b0      	push	{r4, r5, r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f83d 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8006834:	4604      	mov	r4, r0
 8006836:	68b8      	ldr	r0, [r7, #8]
 8006838:	f000 f839 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800683c:	4605      	mov	r5, r0
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f834 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	4629      	mov	r1, r5
 800684c:	4620      	mov	r0, r4
 800684e:	f000 f839 	bl	80068c4 <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8006852:	4602      	mov	r2, r0
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f000 f843 	bl	80068e4 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 800685e:	4603      	mov	r3, r0
    }
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bdb0      	pop	{r4, r5, r7, pc}

08006868 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8006868:	b5b0      	push	{r4, r5, r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f81a 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800687a:	4604      	mov	r4, r0
 800687c:	68b8      	ldr	r0, [r7, #8]
 800687e:	f000 f816 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8006882:	4605      	mov	r5, r0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f811 	bl	80068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	4629      	mov	r1, r5
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f832 	bl	80068fc <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8006898:	4602      	mov	r2, r0
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f820 	bl	80068e4 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 80068a4:	4603      	mov	r3, r0
    }
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}

080068ae <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f821 	bl	800691c <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80068da:	4603      	mov	r3, r0
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
    { return __res; }
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f815 	bl	800693c <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8006912:	4603      	mov	r3, r0
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f815 	bl	800695c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 8006932:	4603      	mov	r3, r0
    }
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f822 	bl	8006996 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 8006952:	4603      	mov	r3, r0
    }
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	109b      	asrs	r3, r3, #2
 8006970:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	461a      	mov	r2, r3
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fcab 	bl	80072dc <memmove>
	  return __result + _Num;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
	}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	109b      	asrs	r3, r3, #2
 80069aa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	425b      	negs	r3, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	18d0      	adds	r0, r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	461a      	mov	r2, r3
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	f000 fc8a 	bl	80072dc <memmove>
	  return __result - _Num;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	425b      	negs	r3, r3
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4413      	add	r3, r2
	}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <_ZN7XFMutexD1Ev>:
class XFMutex : public interface::XFMutex
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	4a05      	ldr	r2, [pc, #20]	; (80069fc <_ZN7XFMutexD1Ev+0x20>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe ffc5 	bl	800597c <_ZN9interface7XFMutexD1Ev>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	080085f0 	.word	0x080085f0

08006a00 <_ZN7XFMutexD0Ev>:
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ffe7 	bl	80069dc <_ZN7XFMutexD1Ev>
 8006a0e:	2104      	movs	r1, #4
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f87b 	bl	8006b0c <_ZdlPvj>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 8006a20:	b598      	push	{r3, r4, r7, lr}
 8006a22:	af00      	add	r7, sp, #0
    return new ::XFMutex;
 8006a24:	2004      	movs	r0, #4
 8006a26:	f000 f882 	bl	8006b2e <_Znwj>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	461c      	mov	r4, r3
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7fe ffc4 	bl	80059bc <_ZN7XFMutexC1Ev>
 8006a34:	4623      	mov	r3, r4
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	bd98      	pop	{r3, r4, r7, pc}

08006a3a <_ZN7XFMutex4lockEv>:
// TODO: Implement code for XFMutex class
void XFMutex::lock() {
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
	enterCritical();
 8006a42:	f7fd fb21 	bl	8004088 <_Z13enterCriticalv>
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <_ZN7XFMutex6unlockEv>:

void XFMutex::unlock() {
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
	exitCritical();
 8006a56:	f7fd fb37 	bl	80040c8 <_Z12exitCriticalv>
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <_ZN7XFMutex7tryLockEl>:

bool XFMutex::tryLock(int32_t timeout) {
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
	return true;
 8006a6c:	2301      	movs	r3, #1
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <XF_initialize>:
// TODO: Implement code for XF class
bool XF::isRunning_=false;
bool XF::isInitialized_=false;

void XF_initialize(int timeInterval)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
    XF::initialize(timeInterval);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f80a 	bl	8006aa0 <_ZN2XF10initializeEiiPPc>
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <XF_execOnce>:
{
    XF::exec();
}

void XF_execOnce()
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
    XF::execOnce();
 8006a98:	f000 f81a 	bl	8006ad0 <_ZN2XF8execOnceEv>
}
 8006a9c:	bf00      	nop
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZN2XF10initializeEiiPPc>:

void XF::initialize(int timeInterval, int argc, char *argv[]) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	XF::isInitialized_=true;
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <_ZN2XF10initializeEiiPPc+0x2c>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	701a      	strb	r2, [r3, #0]
	interface::XFTimeoutManager::getInstance()->initialize(timeInterval);
 8006ab2:	f7fe f87d 	bl	8004bb0 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	3208      	adds	r2, #8
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	4790      	blx	r2
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000839 	.word	0x20000839

08006ad0 <_ZN2XF8execOnceEv>:
int XF::exec() {
	XF::isRunning_ =true;
	return interface::XFDispatcher::getInstance()->execute();
}

int XF::execOnce() {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
	XF::isRunning_ =true;
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <_ZN2XF8execOnceEv+0x20>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	701a      	strb	r2, [r3, #0]
	interface::XFDispatcher::getInstance()->executeOnce();
 8006ada:	f7fd fea1 	bl	8004820 <_ZN9interface12XFDispatcher11getInstanceEv>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	3218      	adds	r2, #24
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	4790      	blx	r2
	return 0;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000838 	.word	0x20000838

08006af4 <_ZN2XF9isRunningEv>:

bool XF::isRunning() {
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
	return XF::isRunning_;
 8006af8:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <_ZN2XF9isRunningEv+0x14>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000838 	.word	0x20000838

08006b0c <_ZdlPvj>:
 8006b0c:	f000 b9bb 	b.w	8006e86 <_ZdlPv>

08006b10 <__cxa_guard_acquire>:
 8006b10:	6803      	ldr	r3, [r0, #0]
 8006b12:	07db      	lsls	r3, r3, #31
 8006b14:	d406      	bmi.n	8006b24 <__cxa_guard_acquire+0x14>
 8006b16:	7843      	ldrb	r3, [r0, #1]
 8006b18:	b103      	cbz	r3, 8006b1c <__cxa_guard_acquire+0xc>
 8006b1a:	deff      	udf	#255	; 0xff
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	7043      	strb	r3, [r0, #1]
 8006b20:	4618      	mov	r0, r3
 8006b22:	4770      	bx	lr
 8006b24:	2000      	movs	r0, #0
 8006b26:	4770      	bx	lr

08006b28 <__cxa_guard_release>:
 8006b28:	2301      	movs	r3, #1
 8006b2a:	6003      	str	r3, [r0, #0]
 8006b2c:	4770      	bx	lr

08006b2e <_Znwj>:
 8006b2e:	2801      	cmp	r0, #1
 8006b30:	bf38      	it	cc
 8006b32:	2001      	movcc	r0, #1
 8006b34:	b510      	push	{r4, lr}
 8006b36:	4604      	mov	r4, r0
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 f9db 	bl	8006ef4 <malloc>
 8006b3e:	b100      	cbz	r0, 8006b42 <_Znwj+0x14>
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	f000 f9a3 	bl	8006e8c <_ZSt15get_new_handlerv>
 8006b46:	b908      	cbnz	r0, 8006b4c <_Znwj+0x1e>
 8006b48:	f000 f9a8 	bl	8006e9c <abort>
 8006b4c:	4780      	blx	r0
 8006b4e:	e7f3      	b.n	8006b38 <_Znwj+0xa>

08006b50 <_ZNSaIcEC1Ev>:
 8006b50:	4770      	bx	lr

08006b52 <_ZNSaIcED1Ev>:
 8006b52:	4770      	bx	lr

08006b54 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8006b54:	684b      	ldr	r3, [r1, #4]
 8006b56:	6043      	str	r3, [r0, #4]
 8006b58:	684b      	ldr	r3, [r1, #4]
 8006b5a:	6001      	str	r1, [r0, #0]
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	6048      	str	r0, [r1, #4]
 8006b60:	4770      	bx	lr

08006b62 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8006b62:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	4770      	bx	lr

08006b6c <_ZSt17__throw_bad_allocv>:
 8006b6c:	b508      	push	{r3, lr}
 8006b6e:	f000 f995 	bl	8006e9c <abort>

08006b72 <_ZSt28__throw_bad_array_new_lengthv>:
 8006b72:	b508      	push	{r3, lr}
 8006b74:	f000 f992 	bl	8006e9c <abort>

08006b78 <_ZSt19__throw_logic_errorPKc>:
 8006b78:	b508      	push	{r3, lr}
 8006b7a:	f000 f98f 	bl	8006e9c <abort>

08006b7e <_ZSt20__throw_length_errorPKc>:
 8006b7e:	b508      	push	{r3, lr}
 8006b80:	f000 f98c 	bl	8006e9c <abort>

08006b84 <_ZSt25__throw_bad_function_callv>:
 8006b84:	b508      	push	{r3, lr}
 8006b86:	f000 f989 	bl	8006e9c <abort>

08006b8a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006b8a:	b10a      	cbz	r2, 8006b90 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006b8c:	f000 bc8f 	b.w	80074ae <memcpy>
 8006b90:	4770      	bx	lr
	...

08006b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006b94:	b508      	push	{r3, lr}
 8006b96:	680b      	ldr	r3, [r1, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9c:	d302      	bcc.n	8006ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006b9e:	480d      	ldr	r0, [pc, #52]	; (8006bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006ba0:	f7ff ffed 	bl	8006b7e <_ZSt20__throw_length_errorPKc>
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d90b      	bls.n	8006bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006ba8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006bac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006bb0:	d206      	bcs.n	8006bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006bb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006bb6:	bf2a      	itet	cs
 8006bb8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8006bbc:	6008      	strcc	r0, [r1, #0]
 8006bbe:	600b      	strcs	r3, [r1, #0]
 8006bc0:	6808      	ldr	r0, [r1, #0]
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d501      	bpl.n	8006bca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006bc6:	f7ff ffd1 	bl	8006b6c <_ZSt17__throw_bad_allocv>
 8006bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bce:	f7ff bfae 	b.w	8006b2e <_Znwj>
 8006bd2:	bf00      	nop
 8006bd4:	08008604 	.word	0x08008604

08006bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006bd8:	f850 3b08 	ldr.w	r3, [r0], #8
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d002      	beq.n	8006be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 b950 	b.w	8006e86 <_ZdlPv>
 8006be6:	4770      	bx	lr

08006be8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006be8:	6840      	ldr	r0, [r0, #4]
 8006bea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006bee:	3901      	subs	r1, #1
 8006bf0:	1a09      	subs	r1, r1, r0
 8006bf2:	4291      	cmp	r1, r2
 8006bf4:	b508      	push	{r3, lr}
 8006bf6:	d202      	bcs.n	8006bfe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff ffc0 	bl	8006b7e <_ZSt20__throw_length_errorPKc>
 8006bfe:	bd08      	pop	{r3, pc}

08006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006c00:	2a01      	cmp	r2, #1
 8006c02:	b410      	push	{r4}
 8006c04:	d104      	bne.n	8006c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006c06:	780a      	ldrb	r2, [r1, #0]
 8006c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0c:	7002      	strb	r2, [r0, #0]
 8006c0e:	4770      	bx	lr
 8006c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c14:	f7ff bfb9 	b.w	8006b8a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8006c18:	b508      	push	{r3, lr}
 8006c1a:	1a52      	subs	r2, r2, r1
 8006c1c:	f7ff fff0 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006c20:	bd08      	pop	{r3, pc}

08006c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006c22:	b508      	push	{r3, lr}
 8006c24:	1a52      	subs	r2, r2, r1
 8006c26:	f7ff ffeb 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006c2a:	bd08      	pop	{r3, pc}

08006c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006c2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c32:	461f      	mov	r7, r3
 8006c34:	6843      	ldr	r3, [r0, #4]
 8006c36:	eb01 0802 	add.w	r8, r1, r2
 8006c3a:	1ab2      	subs	r2, r6, r2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	eba3 0908 	sub.w	r9, r3, r8
 8006c42:	4603      	mov	r3, r0
 8006c44:	9201      	str	r2, [sp, #4]
 8006c46:	f853 2b08 	ldr.w	r2, [r3], #8
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bf18      	it	ne
 8006c4e:	6882      	ldrne	r2, [r0, #8]
 8006c50:	460d      	mov	r5, r1
 8006c52:	bf08      	it	eq
 8006c54:	220f      	moveq	r2, #15
 8006c56:	a901      	add	r1, sp, #4
 8006c58:	4604      	mov	r4, r0
 8006c5a:	f7ff ff9b 	bl	8006b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006c5e:	4682      	mov	sl, r0
 8006c60:	b11d      	cbz	r5, 8006c6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8006c62:	6821      	ldr	r1, [r4, #0]
 8006c64:	462a      	mov	r2, r5
 8006c66:	f7ff ffcb 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006c6a:	b137      	cbz	r7, 8006c7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8006c6c:	b12e      	cbz	r6, 8006c7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	eb0a 0005 	add.w	r0, sl, r5
 8006c76:	f7ff ffc3 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	d007      	beq.n	8006c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	4435      	add	r5, r6
 8006c84:	464a      	mov	r2, r9
 8006c86:	4441      	add	r1, r8
 8006c88:	eb0a 0005 	add.w	r0, sl, r5
 8006c8c:	f7ff ffb8 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff ffa1 	bl	8006bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	f8c4 a000 	str.w	sl, [r4]
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	b002      	add	sp, #8
 8006ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460e      	mov	r6, r1
 8006caa:	3008      	adds	r0, #8
 8006cac:	6020      	str	r0, [r4, #0]
 8006cae:	f856 3b08 	ldr.w	r3, [r6], #8
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	460d      	mov	r5, r1
 8006cb6:	d10b      	bne.n	8006cd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8006cb8:	2210      	movs	r2, #16
 8006cba:	4631      	mov	r1, r6
 8006cbc:	f7ff ff65 	bl	8006b8a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8006cc0:	686b      	ldr	r3, [r5, #4]
 8006cc2:	6063      	str	r3, [r4, #4]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	602e      	str	r6, [r5, #0]
 8006cc8:	606b      	str	r3, [r5, #4]
 8006cca:	722b      	strb	r3, [r5, #8]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	688b      	ldr	r3, [r1, #8]
 8006cd4:	60a3      	str	r3, [r4, #8]
 8006cd6:	e7f3      	b.n	8006cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08006cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	4604      	mov	r4, r0
 8006cdc:	f7ff ff7c 	bl	8006bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	bd10      	pop	{r4, pc}

08006ce4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8006ce4:	6840      	ldr	r0, [r0, #4]
 8006ce6:	4770      	bx	lr

08006ce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8006ce8:	6800      	ldr	r0, [r0, #0]
 8006cea:	4408      	add	r0, r1
 8006cec:	4770      	bx	lr

08006cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8006cee:	4603      	mov	r3, r0
 8006cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf2:	f853 2b08 	ldr.w	r2, [r3], #8
 8006cf6:	6846      	ldr	r6, [r0, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	bf18      	it	ne
 8006cfc:	6883      	ldrne	r3, [r0, #8]
 8006cfe:	f106 0501 	add.w	r5, r6, #1
 8006d02:	bf08      	it	eq
 8006d04:	230f      	moveq	r3, #15
 8006d06:	429d      	cmp	r5, r3
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	d906      	bls.n	8006d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	2300      	movs	r3, #0
 8006d14:	461a      	mov	r2, r3
 8006d16:	4631      	mov	r1, r6
 8006d18:	f7ff ff88 	bl	8006c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	559f      	strb	r7, [r3, r6]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	6065      	str	r5, [r4, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	555a      	strb	r2, [r3, r5]
 8006d28:	b003      	add	sp, #12
 8006d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	f7ff ffdd 	bl	8006cee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8006d34:	4620      	mov	r0, r4
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8006d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	6840      	ldr	r0, [r0, #4]
 8006d40:	f853 6b08 	ldr.w	r6, [r3], #8
 8006d44:	429e      	cmp	r6, r3
 8006d46:	bf18      	it	ne
 8006d48:	68a3      	ldrne	r3, [r4, #8]
 8006d4a:	eb00 0502 	add.w	r5, r0, r2
 8006d4e:	bf08      	it	eq
 8006d50:	230f      	moveq	r3, #15
 8006d52:	429d      	cmp	r5, r3
 8006d54:	d80a      	bhi.n	8006d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8006d56:	b112      	cbz	r2, 8006d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8006d58:	4430      	add	r0, r6
 8006d5a:	f7ff ff51 	bl	8006c00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	6065      	str	r5, [r4, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	4620      	mov	r0, r4
 8006d66:	555a      	strb	r2, [r3, r5]
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	9200      	str	r2, [sp, #0]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	2200      	movs	r2, #0
 8006d72:	4601      	mov	r1, r0
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff ff59 	bl	8006c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006d7a:	e7f0      	b.n	8006d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08006d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8006d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	460d      	mov	r5, r1
 8006d84:	f7f9 fa94 	bl	80002b0 <strlen>
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8006d8a:	9001      	str	r0, [sp, #4]
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff ff29 	bl	8006be8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8006d96:	9a01      	ldr	r2, [sp, #4]
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff ffcc 	bl	8006d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8006da0:	b003      	add	sp, #12
 8006da2:	bd30      	pop	{r4, r5, pc}
 8006da4:	0800861c 	.word	0x0800861c

08006da8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8006da8:	6800      	ldr	r0, [r0, #0]
 8006daa:	4770      	bx	lr

08006dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8006dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	4616      	mov	r6, r2
 8006db2:	460d      	mov	r5, r1
 8006db4:	b919      	cbnz	r1, 8006dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006db6:	b112      	cbz	r2, 8006dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8006db8:	480d      	ldr	r0, [pc, #52]	; (8006df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8006dba:	f7ff fedd 	bl	8006b78 <_ZSt19__throw_logic_errorPKc>
 8006dbe:	1b73      	subs	r3, r6, r5
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	d907      	bls.n	8006dd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	a901      	add	r1, sp, #4
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fee2 	bl	8006b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006dd0:	9b01      	ldr	r3, [sp, #4]
 8006dd2:	6020      	str	r0, [r4, #0]
 8006dd4:	60a3      	str	r3, [r4, #8]
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4629      	mov	r1, r5
 8006dda:	6820      	ldr	r0, [r4, #0]
 8006ddc:	f7ff ff1c 	bl	8006c18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	2100      	movs	r1, #0
 8006de8:	54d1      	strb	r1, [r2, r3]
 8006dea:	b002      	add	sp, #8
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	bf00      	nop
 8006df0:	08008631 	.word	0x08008631

08006df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	f100 0308 	add.w	r3, r0, #8
 8006dfa:	6003      	str	r3, [r0, #0]
 8006dfc:	e9d1 5200 	ldrd	r5, r2, [r1]
 8006e00:	4604      	mov	r4, r0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	442a      	add	r2, r5
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7ff ffcf 	bl	8006dac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8006e0e:	4620      	mov	r0, r4
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e16:	4604      	mov	r4, r0
 8006e18:	4616      	mov	r6, r2
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	b919      	cbnz	r1, 8006e26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006e1e:	b112      	cbz	r2, 8006e26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006e20:	480d      	ldr	r0, [pc, #52]	; (8006e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006e22:	f7ff fea9 	bl	8006b78 <_ZSt19__throw_logic_errorPKc>
 8006e26:	1b73      	subs	r3, r6, r5
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	d907      	bls.n	8006e3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	a901      	add	r1, sp, #4
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff feae 	bl	8006b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	6020      	str	r0, [r4, #0]
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	4632      	mov	r2, r6
 8006e40:	4629      	mov	r1, r5
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	f7ff feed 	bl	8006c22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	2100      	movs	r1, #0
 8006e50:	54d1      	strb	r1, [r2, r3]
 8006e52:	b002      	add	sp, #8
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	bf00      	nop
 8006e58:	08008631 	.word	0x08008631

08006e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	f100 0308 	add.w	r3, r0, #8
 8006e62:	4604      	mov	r4, r0
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	460d      	mov	r5, r1
 8006e68:	b159      	cbz	r1, 8006e82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	f7f9 fa20 	bl	80002b0 <strlen>
 8006e70:	182a      	adds	r2, r5, r0
 8006e72:	4620      	mov	r0, r4
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7ff ffcb 	bl	8006e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	2201      	movs	r2, #1
 8006e84:	e7f5      	b.n	8006e72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006e86 <_ZdlPv>:
 8006e86:	f000 b83d 	b.w	8006f04 <free>
	...

08006e8c <_ZSt15get_new_handlerv>:
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <_ZSt15get_new_handlerv+0xc>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	f3bf 8f5b 	dmb	ish
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	2000083c 	.word	0x2000083c

08006e9c <abort>:
 8006e9c:	b508      	push	{r3, lr}
 8006e9e:	2006      	movs	r0, #6
 8006ea0:	f000 fa66 	bl	8007370 <raise>
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7f9 fe55 	bl	8000b54 <_exit>
	...

08006eac <__assert_func>:
 8006eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eae:	4614      	mov	r4, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <__assert_func+0x2c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	68d8      	ldr	r0, [r3, #12]
 8006eba:	b14c      	cbz	r4, 8006ed0 <__assert_func+0x24>
 8006ebc:	4b07      	ldr	r3, [pc, #28]	; (8006edc <__assert_func+0x30>)
 8006ebe:	9100      	str	r1, [sp, #0]
 8006ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ec4:	4906      	ldr	r1, [pc, #24]	; (8006ee0 <__assert_func+0x34>)
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	f000 f974 	bl	80071b4 <fiprintf>
 8006ecc:	f7ff ffe6 	bl	8006e9c <abort>
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <__assert_func+0x38>)
 8006ed2:	461c      	mov	r4, r3
 8006ed4:	e7f3      	b.n	8006ebe <__assert_func+0x12>
 8006ed6:	bf00      	nop
 8006ed8:	20000064 	.word	0x20000064
 8006edc:	0800865b 	.word	0x0800865b
 8006ee0:	08008668 	.word	0x08008668
 8006ee4:	08008696 	.word	0x08008696

08006ee8 <atexit>:
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4601      	mov	r1, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 baec 	b.w	80074cc <__register_exitproc>

08006ef4 <malloc>:
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <malloc+0xc>)
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f000 b82b 	b.w	8006f54 <_malloc_r>
 8006efe:	bf00      	nop
 8006f00:	20000064 	.word	0x20000064

08006f04 <free>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <free+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f000 bb3d 	b.w	8007588 <_free_r>
 8006f0e:	bf00      	nop
 8006f10:	20000064 	.word	0x20000064

08006f14 <sbrk_aligned>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4e0e      	ldr	r6, [pc, #56]	; (8006f50 <sbrk_aligned+0x3c>)
 8006f18:	460c      	mov	r4, r1
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	b911      	cbnz	r1, 8006f26 <sbrk_aligned+0x12>
 8006f20:	f000 fa76 	bl	8007410 <_sbrk_r>
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 fa71 	bl	8007410 <_sbrk_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d00a      	beq.n	8006f48 <sbrk_aligned+0x34>
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d007      	beq.n	8006f4c <sbrk_aligned+0x38>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fa66 	bl	8007410 <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d101      	bne.n	8006f4c <sbrk_aligned+0x38>
 8006f48:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	20000844 	.word	0x20000844

08006f54 <_malloc_r>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	1ccd      	adds	r5, r1, #3
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	4607      	mov	r7, r0
 8006f6a:	db01      	blt.n	8006f70 <_malloc_r+0x1c>
 8006f6c:	42a9      	cmp	r1, r5
 8006f6e:	d905      	bls.n	8006f7c <_malloc_r+0x28>
 8006f70:	230c      	movs	r3, #12
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	2600      	movs	r6, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007050 <_malloc_r+0xfc>
 8006f80:	f000 f868 	bl	8007054 <__malloc_lock>
 8006f84:	f8d8 3000 	ldr.w	r3, [r8]
 8006f88:	461c      	mov	r4, r3
 8006f8a:	bb5c      	cbnz	r4, 8006fe4 <_malloc_r+0x90>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff ffc0 	bl	8006f14 <sbrk_aligned>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	4604      	mov	r4, r0
 8006f98:	d155      	bne.n	8007046 <_malloc_r+0xf2>
 8006f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f9e:	4626      	mov	r6, r4
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	d145      	bne.n	8007030 <_malloc_r+0xdc>
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	d048      	beq.n	800703a <_malloc_r+0xe6>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	4631      	mov	r1, r6
 8006fac:	4638      	mov	r0, r7
 8006fae:	eb04 0903 	add.w	r9, r4, r3
 8006fb2:	f000 fa2d 	bl	8007410 <_sbrk_r>
 8006fb6:	4581      	cmp	r9, r0
 8006fb8:	d13f      	bne.n	800703a <_malloc_r+0xe6>
 8006fba:	6821      	ldr	r1, [r4, #0]
 8006fbc:	1a6d      	subs	r5, r5, r1
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f7ff ffa7 	bl	8006f14 <sbrk_aligned>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d037      	beq.n	800703a <_malloc_r+0xe6>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	442b      	add	r3, r5
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d038      	beq.n	800704a <_malloc_r+0xf6>
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	42a2      	cmp	r2, r4
 8006fdc:	d12b      	bne.n	8007036 <_malloc_r+0xe2>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	e00f      	b.n	8007004 <_malloc_r+0xb0>
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	1b52      	subs	r2, r2, r5
 8006fe8:	d41f      	bmi.n	800702a <_malloc_r+0xd6>
 8006fea:	2a0b      	cmp	r2, #11
 8006fec:	d917      	bls.n	800701e <_malloc_r+0xca>
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	6025      	str	r5, [r4, #0]
 8006ff4:	bf18      	it	ne
 8006ff6:	6059      	strne	r1, [r3, #4]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	bf08      	it	eq
 8006ffc:	f8c8 1000 	streq.w	r1, [r8]
 8007000:	5162      	str	r2, [r4, r5]
 8007002:	604b      	str	r3, [r1, #4]
 8007004:	4638      	mov	r0, r7
 8007006:	f104 060b 	add.w	r6, r4, #11
 800700a:	f000 f829 	bl	8007060 <__malloc_unlock>
 800700e:	f026 0607 	bic.w	r6, r6, #7
 8007012:	1d23      	adds	r3, r4, #4
 8007014:	1af2      	subs	r2, r6, r3
 8007016:	d0ae      	beq.n	8006f76 <_malloc_r+0x22>
 8007018:	1b9b      	subs	r3, r3, r6
 800701a:	50a3      	str	r3, [r4, r2]
 800701c:	e7ab      	b.n	8006f76 <_malloc_r+0x22>
 800701e:	42a3      	cmp	r3, r4
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	d1dd      	bne.n	8006fe0 <_malloc_r+0x8c>
 8007024:	f8c8 2000 	str.w	r2, [r8]
 8007028:	e7ec      	b.n	8007004 <_malloc_r+0xb0>
 800702a:	4623      	mov	r3, r4
 800702c:	6864      	ldr	r4, [r4, #4]
 800702e:	e7ac      	b.n	8006f8a <_malloc_r+0x36>
 8007030:	4634      	mov	r4, r6
 8007032:	6876      	ldr	r6, [r6, #4]
 8007034:	e7b4      	b.n	8006fa0 <_malloc_r+0x4c>
 8007036:	4613      	mov	r3, r2
 8007038:	e7cc      	b.n	8006fd4 <_malloc_r+0x80>
 800703a:	230c      	movs	r3, #12
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4638      	mov	r0, r7
 8007040:	f000 f80e 	bl	8007060 <__malloc_unlock>
 8007044:	e797      	b.n	8006f76 <_malloc_r+0x22>
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	e7dc      	b.n	8007004 <_malloc_r+0xb0>
 800704a:	605b      	str	r3, [r3, #4]
 800704c:	deff      	udf	#255	; 0xff
 800704e:	bf00      	nop
 8007050:	20000840 	.word	0x20000840

08007054 <__malloc_lock>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__malloc_lock+0x8>)
 8007056:	f000 ba28 	b.w	80074aa <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	20000989 	.word	0x20000989

08007060 <__malloc_unlock>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__malloc_unlock+0x8>)
 8007062:	f000 ba23 	b.w	80074ac <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	20000989 	.word	0x20000989

0800706c <std>:
 800706c:	2300      	movs	r3, #0
 800706e:	b510      	push	{r4, lr}
 8007070:	4604      	mov	r4, r0
 8007072:	e9c0 3300 	strd	r3, r3, [r0]
 8007076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800707a:	6083      	str	r3, [r0, #8]
 800707c:	8181      	strh	r1, [r0, #12]
 800707e:	6643      	str	r3, [r0, #100]	; 0x64
 8007080:	81c2      	strh	r2, [r0, #14]
 8007082:	6183      	str	r3, [r0, #24]
 8007084:	4619      	mov	r1, r3
 8007086:	2208      	movs	r2, #8
 8007088:	305c      	adds	r0, #92	; 0x5c
 800708a:	f000 f941 	bl	8007310 <memset>
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <std+0x58>)
 8007090:	6263      	str	r3, [r4, #36]	; 0x24
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <std+0x5c>)
 8007094:	62a3      	str	r3, [r4, #40]	; 0x28
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <std+0x60>)
 8007098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <std+0x64>)
 800709c:	6323      	str	r3, [r4, #48]	; 0x30
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <std+0x68>)
 80070a0:	6224      	str	r4, [r4, #32]
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d006      	beq.n	80070b4 <std+0x48>
 80070a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070aa:	4294      	cmp	r4, r2
 80070ac:	d002      	beq.n	80070b4 <std+0x48>
 80070ae:	33d0      	adds	r3, #208	; 0xd0
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d105      	bne.n	80070c0 <std+0x54>
 80070b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070bc:	f000 b9f4 	b.w	80074a8 <__retarget_lock_init_recursive>
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	bf00      	nop
 80070c4:	08007215 	.word	0x08007215
 80070c8:	08007237 	.word	0x08007237
 80070cc:	0800726f 	.word	0x0800726f
 80070d0:	08007293 	.word	0x08007293
 80070d4:	20000848 	.word	0x20000848

080070d8 <stdio_exit_handler>:
 80070d8:	4a02      	ldr	r2, [pc, #8]	; (80070e4 <stdio_exit_handler+0xc>)
 80070da:	4903      	ldr	r1, [pc, #12]	; (80070e8 <stdio_exit_handler+0x10>)
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <stdio_exit_handler+0x14>)
 80070de:	f000 b87b 	b.w	80071d8 <_fwalk_sglue>
 80070e2:	bf00      	nop
 80070e4:	2000000c 	.word	0x2000000c
 80070e8:	08007f85 	.word	0x08007f85
 80070ec:	20000018 	.word	0x20000018

080070f0 <cleanup_stdio>:
 80070f0:	6841      	ldr	r1, [r0, #4]
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <cleanup_stdio+0x34>)
 80070f4:	4299      	cmp	r1, r3
 80070f6:	b510      	push	{r4, lr}
 80070f8:	4604      	mov	r4, r0
 80070fa:	d001      	beq.n	8007100 <cleanup_stdio+0x10>
 80070fc:	f000 ff42 	bl	8007f84 <_fflush_r>
 8007100:	68a1      	ldr	r1, [r4, #8]
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <cleanup_stdio+0x38>)
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <cleanup_stdio+0x1e>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 ff3b 	bl	8007f84 <_fflush_r>
 800710e:	68e1      	ldr	r1, [r4, #12]
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <cleanup_stdio+0x3c>)
 8007112:	4299      	cmp	r1, r3
 8007114:	d004      	beq.n	8007120 <cleanup_stdio+0x30>
 8007116:	4620      	mov	r0, r4
 8007118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800711c:	f000 bf32 	b.w	8007f84 <_fflush_r>
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	20000848 	.word	0x20000848
 8007128:	200008b0 	.word	0x200008b0
 800712c:	20000918 	.word	0x20000918

08007130 <global_stdio_init.part.0>:
 8007130:	b510      	push	{r4, lr}
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <global_stdio_init.part.0+0x30>)
 8007134:	4c0b      	ldr	r4, [pc, #44]	; (8007164 <global_stdio_init.part.0+0x34>)
 8007136:	4a0c      	ldr	r2, [pc, #48]	; (8007168 <global_stdio_init.part.0+0x38>)
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	4620      	mov	r0, r4
 800713c:	2200      	movs	r2, #0
 800713e:	2104      	movs	r1, #4
 8007140:	f7ff ff94 	bl	800706c <std>
 8007144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007148:	2201      	movs	r2, #1
 800714a:	2109      	movs	r1, #9
 800714c:	f7ff ff8e 	bl	800706c <std>
 8007150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007154:	2202      	movs	r2, #2
 8007156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715a:	2112      	movs	r1, #18
 800715c:	f7ff bf86 	b.w	800706c <std>
 8007160:	20000980 	.word	0x20000980
 8007164:	20000848 	.word	0x20000848
 8007168:	080070d9 	.word	0x080070d9

0800716c <__sfp_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sfp_lock_acquire+0x8>)
 800716e:	f000 b99c 	b.w	80074aa <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	2000098a 	.word	0x2000098a

08007178 <__sfp_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sfp_lock_release+0x8>)
 800717a:	f000 b997 	b.w	80074ac <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	2000098a 	.word	0x2000098a

08007184 <__sinit>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f7ff fff0 	bl	800716c <__sfp_lock_acquire>
 800718c:	6a23      	ldr	r3, [r4, #32]
 800718e:	b11b      	cbz	r3, 8007198 <__sinit+0x14>
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	f7ff bff0 	b.w	8007178 <__sfp_lock_release>
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <__sinit+0x28>)
 800719a:	6223      	str	r3, [r4, #32]
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <__sinit+0x2c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f5      	bne.n	8007190 <__sinit+0xc>
 80071a4:	f7ff ffc4 	bl	8007130 <global_stdio_init.part.0>
 80071a8:	e7f2      	b.n	8007190 <__sinit+0xc>
 80071aa:	bf00      	nop
 80071ac:	080070f1 	.word	0x080070f1
 80071b0:	20000980 	.word	0x20000980

080071b4 <fiprintf>:
 80071b4:	b40e      	push	{r1, r2, r3}
 80071b6:	b503      	push	{r0, r1, lr}
 80071b8:	4601      	mov	r1, r0
 80071ba:	ab03      	add	r3, sp, #12
 80071bc:	4805      	ldr	r0, [pc, #20]	; (80071d4 <fiprintf+0x20>)
 80071be:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c2:	6800      	ldr	r0, [r0, #0]
 80071c4:	9301      	str	r3, [sp, #4]
 80071c6:	f000 fbad 	bl	8007924 <_vfiprintf_r>
 80071ca:	b002      	add	sp, #8
 80071cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d0:	b003      	add	sp, #12
 80071d2:	4770      	bx	lr
 80071d4:	20000064 	.word	0x20000064

080071d8 <_fwalk_sglue>:
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4607      	mov	r7, r0
 80071de:	4688      	mov	r8, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	2600      	movs	r6, #0
 80071e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e8:	f1b9 0901 	subs.w	r9, r9, #1
 80071ec:	d505      	bpl.n	80071fa <_fwalk_sglue+0x22>
 80071ee:	6824      	ldr	r4, [r4, #0]
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	d1f7      	bne.n	80071e4 <_fwalk_sglue+0xc>
 80071f4:	4630      	mov	r0, r6
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d907      	bls.n	8007210 <_fwalk_sglue+0x38>
 8007200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007204:	3301      	adds	r3, #1
 8007206:	d003      	beq.n	8007210 <_fwalk_sglue+0x38>
 8007208:	4629      	mov	r1, r5
 800720a:	4638      	mov	r0, r7
 800720c:	47c0      	blx	r8
 800720e:	4306      	orrs	r6, r0
 8007210:	3568      	adds	r5, #104	; 0x68
 8007212:	e7e9      	b.n	80071e8 <_fwalk_sglue+0x10>

08007214 <__sread>:
 8007214:	b510      	push	{r4, lr}
 8007216:	460c      	mov	r4, r1
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	f000 f8d2 	bl	80073c4 <_read_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	bfab      	itete	ge
 8007224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007226:	89a3      	ldrhlt	r3, [r4, #12]
 8007228:	181b      	addge	r3, r3, r0
 800722a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800722e:	bfac      	ite	ge
 8007230:	6563      	strge	r3, [r4, #84]	; 0x54
 8007232:	81a3      	strhlt	r3, [r4, #12]
 8007234:	bd10      	pop	{r4, pc}

08007236 <__swrite>:
 8007236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723a:	461f      	mov	r7, r3
 800723c:	898b      	ldrh	r3, [r1, #12]
 800723e:	05db      	lsls	r3, r3, #23
 8007240:	4605      	mov	r5, r0
 8007242:	460c      	mov	r4, r1
 8007244:	4616      	mov	r6, r2
 8007246:	d505      	bpl.n	8007254 <__swrite+0x1e>
 8007248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724c:	2302      	movs	r3, #2
 800724e:	2200      	movs	r2, #0
 8007250:	f000 f8a6 	bl	80073a0 <_lseek_r>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	4632      	mov	r2, r6
 8007262:	463b      	mov	r3, r7
 8007264:	4628      	mov	r0, r5
 8007266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726a:	f000 b8e1 	b.w	8007430 <_write_r>

0800726e <__sseek>:
 800726e:	b510      	push	{r4, lr}
 8007270:	460c      	mov	r4, r1
 8007272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007276:	f000 f893 	bl	80073a0 <_lseek_r>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	bf15      	itete	ne
 8007280:	6560      	strne	r0, [r4, #84]	; 0x54
 8007282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800728a:	81a3      	strheq	r3, [r4, #12]
 800728c:	bf18      	it	ne
 800728e:	81a3      	strhne	r3, [r4, #12]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__sclose>:
 8007292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007296:	f000 b873 	b.w	8007380 <_close_r>
	...

0800729c <_vsiprintf_r>:
 800729c:	b500      	push	{lr}
 800729e:	b09b      	sub	sp, #108	; 0x6c
 80072a0:	9100      	str	r1, [sp, #0]
 80072a2:	9104      	str	r1, [sp, #16]
 80072a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a8:	9105      	str	r1, [sp, #20]
 80072aa:	9102      	str	r1, [sp, #8]
 80072ac:	4905      	ldr	r1, [pc, #20]	; (80072c4 <_vsiprintf_r+0x28>)
 80072ae:	9103      	str	r1, [sp, #12]
 80072b0:	4669      	mov	r1, sp
 80072b2:	f000 fa0f 	bl	80076d4 <_svfiprintf_r>
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	b01b      	add	sp, #108	; 0x6c
 80072be:	f85d fb04 	ldr.w	pc, [sp], #4
 80072c2:	bf00      	nop
 80072c4:	ffff0208 	.word	0xffff0208

080072c8 <vsiprintf>:
 80072c8:	4613      	mov	r3, r2
 80072ca:	460a      	mov	r2, r1
 80072cc:	4601      	mov	r1, r0
 80072ce:	4802      	ldr	r0, [pc, #8]	; (80072d8 <vsiprintf+0x10>)
 80072d0:	6800      	ldr	r0, [r0, #0]
 80072d2:	f7ff bfe3 	b.w	800729c <_vsiprintf_r>
 80072d6:	bf00      	nop
 80072d8:	20000064 	.word	0x20000064

080072dc <memmove>:
 80072dc:	4288      	cmp	r0, r1
 80072de:	b510      	push	{r4, lr}
 80072e0:	eb01 0402 	add.w	r4, r1, r2
 80072e4:	d902      	bls.n	80072ec <memmove+0x10>
 80072e6:	4284      	cmp	r4, r0
 80072e8:	4623      	mov	r3, r4
 80072ea:	d807      	bhi.n	80072fc <memmove+0x20>
 80072ec:	1e43      	subs	r3, r0, #1
 80072ee:	42a1      	cmp	r1, r4
 80072f0:	d008      	beq.n	8007304 <memmove+0x28>
 80072f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072fa:	e7f8      	b.n	80072ee <memmove+0x12>
 80072fc:	4402      	add	r2, r0
 80072fe:	4601      	mov	r1, r0
 8007300:	428a      	cmp	r2, r1
 8007302:	d100      	bne.n	8007306 <memmove+0x2a>
 8007304:	bd10      	pop	{r4, pc}
 8007306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800730a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800730e:	e7f7      	b.n	8007300 <memmove+0x24>

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <_raise_r>:
 8007320:	291f      	cmp	r1, #31
 8007322:	b538      	push	{r3, r4, r5, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	d904      	bls.n	8007334 <_raise_r+0x14>
 800732a:	2316      	movs	r3, #22
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007336:	b112      	cbz	r2, 800733e <_raise_r+0x1e>
 8007338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800733c:	b94b      	cbnz	r3, 8007352 <_raise_r+0x32>
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f864 	bl	800740c <_getpid_r>
 8007344:	462a      	mov	r2, r5
 8007346:	4601      	mov	r1, r0
 8007348:	4620      	mov	r0, r4
 800734a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800734e:	f000 b84b 	b.w	80073e8 <_kill_r>
 8007352:	2b01      	cmp	r3, #1
 8007354:	d00a      	beq.n	800736c <_raise_r+0x4c>
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	d103      	bne.n	8007362 <_raise_r+0x42>
 800735a:	2316      	movs	r3, #22
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	2001      	movs	r0, #1
 8007360:	e7e7      	b.n	8007332 <_raise_r+0x12>
 8007362:	2400      	movs	r4, #0
 8007364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007368:	4628      	mov	r0, r5
 800736a:	4798      	blx	r3
 800736c:	2000      	movs	r0, #0
 800736e:	e7e0      	b.n	8007332 <_raise_r+0x12>

08007370 <raise>:
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <raise+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f7ff bfd3 	b.w	8007320 <_raise_r>
 800737a:	bf00      	nop
 800737c:	20000064 	.word	0x20000064

08007380 <_close_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	; (800739c <_close_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7f9 fc25 	bl	8000bda <_close>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_close_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_close_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000984 	.word	0x20000984

080073a0 <_lseek_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d07      	ldr	r5, [pc, #28]	; (80073c0 <_lseek_r+0x20>)
 80073a4:	4604      	mov	r4, r0
 80073a6:	4608      	mov	r0, r1
 80073a8:	4611      	mov	r1, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	602a      	str	r2, [r5, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f7f9 fc3a 	bl	8000c28 <_lseek>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_lseek_r+0x1e>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_lseek_r+0x1e>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000984 	.word	0x20000984

080073c4 <_read_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4d07      	ldr	r5, [pc, #28]	; (80073e4 <_read_r+0x20>)
 80073c8:	4604      	mov	r4, r0
 80073ca:	4608      	mov	r0, r1
 80073cc:	4611      	mov	r1, r2
 80073ce:	2200      	movs	r2, #0
 80073d0:	602a      	str	r2, [r5, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f7f9 fbc8 	bl	8000b68 <_read>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_read_r+0x1e>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_read_r+0x1e>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20000984 	.word	0x20000984

080073e8 <_kill_r>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4d07      	ldr	r5, [pc, #28]	; (8007408 <_kill_r+0x20>)
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	4608      	mov	r0, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f7f9 fb9d 	bl	8000b34 <_kill>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d102      	bne.n	8007404 <_kill_r+0x1c>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b103      	cbz	r3, 8007404 <_kill_r+0x1c>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	bf00      	nop
 8007408:	20000984 	.word	0x20000984

0800740c <_getpid_r>:
 800740c:	f7f9 bb8a 	b.w	8000b24 <_getpid>

08007410 <_sbrk_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d06      	ldr	r5, [pc, #24]	; (800742c <_sbrk_r+0x1c>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7f9 fc12 	bl	8000c44 <_sbrk>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_sbrk_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_sbrk_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000984 	.word	0x20000984

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	; (8007450 <_write_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7f9 fbaf 	bl	8000ba2 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000984 	.word	0x20000984

08007454 <__errno>:
 8007454:	4b01      	ldr	r3, [pc, #4]	; (800745c <__errno+0x8>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000064 	.word	0x20000064

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	; (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	; (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	; (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	; (80074a4 <__libc_init_array+0x44>)
 8007474:	f000 ff00 	bl	8008278 <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	080086d4 	.word	0x080086d4
 800749c:	080086d4 	.word	0x080086d4
 80074a0:	080086d4 	.word	0x080086d4
 80074a4:	080086e0 	.word	0x080086e0

080074a8 <__retarget_lock_init_recursive>:
 80074a8:	4770      	bx	lr

080074aa <__retarget_lock_acquire_recursive>:
 80074aa:	4770      	bx	lr

080074ac <__retarget_lock_release_recursive>:
 80074ac:	4770      	bx	lr

080074ae <memcpy>:
 80074ae:	440a      	add	r2, r1
 80074b0:	4291      	cmp	r1, r2
 80074b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b6:	d100      	bne.n	80074ba <memcpy+0xc>
 80074b8:	4770      	bx	lr
 80074ba:	b510      	push	{r4, lr}
 80074bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c4:	4291      	cmp	r1, r2
 80074c6:	d1f9      	bne.n	80074bc <memcpy+0xe>
 80074c8:	bd10      	pop	{r4, pc}
	...

080074cc <__register_exitproc>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007584 <__register_exitproc+0xb8>
 80074d4:	4606      	mov	r6, r0
 80074d6:	f8d8 0000 	ldr.w	r0, [r8]
 80074da:	461f      	mov	r7, r3
 80074dc:	460d      	mov	r5, r1
 80074de:	4691      	mov	r9, r2
 80074e0:	f7ff ffe3 	bl	80074aa <__retarget_lock_acquire_recursive>
 80074e4:	4b23      	ldr	r3, [pc, #140]	; (8007574 <__register_exitproc+0xa8>)
 80074e6:	681c      	ldr	r4, [r3, #0]
 80074e8:	b934      	cbnz	r4, 80074f8 <__register_exitproc+0x2c>
 80074ea:	4c23      	ldr	r4, [pc, #140]	; (8007578 <__register_exitproc+0xac>)
 80074ec:	601c      	str	r4, [r3, #0]
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <__register_exitproc+0xb0>)
 80074f0:	b113      	cbz	r3, 80074f8 <__register_exitproc+0x2c>
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80074f8:	6863      	ldr	r3, [r4, #4]
 80074fa:	2b1f      	cmp	r3, #31
 80074fc:	dd07      	ble.n	800750e <__register_exitproc+0x42>
 80074fe:	f8d8 0000 	ldr.w	r0, [r8]
 8007502:	f7ff ffd3 	bl	80074ac <__retarget_lock_release_recursive>
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	b32e      	cbz	r6, 800755c <__register_exitproc+0x90>
 8007510:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007514:	b968      	cbnz	r0, 8007532 <__register_exitproc+0x66>
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <__register_exitproc+0xb4>)
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <__register_exitproc+0x32>
 800751c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007520:	f7ff fce8 	bl	8006ef4 <malloc>
 8007524:	2800      	cmp	r0, #0
 8007526:	d0ea      	beq.n	80074fe <__register_exitproc+0x32>
 8007528:	2300      	movs	r3, #0
 800752a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800752e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007538:	2201      	movs	r2, #1
 800753a:	409a      	lsls	r2, r3
 800753c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007540:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800754a:	2e02      	cmp	r6, #2
 800754c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007550:	bf02      	ittt	eq
 8007552:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8007556:	4313      	orreq	r3, r2
 8007558:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	f8d8 0000 	ldr.w	r0, [r8]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	3302      	adds	r3, #2
 8007566:	6062      	str	r2, [r4, #4]
 8007568:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800756c:	f7ff ff9e 	bl	80074ac <__retarget_lock_release_recursive>
 8007570:	2000      	movs	r0, #0
 8007572:	e7ca      	b.n	800750a <__register_exitproc+0x3e>
 8007574:	20000a18 	.word	0x20000a18
 8007578:	2000098c 	.word	0x2000098c
 800757c:	00000000 	.word	0x00000000
 8007580:	08006ef5 	.word	0x08006ef5
 8007584:	20000068 	.word	0x20000068

08007588 <_free_r>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	2900      	cmp	r1, #0
 800758c:	d044      	beq.n	8007618 <_free_r+0x90>
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f1a1 0404 	sub.w	r4, r1, #4
 800759a:	bfb8      	it	lt
 800759c:	18e4      	addlt	r4, r4, r3
 800759e:	f7ff fd59 	bl	8007054 <__malloc_lock>
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <_free_r+0x94>)
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	b933      	cbnz	r3, 80075b8 <_free_r+0x30>
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	6014      	str	r4, [r2, #0]
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b4:	f7ff bd54 	b.w	8007060 <__malloc_unlock>
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d908      	bls.n	80075ce <_free_r+0x46>
 80075bc:	6825      	ldr	r5, [r4, #0]
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf01      	itttt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	1949      	addeq	r1, r1, r5
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	e7ed      	b.n	80075aa <_free_r+0x22>
 80075ce:	461a      	mov	r2, r3
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	b10b      	cbz	r3, 80075d8 <_free_r+0x50>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d9fa      	bls.n	80075ce <_free_r+0x46>
 80075d8:	6811      	ldr	r1, [r2, #0]
 80075da:	1855      	adds	r5, r2, r1
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d10b      	bne.n	80075f8 <_free_r+0x70>
 80075e0:	6824      	ldr	r4, [r4, #0]
 80075e2:	4421      	add	r1, r4
 80075e4:	1854      	adds	r4, r2, r1
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	d1e0      	bne.n	80075ae <_free_r+0x26>
 80075ec:	681c      	ldr	r4, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	6053      	str	r3, [r2, #4]
 80075f2:	440c      	add	r4, r1
 80075f4:	6014      	str	r4, [r2, #0]
 80075f6:	e7da      	b.n	80075ae <_free_r+0x26>
 80075f8:	d902      	bls.n	8007600 <_free_r+0x78>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	e7d6      	b.n	80075ae <_free_r+0x26>
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	1961      	adds	r1, r4, r5
 8007604:	428b      	cmp	r3, r1
 8007606:	bf04      	itt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	bf04      	itt	eq
 8007610:	1949      	addeq	r1, r1, r5
 8007612:	6021      	streq	r1, [r4, #0]
 8007614:	6054      	str	r4, [r2, #4]
 8007616:	e7ca      	b.n	80075ae <_free_r+0x26>
 8007618:	b003      	add	sp, #12
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	20000840 	.word	0x20000840

08007620 <__ssputs_r>:
 8007620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007624:	688e      	ldr	r6, [r1, #8]
 8007626:	461f      	mov	r7, r3
 8007628:	42be      	cmp	r6, r7
 800762a:	680b      	ldr	r3, [r1, #0]
 800762c:	4682      	mov	sl, r0
 800762e:	460c      	mov	r4, r1
 8007630:	4690      	mov	r8, r2
 8007632:	d82c      	bhi.n	800768e <__ssputs_r+0x6e>
 8007634:	898a      	ldrh	r2, [r1, #12]
 8007636:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800763a:	d026      	beq.n	800768a <__ssputs_r+0x6a>
 800763c:	6965      	ldr	r5, [r4, #20]
 800763e:	6909      	ldr	r1, [r1, #16]
 8007640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007644:	eba3 0901 	sub.w	r9, r3, r1
 8007648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800764c:	1c7b      	adds	r3, r7, #1
 800764e:	444b      	add	r3, r9
 8007650:	106d      	asrs	r5, r5, #1
 8007652:	429d      	cmp	r5, r3
 8007654:	bf38      	it	cc
 8007656:	461d      	movcc	r5, r3
 8007658:	0553      	lsls	r3, r2, #21
 800765a:	d527      	bpl.n	80076ac <__ssputs_r+0x8c>
 800765c:	4629      	mov	r1, r5
 800765e:	f7ff fc79 	bl	8006f54 <_malloc_r>
 8007662:	4606      	mov	r6, r0
 8007664:	b360      	cbz	r0, 80076c0 <__ssputs_r+0xa0>
 8007666:	6921      	ldr	r1, [r4, #16]
 8007668:	464a      	mov	r2, r9
 800766a:	f7ff ff20 	bl	80074ae <memcpy>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	6126      	str	r6, [r4, #16]
 800767c:	6165      	str	r5, [r4, #20]
 800767e:	444e      	add	r6, r9
 8007680:	eba5 0509 	sub.w	r5, r5, r9
 8007684:	6026      	str	r6, [r4, #0]
 8007686:	60a5      	str	r5, [r4, #8]
 8007688:	463e      	mov	r6, r7
 800768a:	42be      	cmp	r6, r7
 800768c:	d900      	bls.n	8007690 <__ssputs_r+0x70>
 800768e:	463e      	mov	r6, r7
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	4632      	mov	r2, r6
 8007694:	4641      	mov	r1, r8
 8007696:	f7ff fe21 	bl	80072dc <memmove>
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	1b9b      	subs	r3, r3, r6
 800769e:	60a3      	str	r3, [r4, #8]
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	4433      	add	r3, r6
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	2000      	movs	r0, #0
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ac:	462a      	mov	r2, r5
 80076ae:	f000 fd27 	bl	8008100 <_realloc_r>
 80076b2:	4606      	mov	r6, r0
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d1e0      	bne.n	800767a <__ssputs_r+0x5a>
 80076b8:	6921      	ldr	r1, [r4, #16]
 80076ba:	4650      	mov	r0, sl
 80076bc:	f7ff ff64 	bl	8007588 <_free_r>
 80076c0:	230c      	movs	r3, #12
 80076c2:	f8ca 3000 	str.w	r3, [sl]
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295
 80076d2:	e7e9      	b.n	80076a8 <__ssputs_r+0x88>

080076d4 <_svfiprintf_r>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4698      	mov	r8, r3
 80076da:	898b      	ldrh	r3, [r1, #12]
 80076dc:	061b      	lsls	r3, r3, #24
 80076de:	b09d      	sub	sp, #116	; 0x74
 80076e0:	4607      	mov	r7, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	4614      	mov	r4, r2
 80076e6:	d50e      	bpl.n	8007706 <_svfiprintf_r+0x32>
 80076e8:	690b      	ldr	r3, [r1, #16]
 80076ea:	b963      	cbnz	r3, 8007706 <_svfiprintf_r+0x32>
 80076ec:	2140      	movs	r1, #64	; 0x40
 80076ee:	f7ff fc31 	bl	8006f54 <_malloc_r>
 80076f2:	6028      	str	r0, [r5, #0]
 80076f4:	6128      	str	r0, [r5, #16]
 80076f6:	b920      	cbnz	r0, 8007702 <_svfiprintf_r+0x2e>
 80076f8:	230c      	movs	r3, #12
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	e0d0      	b.n	80078a4 <_svfiprintf_r+0x1d0>
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	616b      	str	r3, [r5, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	9309      	str	r3, [sp, #36]	; 0x24
 800770a:	2320      	movs	r3, #32
 800770c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007710:	f8cd 800c 	str.w	r8, [sp, #12]
 8007714:	2330      	movs	r3, #48	; 0x30
 8007716:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078bc <_svfiprintf_r+0x1e8>
 800771a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800771e:	f04f 0901 	mov.w	r9, #1
 8007722:	4623      	mov	r3, r4
 8007724:	469a      	mov	sl, r3
 8007726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772a:	b10a      	cbz	r2, 8007730 <_svfiprintf_r+0x5c>
 800772c:	2a25      	cmp	r2, #37	; 0x25
 800772e:	d1f9      	bne.n	8007724 <_svfiprintf_r+0x50>
 8007730:	ebba 0b04 	subs.w	fp, sl, r4
 8007734:	d00b      	beq.n	800774e <_svfiprintf_r+0x7a>
 8007736:	465b      	mov	r3, fp
 8007738:	4622      	mov	r2, r4
 800773a:	4629      	mov	r1, r5
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ff6f 	bl	8007620 <__ssputs_r>
 8007742:	3001      	adds	r0, #1
 8007744:	f000 80a9 	beq.w	800789a <_svfiprintf_r+0x1c6>
 8007748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774a:	445a      	add	r2, fp
 800774c:	9209      	str	r2, [sp, #36]	; 0x24
 800774e:	f89a 3000 	ldrb.w	r3, [sl]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80a1 	beq.w	800789a <_svfiprintf_r+0x1c6>
 8007758:	2300      	movs	r3, #0
 800775a:	f04f 32ff 	mov.w	r2, #4294967295
 800775e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007762:	f10a 0a01 	add.w	sl, sl, #1
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800776e:	931a      	str	r3, [sp, #104]	; 0x68
 8007770:	4654      	mov	r4, sl
 8007772:	2205      	movs	r2, #5
 8007774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007778:	4850      	ldr	r0, [pc, #320]	; (80078bc <_svfiprintf_r+0x1e8>)
 800777a:	f7f8 fd49 	bl	8000210 <memchr>
 800777e:	9a04      	ldr	r2, [sp, #16]
 8007780:	b9d8      	cbnz	r0, 80077ba <_svfiprintf_r+0xe6>
 8007782:	06d0      	lsls	r0, r2, #27
 8007784:	bf44      	itt	mi
 8007786:	2320      	movmi	r3, #32
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	0711      	lsls	r1, r2, #28
 800778e:	bf44      	itt	mi
 8007790:	232b      	movmi	r3, #43	; 0x2b
 8007792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007796:	f89a 3000 	ldrb.w	r3, [sl]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d015      	beq.n	80077ca <_svfiprintf_r+0xf6>
 800779e:	9a07      	ldr	r2, [sp, #28]
 80077a0:	4654      	mov	r4, sl
 80077a2:	2000      	movs	r0, #0
 80077a4:	f04f 0c0a 	mov.w	ip, #10
 80077a8:	4621      	mov	r1, r4
 80077aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ae:	3b30      	subs	r3, #48	; 0x30
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	d94d      	bls.n	8007850 <_svfiprintf_r+0x17c>
 80077b4:	b1b0      	cbz	r0, 80077e4 <_svfiprintf_r+0x110>
 80077b6:	9207      	str	r2, [sp, #28]
 80077b8:	e014      	b.n	80077e4 <_svfiprintf_r+0x110>
 80077ba:	eba0 0308 	sub.w	r3, r0, r8
 80077be:	fa09 f303 	lsl.w	r3, r9, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	46a2      	mov	sl, r4
 80077c8:	e7d2      	b.n	8007770 <_svfiprintf_r+0x9c>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d19      	adds	r1, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9103      	str	r1, [sp, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfbb      	ittet	lt
 80077d6:	425b      	neglt	r3, r3
 80077d8:	f042 0202 	orrlt.w	r2, r2, #2
 80077dc:	9307      	strge	r3, [sp, #28]
 80077de:	9307      	strlt	r3, [sp, #28]
 80077e0:	bfb8      	it	lt
 80077e2:	9204      	strlt	r2, [sp, #16]
 80077e4:	7823      	ldrb	r3, [r4, #0]
 80077e6:	2b2e      	cmp	r3, #46	; 0x2e
 80077e8:	d10c      	bne.n	8007804 <_svfiprintf_r+0x130>
 80077ea:	7863      	ldrb	r3, [r4, #1]
 80077ec:	2b2a      	cmp	r3, #42	; 0x2a
 80077ee:	d134      	bne.n	800785a <_svfiprintf_r+0x186>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	9203      	str	r2, [sp, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfb8      	it	lt
 80077fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007800:	3402      	adds	r4, #2
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078cc <_svfiprintf_r+0x1f8>
 8007808:	7821      	ldrb	r1, [r4, #0]
 800780a:	2203      	movs	r2, #3
 800780c:	4650      	mov	r0, sl
 800780e:	f7f8 fcff 	bl	8000210 <memchr>
 8007812:	b138      	cbz	r0, 8007824 <_svfiprintf_r+0x150>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	eba0 000a 	sub.w	r0, r0, sl
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	4082      	lsls	r2, r0
 800781e:	4313      	orrs	r3, r2
 8007820:	3401      	adds	r4, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007828:	4825      	ldr	r0, [pc, #148]	; (80078c0 <_svfiprintf_r+0x1ec>)
 800782a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800782e:	2206      	movs	r2, #6
 8007830:	f7f8 fcee 	bl	8000210 <memchr>
 8007834:	2800      	cmp	r0, #0
 8007836:	d038      	beq.n	80078aa <_svfiprintf_r+0x1d6>
 8007838:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <_svfiprintf_r+0x1f0>)
 800783a:	bb1b      	cbnz	r3, 8007884 <_svfiprintf_r+0x1b0>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	3307      	adds	r3, #7
 8007840:	f023 0307 	bic.w	r3, r3, #7
 8007844:	3308      	adds	r3, #8
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784a:	4433      	add	r3, r6
 800784c:	9309      	str	r3, [sp, #36]	; 0x24
 800784e:	e768      	b.n	8007722 <_svfiprintf_r+0x4e>
 8007850:	fb0c 3202 	mla	r2, ip, r2, r3
 8007854:	460c      	mov	r4, r1
 8007856:	2001      	movs	r0, #1
 8007858:	e7a6      	b.n	80077a8 <_svfiprintf_r+0xd4>
 800785a:	2300      	movs	r3, #0
 800785c:	3401      	adds	r4, #1
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	4619      	mov	r1, r3
 8007862:	f04f 0c0a 	mov.w	ip, #10
 8007866:	4620      	mov	r0, r4
 8007868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786c:	3a30      	subs	r2, #48	; 0x30
 800786e:	2a09      	cmp	r2, #9
 8007870:	d903      	bls.n	800787a <_svfiprintf_r+0x1a6>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0c6      	beq.n	8007804 <_svfiprintf_r+0x130>
 8007876:	9105      	str	r1, [sp, #20]
 8007878:	e7c4      	b.n	8007804 <_svfiprintf_r+0x130>
 800787a:	fb0c 2101 	mla	r1, ip, r1, r2
 800787e:	4604      	mov	r4, r0
 8007880:	2301      	movs	r3, #1
 8007882:	e7f0      	b.n	8007866 <_svfiprintf_r+0x192>
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <_svfiprintf_r+0x1f4>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4638      	mov	r0, r7
 8007890:	f3af 8000 	nop.w
 8007894:	1c42      	adds	r2, r0, #1
 8007896:	4606      	mov	r6, r0
 8007898:	d1d6      	bne.n	8007848 <_svfiprintf_r+0x174>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	065b      	lsls	r3, r3, #25
 800789e:	f53f af2d 	bmi.w	80076fc <_svfiprintf_r+0x28>
 80078a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078a4:	b01d      	add	sp, #116	; 0x74
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	ab03      	add	r3, sp, #12
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	462a      	mov	r2, r5
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <_svfiprintf_r+0x1f4>)
 80078b2:	a904      	add	r1, sp, #16
 80078b4:	4638      	mov	r0, r7
 80078b6:	f000 f9bd 	bl	8007c34 <_printf_i>
 80078ba:	e7eb      	b.n	8007894 <_svfiprintf_r+0x1c0>
 80078bc:	08008697 	.word	0x08008697
 80078c0:	080086a1 	.word	0x080086a1
 80078c4:	00000000 	.word	0x00000000
 80078c8:	08007621 	.word	0x08007621
 80078cc:	0800869d 	.word	0x0800869d

080078d0 <__sfputc_r>:
 80078d0:	6893      	ldr	r3, [r2, #8]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	b410      	push	{r4}
 80078d8:	6093      	str	r3, [r2, #8]
 80078da:	da08      	bge.n	80078ee <__sfputc_r+0x1e>
 80078dc:	6994      	ldr	r4, [r2, #24]
 80078de:	42a3      	cmp	r3, r4
 80078e0:	db01      	blt.n	80078e6 <__sfputc_r+0x16>
 80078e2:	290a      	cmp	r1, #10
 80078e4:	d103      	bne.n	80078ee <__sfputc_r+0x1e>
 80078e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ea:	f000 bb73 	b.w	8007fd4 <__swbuf_r>
 80078ee:	6813      	ldr	r3, [r2, #0]
 80078f0:	1c58      	adds	r0, r3, #1
 80078f2:	6010      	str	r0, [r2, #0]
 80078f4:	7019      	strb	r1, [r3, #0]
 80078f6:	4608      	mov	r0, r1
 80078f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <__sfputs_r>:
 80078fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	4614      	mov	r4, r2
 8007906:	18d5      	adds	r5, r2, r3
 8007908:	42ac      	cmp	r4, r5
 800790a:	d101      	bne.n	8007910 <__sfputs_r+0x12>
 800790c:	2000      	movs	r0, #0
 800790e:	e007      	b.n	8007920 <__sfputs_r+0x22>
 8007910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007914:	463a      	mov	r2, r7
 8007916:	4630      	mov	r0, r6
 8007918:	f7ff ffda 	bl	80078d0 <__sfputc_r>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d1f3      	bne.n	8007908 <__sfputs_r+0xa>
 8007920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007924 <_vfiprintf_r>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	460d      	mov	r5, r1
 800792a:	b09d      	sub	sp, #116	; 0x74
 800792c:	4614      	mov	r4, r2
 800792e:	4698      	mov	r8, r3
 8007930:	4606      	mov	r6, r0
 8007932:	b118      	cbz	r0, 800793c <_vfiprintf_r+0x18>
 8007934:	6a03      	ldr	r3, [r0, #32]
 8007936:	b90b      	cbnz	r3, 800793c <_vfiprintf_r+0x18>
 8007938:	f7ff fc24 	bl	8007184 <__sinit>
 800793c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800793e:	07d9      	lsls	r1, r3, #31
 8007940:	d405      	bmi.n	800794e <_vfiprintf_r+0x2a>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	059a      	lsls	r2, r3, #22
 8007946:	d402      	bmi.n	800794e <_vfiprintf_r+0x2a>
 8007948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794a:	f7ff fdae 	bl	80074aa <__retarget_lock_acquire_recursive>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	071b      	lsls	r3, r3, #28
 8007952:	d501      	bpl.n	8007958 <_vfiprintf_r+0x34>
 8007954:	692b      	ldr	r3, [r5, #16]
 8007956:	b99b      	cbnz	r3, 8007980 <_vfiprintf_r+0x5c>
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f000 fb78 	bl	8008050 <__swsetup_r>
 8007960:	b170      	cbz	r0, 8007980 <_vfiprintf_r+0x5c>
 8007962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007964:	07dc      	lsls	r4, r3, #31
 8007966:	d504      	bpl.n	8007972 <_vfiprintf_r+0x4e>
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	b01d      	add	sp, #116	; 0x74
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	0598      	lsls	r0, r3, #22
 8007976:	d4f7      	bmi.n	8007968 <_vfiprintf_r+0x44>
 8007978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800797a:	f7ff fd97 	bl	80074ac <__retarget_lock_release_recursive>
 800797e:	e7f3      	b.n	8007968 <_vfiprintf_r+0x44>
 8007980:	2300      	movs	r3, #0
 8007982:	9309      	str	r3, [sp, #36]	; 0x24
 8007984:	2320      	movs	r3, #32
 8007986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798a:	f8cd 800c 	str.w	r8, [sp, #12]
 800798e:	2330      	movs	r3, #48	; 0x30
 8007990:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b44 <_vfiprintf_r+0x220>
 8007994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007998:	f04f 0901 	mov.w	r9, #1
 800799c:	4623      	mov	r3, r4
 800799e:	469a      	mov	sl, r3
 80079a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a4:	b10a      	cbz	r2, 80079aa <_vfiprintf_r+0x86>
 80079a6:	2a25      	cmp	r2, #37	; 0x25
 80079a8:	d1f9      	bne.n	800799e <_vfiprintf_r+0x7a>
 80079aa:	ebba 0b04 	subs.w	fp, sl, r4
 80079ae:	d00b      	beq.n	80079c8 <_vfiprintf_r+0xa4>
 80079b0:	465b      	mov	r3, fp
 80079b2:	4622      	mov	r2, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ffa1 	bl	80078fe <__sfputs_r>
 80079bc:	3001      	adds	r0, #1
 80079be:	f000 80a9 	beq.w	8007b14 <_vfiprintf_r+0x1f0>
 80079c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c4:	445a      	add	r2, fp
 80079c6:	9209      	str	r2, [sp, #36]	; 0x24
 80079c8:	f89a 3000 	ldrb.w	r3, [sl]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80a1 	beq.w	8007b14 <_vfiprintf_r+0x1f0>
 80079d2:	2300      	movs	r3, #0
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079dc:	f10a 0a01 	add.w	sl, sl, #1
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	9307      	str	r3, [sp, #28]
 80079e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e8:	931a      	str	r3, [sp, #104]	; 0x68
 80079ea:	4654      	mov	r4, sl
 80079ec:	2205      	movs	r2, #5
 80079ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f2:	4854      	ldr	r0, [pc, #336]	; (8007b44 <_vfiprintf_r+0x220>)
 80079f4:	f7f8 fc0c 	bl	8000210 <memchr>
 80079f8:	9a04      	ldr	r2, [sp, #16]
 80079fa:	b9d8      	cbnz	r0, 8007a34 <_vfiprintf_r+0x110>
 80079fc:	06d1      	lsls	r1, r2, #27
 80079fe:	bf44      	itt	mi
 8007a00:	2320      	movmi	r3, #32
 8007a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a06:	0713      	lsls	r3, r2, #28
 8007a08:	bf44      	itt	mi
 8007a0a:	232b      	movmi	r3, #43	; 0x2b
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a10:	f89a 3000 	ldrb.w	r3, [sl]
 8007a14:	2b2a      	cmp	r3, #42	; 0x2a
 8007a16:	d015      	beq.n	8007a44 <_vfiprintf_r+0x120>
 8007a18:	9a07      	ldr	r2, [sp, #28]
 8007a1a:	4654      	mov	r4, sl
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	f04f 0c0a 	mov.w	ip, #10
 8007a22:	4621      	mov	r1, r4
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d94d      	bls.n	8007aca <_vfiprintf_r+0x1a6>
 8007a2e:	b1b0      	cbz	r0, 8007a5e <_vfiprintf_r+0x13a>
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	e014      	b.n	8007a5e <_vfiprintf_r+0x13a>
 8007a34:	eba0 0308 	sub.w	r3, r0, r8
 8007a38:	fa09 f303 	lsl.w	r3, r9, r3
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	46a2      	mov	sl, r4
 8007a42:	e7d2      	b.n	80079ea <_vfiprintf_r+0xc6>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	1d19      	adds	r1, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	9103      	str	r1, [sp, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfbb      	ittet	lt
 8007a50:	425b      	neglt	r3, r3
 8007a52:	f042 0202 	orrlt.w	r2, r2, #2
 8007a56:	9307      	strge	r3, [sp, #28]
 8007a58:	9307      	strlt	r3, [sp, #28]
 8007a5a:	bfb8      	it	lt
 8007a5c:	9204      	strlt	r2, [sp, #16]
 8007a5e:	7823      	ldrb	r3, [r4, #0]
 8007a60:	2b2e      	cmp	r3, #46	; 0x2e
 8007a62:	d10c      	bne.n	8007a7e <_vfiprintf_r+0x15a>
 8007a64:	7863      	ldrb	r3, [r4, #1]
 8007a66:	2b2a      	cmp	r3, #42	; 0x2a
 8007a68:	d134      	bne.n	8007ad4 <_vfiprintf_r+0x1b0>
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	9203      	str	r2, [sp, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfb8      	it	lt
 8007a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a7a:	3402      	adds	r4, #2
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b54 <_vfiprintf_r+0x230>
 8007a82:	7821      	ldrb	r1, [r4, #0]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4650      	mov	r0, sl
 8007a88:	f7f8 fbc2 	bl	8000210 <memchr>
 8007a8c:	b138      	cbz	r0, 8007a9e <_vfiprintf_r+0x17a>
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	eba0 000a 	sub.w	r0, r0, sl
 8007a94:	2240      	movs	r2, #64	; 0x40
 8007a96:	4082      	lsls	r2, r0
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa2:	4829      	ldr	r0, [pc, #164]	; (8007b48 <_vfiprintf_r+0x224>)
 8007aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa8:	2206      	movs	r2, #6
 8007aaa:	f7f8 fbb1 	bl	8000210 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d03f      	beq.n	8007b32 <_vfiprintf_r+0x20e>
 8007ab2:	4b26      	ldr	r3, [pc, #152]	; (8007b4c <_vfiprintf_r+0x228>)
 8007ab4:	bb1b      	cbnz	r3, 8007afe <_vfiprintf_r+0x1da>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	443b      	add	r3, r7
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	e768      	b.n	800799c <_vfiprintf_r+0x78>
 8007aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	e7a6      	b.n	8007a22 <_vfiprintf_r+0xfe>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0c0a 	mov.w	ip, #10
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae6:	3a30      	subs	r2, #48	; 0x30
 8007ae8:	2a09      	cmp	r2, #9
 8007aea:	d903      	bls.n	8007af4 <_vfiprintf_r+0x1d0>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0c6      	beq.n	8007a7e <_vfiprintf_r+0x15a>
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	e7c4      	b.n	8007a7e <_vfiprintf_r+0x15a>
 8007af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007af8:	4604      	mov	r4, r0
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7f0      	b.n	8007ae0 <_vfiprintf_r+0x1bc>
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <_vfiprintf_r+0x22c>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f3af 8000 	nop.w
 8007b0e:	4607      	mov	r7, r0
 8007b10:	1c78      	adds	r0, r7, #1
 8007b12:	d1d6      	bne.n	8007ac2 <_vfiprintf_r+0x19e>
 8007b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d405      	bmi.n	8007b26 <_vfiprintf_r+0x202>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	059a      	lsls	r2, r3, #22
 8007b1e:	d402      	bmi.n	8007b26 <_vfiprintf_r+0x202>
 8007b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b22:	f7ff fcc3 	bl	80074ac <__retarget_lock_release_recursive>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	065b      	lsls	r3, r3, #25
 8007b2a:	f53f af1d 	bmi.w	8007968 <_vfiprintf_r+0x44>
 8007b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b30:	e71c      	b.n	800796c <_vfiprintf_r+0x48>
 8007b32:	ab03      	add	r3, sp, #12
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <_vfiprintf_r+0x22c>)
 8007b3a:	a904      	add	r1, sp, #16
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f000 f879 	bl	8007c34 <_printf_i>
 8007b42:	e7e4      	b.n	8007b0e <_vfiprintf_r+0x1ea>
 8007b44:	08008697 	.word	0x08008697
 8007b48:	080086a1 	.word	0x080086a1
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	080078ff 	.word	0x080078ff
 8007b54:	0800869d 	.word	0x0800869d

08007b58 <_printf_common>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	4699      	mov	r9, r3
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	bfb8      	it	lt
 8007b6c:	4613      	movlt	r3, r2
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b74:	4607      	mov	r7, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b10a      	cbz	r2, 8007b7e <_printf_common+0x26>
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	0699      	lsls	r1, r3, #26
 8007b82:	bf42      	ittt	mi
 8007b84:	6833      	ldrmi	r3, [r6, #0]
 8007b86:	3302      	addmi	r3, #2
 8007b88:	6033      	strmi	r3, [r6, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	f015 0506 	ands.w	r5, r5, #6
 8007b90:	d106      	bne.n	8007ba0 <_printf_common+0x48>
 8007b92:	f104 0a19 	add.w	sl, r4, #25
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	6832      	ldr	r2, [r6, #0]
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dc26      	bgt.n	8007bee <_printf_common+0x96>
 8007ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba4:	1e13      	subs	r3, r2, #0
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	bf18      	it	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	0692      	lsls	r2, r2, #26
 8007bae:	d42b      	bmi.n	8007c08 <_printf_common+0xb0>
 8007bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c0      	blx	r8
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d01e      	beq.n	8007bfc <_printf_common+0xa4>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	f003 0306 	and.w	r3, r3, #6
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	bf02      	ittt	eq
 8007bca:	68e5      	ldreq	r5, [r4, #12]
 8007bcc:	6833      	ldreq	r3, [r6, #0]
 8007bce:	1aed      	subeq	r5, r5, r3
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	2600      	movs	r6, #0
 8007be4:	341a      	adds	r4, #26
 8007be6:	42b5      	cmp	r5, r6
 8007be8:	d11a      	bne.n	8007c20 <_printf_common+0xc8>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e008      	b.n	8007c00 <_printf_common+0xa8>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	47c0      	blx	r8
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d103      	bne.n	8007c04 <_printf_common+0xac>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	3501      	adds	r5, #1
 8007c06:	e7c6      	b.n	8007b96 <_printf_common+0x3e>
 8007c08:	18e1      	adds	r1, r4, r3
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2030      	movs	r0, #48	; 0x30
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c12:	4422      	add	r2, r4
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	e7c7      	b.n	8007bb0 <_printf_common+0x58>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4622      	mov	r2, r4
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d0e6      	beq.n	8007bfc <_printf_common+0xa4>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7d9      	b.n	8007be6 <_printf_common+0x8e>
	...

08007c34 <_printf_i>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	7e0f      	ldrb	r7, [r1, #24]
 8007c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c3c:	2f78      	cmp	r7, #120	; 0x78
 8007c3e:	4691      	mov	r9, r2
 8007c40:	4680      	mov	r8, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	469a      	mov	sl, r3
 8007c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c4a:	d807      	bhi.n	8007c5c <_printf_i+0x28>
 8007c4c:	2f62      	cmp	r7, #98	; 0x62
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x32>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	f000 80d4 	beq.w	8007dfe <_printf_i+0x1ca>
 8007c56:	2f58      	cmp	r7, #88	; 0x58
 8007c58:	f000 80c0 	beq.w	8007ddc <_printf_i+0x1a8>
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c64:	e03a      	b.n	8007cdc <_printf_i+0xa8>
 8007c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c6a:	2b15      	cmp	r3, #21
 8007c6c:	d8f6      	bhi.n	8007c5c <_printf_i+0x28>
 8007c6e:	a101      	add	r1, pc, #4	; (adr r1, 8007c74 <_printf_i+0x40>)
 8007c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007c5d 	.word	0x08007c5d
 8007c80:	08007c5d 	.word	0x08007c5d
 8007c84:	08007c5d 	.word	0x08007c5d
 8007c88:	08007c5d 	.word	0x08007c5d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c5d 	.word	0x08007c5d
 8007c94:	08007c5d 	.word	0x08007c5d
 8007c98:	08007c5d 	.word	0x08007c5d
 8007c9c:	08007c5d 	.word	0x08007c5d
 8007ca0:	08007de5 	.word	0x08007de5
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007d9f 	.word	0x08007d9f
 8007cac:	08007c5d 	.word	0x08007c5d
 8007cb0:	08007c5d 	.word	0x08007c5d
 8007cb4:	08007e07 	.word	0x08007e07
 8007cb8:	08007c5d 	.word	0x08007c5d
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007c5d 	.word	0x08007c5d
 8007cc4:	08007c5d 	.word	0x08007c5d
 8007cc8:	08007da7 	.word	0x08007da7
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e09f      	b.n	8007e20 <_printf_i+0x1ec>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	0607      	lsls	r7, r0, #24
 8007ce6:	f103 0104 	add.w	r1, r3, #4
 8007cea:	6029      	str	r1, [r5, #0]
 8007cec:	d501      	bpl.n	8007cf2 <_printf_i+0xbe>
 8007cee:	681e      	ldr	r6, [r3, #0]
 8007cf0:	e003      	b.n	8007cfa <_printf_i+0xc6>
 8007cf2:	0646      	lsls	r6, r0, #25
 8007cf4:	d5fb      	bpl.n	8007cee <_printf_i+0xba>
 8007cf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	da03      	bge.n	8007d06 <_printf_i+0xd2>
 8007cfe:	232d      	movs	r3, #45	; 0x2d
 8007d00:	4276      	negs	r6, r6
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d06:	485a      	ldr	r0, [pc, #360]	; (8007e70 <_printf_i+0x23c>)
 8007d08:	230a      	movs	r3, #10
 8007d0a:	e012      	b.n	8007d32 <_printf_i+0xfe>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	1d19      	adds	r1, r3, #4
 8007d12:	6029      	str	r1, [r5, #0]
 8007d14:	0605      	lsls	r5, r0, #24
 8007d16:	d501      	bpl.n	8007d1c <_printf_i+0xe8>
 8007d18:	681e      	ldr	r6, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <_printf_i+0xee>
 8007d1c:	0641      	lsls	r1, r0, #25
 8007d1e:	d5fb      	bpl.n	8007d18 <_printf_i+0xe4>
 8007d20:	881e      	ldrh	r6, [r3, #0]
 8007d22:	4853      	ldr	r0, [pc, #332]	; (8007e70 <_printf_i+0x23c>)
 8007d24:	2f6f      	cmp	r7, #111	; 0x6f
 8007d26:	bf0c      	ite	eq
 8007d28:	2308      	moveq	r3, #8
 8007d2a:	230a      	movne	r3, #10
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d32:	6865      	ldr	r5, [r4, #4]
 8007d34:	60a5      	str	r5, [r4, #8]
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bfa2      	ittt	ge
 8007d3a:	6821      	ldrge	r1, [r4, #0]
 8007d3c:	f021 0104 	bicge.w	r1, r1, #4
 8007d40:	6021      	strge	r1, [r4, #0]
 8007d42:	b90e      	cbnz	r6, 8007d48 <_printf_i+0x114>
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	d04b      	beq.n	8007de0 <_printf_i+0x1ac>
 8007d48:	4615      	mov	r5, r2
 8007d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d52:	5dc7      	ldrb	r7, [r0, r7]
 8007d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d58:	4637      	mov	r7, r6
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	d9f4      	bls.n	8007d4a <_printf_i+0x116>
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d10b      	bne.n	8007d7c <_printf_i+0x148>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	07de      	lsls	r6, r3, #31
 8007d68:	d508      	bpl.n	8007d7c <_printf_i+0x148>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	bfde      	ittt	le
 8007d72:	2330      	movle	r3, #48	; 0x30
 8007d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d7c:	1b52      	subs	r2, r2, r5
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	f8cd a000 	str.w	sl, [sp]
 8007d84:	464b      	mov	r3, r9
 8007d86:	aa03      	add	r2, sp, #12
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fee4 	bl	8007b58 <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d14a      	bne.n	8007e2a <_printf_i+0x1f6>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	4833      	ldr	r0, [pc, #204]	; (8007e74 <_printf_i+0x240>)
 8007da8:	2778      	movs	r7, #120	; 0x78
 8007daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	061f      	lsls	r7, r3, #24
 8007db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db8:	d402      	bmi.n	8007dc0 <_printf_i+0x18c>
 8007dba:	065f      	lsls	r7, r3, #25
 8007dbc:	bf48      	it	mi
 8007dbe:	b2b6      	uxthmi	r6, r6
 8007dc0:	07df      	lsls	r7, r3, #31
 8007dc2:	bf48      	it	mi
 8007dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc8:	6029      	str	r1, [r5, #0]
 8007dca:	bf48      	it	mi
 8007dcc:	6023      	strmi	r3, [r4, #0]
 8007dce:	b91e      	cbnz	r6, 8007dd8 <_printf_i+0x1a4>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f023 0320 	bic.w	r3, r3, #32
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	2310      	movs	r3, #16
 8007dda:	e7a7      	b.n	8007d2c <_printf_i+0xf8>
 8007ddc:	4824      	ldr	r0, [pc, #144]	; (8007e70 <_printf_i+0x23c>)
 8007dde:	e7e4      	b.n	8007daa <_printf_i+0x176>
 8007de0:	4615      	mov	r5, r2
 8007de2:	e7bd      	b.n	8007d60 <_printf_i+0x12c>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	6826      	ldr	r6, [r4, #0]
 8007de8:	6961      	ldr	r1, [r4, #20]
 8007dea:	1d18      	adds	r0, r3, #4
 8007dec:	6028      	str	r0, [r5, #0]
 8007dee:	0635      	lsls	r5, r6, #24
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	d501      	bpl.n	8007df8 <_printf_i+0x1c4>
 8007df4:	6019      	str	r1, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <_printf_i+0x1ca>
 8007df8:	0670      	lsls	r0, r6, #25
 8007dfa:	d5fb      	bpl.n	8007df4 <_printf_i+0x1c0>
 8007dfc:	8019      	strh	r1, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	4615      	mov	r5, r2
 8007e04:	e7bc      	b.n	8007d80 <_printf_i+0x14c>
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	602a      	str	r2, [r5, #0]
 8007e0c:	681d      	ldr	r5, [r3, #0]
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	2100      	movs	r1, #0
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7f8 f9fc 	bl	8000210 <memchr>
 8007e18:	b108      	cbz	r0, 8007e1e <_printf_i+0x1ea>
 8007e1a:	1b40      	subs	r0, r0, r5
 8007e1c:	6060      	str	r0, [r4, #4]
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e28:	e7aa      	b.n	8007d80 <_printf_i+0x14c>
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	47d0      	blx	sl
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0ad      	beq.n	8007d94 <_printf_i+0x160>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	079b      	lsls	r3, r3, #30
 8007e3c:	d413      	bmi.n	8007e66 <_printf_i+0x232>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e7a6      	b.n	8007d98 <_printf_i+0x164>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	47d0      	blx	sl
 8007e54:	3001      	adds	r0, #1
 8007e56:	d09d      	beq.n	8007d94 <_printf_i+0x160>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	9903      	ldr	r1, [sp, #12]
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dcf2      	bgt.n	8007e4a <_printf_i+0x216>
 8007e64:	e7eb      	b.n	8007e3e <_printf_i+0x20a>
 8007e66:	2500      	movs	r5, #0
 8007e68:	f104 0619 	add.w	r6, r4, #25
 8007e6c:	e7f5      	b.n	8007e5a <_printf_i+0x226>
 8007e6e:	bf00      	nop
 8007e70:	080086a8 	.word	0x080086a8
 8007e74:	080086b9 	.word	0x080086b9

08007e78 <__sflush_r>:
 8007e78:	898a      	ldrh	r2, [r1, #12]
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	4605      	mov	r5, r0
 8007e80:	0710      	lsls	r0, r2, #28
 8007e82:	460c      	mov	r4, r1
 8007e84:	d458      	bmi.n	8007f38 <__sflush_r+0xc0>
 8007e86:	684b      	ldr	r3, [r1, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc05      	bgt.n	8007e98 <__sflush_r+0x20>
 8007e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc02      	bgt.n	8007e98 <__sflush_r+0x20>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d0f9      	beq.n	8007e92 <__sflush_r+0x1a>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ea4:	682f      	ldr	r7, [r5, #0]
 8007ea6:	6a21      	ldr	r1, [r4, #32]
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	d032      	beq.n	8007f12 <__sflush_r+0x9a>
 8007eac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	075a      	lsls	r2, r3, #29
 8007eb2:	d505      	bpl.n	8007ec0 <__sflush_r+0x48>
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	1ac0      	subs	r0, r0, r3
 8007eb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eba:	b10b      	cbz	r3, 8007ec0 <__sflush_r+0x48>
 8007ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ebe:	1ac0      	subs	r0, r0, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	d106      	bne.n	8007ee0 <__sflush_r+0x68>
 8007ed2:	6829      	ldr	r1, [r5, #0]
 8007ed4:	291d      	cmp	r1, #29
 8007ed6:	d82b      	bhi.n	8007f30 <__sflush_r+0xb8>
 8007ed8:	4a29      	ldr	r2, [pc, #164]	; (8007f80 <__sflush_r+0x108>)
 8007eda:	410a      	asrs	r2, r1
 8007edc:	07d6      	lsls	r6, r2, #31
 8007ede:	d427      	bmi.n	8007f30 <__sflush_r+0xb8>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	6062      	str	r2, [r4, #4]
 8007ee4:	04d9      	lsls	r1, r3, #19
 8007ee6:	6922      	ldr	r2, [r4, #16]
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	d504      	bpl.n	8007ef6 <__sflush_r+0x7e>
 8007eec:	1c42      	adds	r2, r0, #1
 8007eee:	d101      	bne.n	8007ef4 <__sflush_r+0x7c>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b903      	cbnz	r3, 8007ef6 <__sflush_r+0x7e>
 8007ef4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef8:	602f      	str	r7, [r5, #0]
 8007efa:	2900      	cmp	r1, #0
 8007efc:	d0c9      	beq.n	8007e92 <__sflush_r+0x1a>
 8007efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f02:	4299      	cmp	r1, r3
 8007f04:	d002      	beq.n	8007f0c <__sflush_r+0x94>
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7ff fb3e 	bl	8007588 <_free_r>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f10:	e7c0      	b.n	8007e94 <__sflush_r+0x1c>
 8007f12:	2301      	movs	r3, #1
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	1c41      	adds	r1, r0, #1
 8007f1a:	d1c8      	bne.n	8007eae <__sflush_r+0x36>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c5      	beq.n	8007eae <__sflush_r+0x36>
 8007f22:	2b1d      	cmp	r3, #29
 8007f24:	d001      	beq.n	8007f2a <__sflush_r+0xb2>
 8007f26:	2b16      	cmp	r3, #22
 8007f28:	d101      	bne.n	8007f2e <__sflush_r+0xb6>
 8007f2a:	602f      	str	r7, [r5, #0]
 8007f2c:	e7b1      	b.n	8007e92 <__sflush_r+0x1a>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e7ad      	b.n	8007e94 <__sflush_r+0x1c>
 8007f38:	690f      	ldr	r7, [r1, #16]
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	d0a9      	beq.n	8007e92 <__sflush_r+0x1a>
 8007f3e:	0793      	lsls	r3, r2, #30
 8007f40:	680e      	ldr	r6, [r1, #0]
 8007f42:	bf08      	it	eq
 8007f44:	694b      	ldreq	r3, [r1, #20]
 8007f46:	600f      	str	r7, [r1, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	eba6 0807 	sub.w	r8, r6, r7
 8007f50:	608b      	str	r3, [r1, #8]
 8007f52:	f1b8 0f00 	cmp.w	r8, #0
 8007f56:	dd9c      	ble.n	8007e92 <__sflush_r+0x1a>
 8007f58:	6a21      	ldr	r1, [r4, #32]
 8007f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f5c:	4643      	mov	r3, r8
 8007f5e:	463a      	mov	r2, r7
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b0      	blx	r6
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dc06      	bgt.n	8007f76 <__sflush_r+0xfe>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e78e      	b.n	8007e94 <__sflush_r+0x1c>
 8007f76:	4407      	add	r7, r0
 8007f78:	eba8 0800 	sub.w	r8, r8, r0
 8007f7c:	e7e9      	b.n	8007f52 <__sflush_r+0xda>
 8007f7e:	bf00      	nop
 8007f80:	dfbffffe 	.word	0xdfbffffe

08007f84 <_fflush_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b913      	cbnz	r3, 8007f94 <_fflush_r+0x10>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	4628      	mov	r0, r5
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	b118      	cbz	r0, 8007f9e <_fflush_r+0x1a>
 8007f96:	6a03      	ldr	r3, [r0, #32]
 8007f98:	b90b      	cbnz	r3, 8007f9e <_fflush_r+0x1a>
 8007f9a:	f7ff f8f3 	bl	8007184 <__sinit>
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f3      	beq.n	8007f8e <_fflush_r+0xa>
 8007fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d404      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fac:	0599      	lsls	r1, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb2:	f7ff fa7a 	bl	80074aa <__retarget_lock_acquire_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7ff ff5d 	bl	8007e78 <__sflush_r>
 8007fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc0:	07da      	lsls	r2, r3, #31
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	d4e4      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	d4e1      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fce:	f7ff fa6d 	bl	80074ac <__retarget_lock_release_recursive>
 8007fd2:	e7dd      	b.n	8007f90 <_fflush_r+0xc>

08007fd4 <__swbuf_r>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	4614      	mov	r4, r2
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b118      	cbz	r0, 8007fe6 <__swbuf_r+0x12>
 8007fde:	6a03      	ldr	r3, [r0, #32]
 8007fe0:	b90b      	cbnz	r3, 8007fe6 <__swbuf_r+0x12>
 8007fe2:	f7ff f8cf 	bl	8007184 <__sinit>
 8007fe6:	69a3      	ldr	r3, [r4, #24]
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	89a3      	ldrh	r3, [r4, #12]
 8007fec:	071a      	lsls	r2, r3, #28
 8007fee:	d525      	bpl.n	800803c <__swbuf_r+0x68>
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	b31b      	cbz	r3, 800803c <__swbuf_r+0x68>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	6922      	ldr	r2, [r4, #16]
 8007ff8:	1a98      	subs	r0, r3, r2
 8007ffa:	6963      	ldr	r3, [r4, #20]
 8007ffc:	b2f6      	uxtb	r6, r6
 8007ffe:	4283      	cmp	r3, r0
 8008000:	4637      	mov	r7, r6
 8008002:	dc04      	bgt.n	800800e <__swbuf_r+0x3a>
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f7ff ffbc 	bl	8007f84 <_fflush_r>
 800800c:	b9e0      	cbnz	r0, 8008048 <__swbuf_r+0x74>
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	3b01      	subs	r3, #1
 8008012:	60a3      	str	r3, [r4, #8]
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	6022      	str	r2, [r4, #0]
 800801a:	701e      	strb	r6, [r3, #0]
 800801c:	6962      	ldr	r2, [r4, #20]
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	429a      	cmp	r2, r3
 8008022:	d004      	beq.n	800802e <__swbuf_r+0x5a>
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	07db      	lsls	r3, r3, #31
 8008028:	d506      	bpl.n	8008038 <__swbuf_r+0x64>
 800802a:	2e0a      	cmp	r6, #10
 800802c:	d104      	bne.n	8008038 <__swbuf_r+0x64>
 800802e:	4621      	mov	r1, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f7ff ffa7 	bl	8007f84 <_fflush_r>
 8008036:	b938      	cbnz	r0, 8008048 <__swbuf_r+0x74>
 8008038:	4638      	mov	r0, r7
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f806 	bl	8008050 <__swsetup_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	d0d5      	beq.n	8007ff4 <__swbuf_r+0x20>
 8008048:	f04f 37ff 	mov.w	r7, #4294967295
 800804c:	e7f4      	b.n	8008038 <__swbuf_r+0x64>
	...

08008050 <__swsetup_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4b2a      	ldr	r3, [pc, #168]	; (80080fc <__swsetup_r+0xac>)
 8008054:	4605      	mov	r5, r0
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	460c      	mov	r4, r1
 800805a:	b118      	cbz	r0, 8008064 <__swsetup_r+0x14>
 800805c:	6a03      	ldr	r3, [r0, #32]
 800805e:	b90b      	cbnz	r3, 8008064 <__swsetup_r+0x14>
 8008060:	f7ff f890 	bl	8007184 <__sinit>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800806a:	0718      	lsls	r0, r3, #28
 800806c:	d422      	bmi.n	80080b4 <__swsetup_r+0x64>
 800806e:	06d9      	lsls	r1, r3, #27
 8008070:	d407      	bmi.n	8008082 <__swsetup_r+0x32>
 8008072:	2309      	movs	r3, #9
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	e034      	b.n	80080ec <__swsetup_r+0x9c>
 8008082:	0758      	lsls	r0, r3, #29
 8008084:	d512      	bpl.n	80080ac <__swsetup_r+0x5c>
 8008086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008088:	b141      	cbz	r1, 800809c <__swsetup_r+0x4c>
 800808a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800808e:	4299      	cmp	r1, r3
 8008090:	d002      	beq.n	8008098 <__swsetup_r+0x48>
 8008092:	4628      	mov	r0, r5
 8008094:	f7ff fa78 	bl	8007588 <_free_r>
 8008098:	2300      	movs	r3, #0
 800809a:	6363      	str	r3, [r4, #52]	; 0x34
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	2300      	movs	r3, #0
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f043 0308 	orr.w	r3, r3, #8
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	b94b      	cbnz	r3, 80080cc <__swsetup_r+0x7c>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c2:	d003      	beq.n	80080cc <__swsetup_r+0x7c>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f86f 	bl	80081aa <__smakebuf_r>
 80080cc:	89a0      	ldrh	r0, [r4, #12]
 80080ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080d2:	f010 0301 	ands.w	r3, r0, #1
 80080d6:	d00a      	beq.n	80080ee <__swsetup_r+0x9e>
 80080d8:	2300      	movs	r3, #0
 80080da:	60a3      	str	r3, [r4, #8]
 80080dc:	6963      	ldr	r3, [r4, #20]
 80080de:	425b      	negs	r3, r3
 80080e0:	61a3      	str	r3, [r4, #24]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	b943      	cbnz	r3, 80080f8 <__swsetup_r+0xa8>
 80080e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080ea:	d1c4      	bne.n	8008076 <__swsetup_r+0x26>
 80080ec:	bd38      	pop	{r3, r4, r5, pc}
 80080ee:	0781      	lsls	r1, r0, #30
 80080f0:	bf58      	it	pl
 80080f2:	6963      	ldrpl	r3, [r4, #20]
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	e7f4      	b.n	80080e2 <__swsetup_r+0x92>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e7f7      	b.n	80080ec <__swsetup_r+0x9c>
 80080fc:	20000064 	.word	0x20000064

08008100 <_realloc_r>:
 8008100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008104:	4680      	mov	r8, r0
 8008106:	4614      	mov	r4, r2
 8008108:	460e      	mov	r6, r1
 800810a:	b921      	cbnz	r1, 8008116 <_realloc_r+0x16>
 800810c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4611      	mov	r1, r2
 8008112:	f7fe bf1f 	b.w	8006f54 <_malloc_r>
 8008116:	b92a      	cbnz	r2, 8008124 <_realloc_r+0x24>
 8008118:	f7ff fa36 	bl	8007588 <_free_r>
 800811c:	4625      	mov	r5, r4
 800811e:	4628      	mov	r0, r5
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	f000 f8a0 	bl	8008268 <_malloc_usable_size_r>
 8008128:	4284      	cmp	r4, r0
 800812a:	4607      	mov	r7, r0
 800812c:	d802      	bhi.n	8008134 <_realloc_r+0x34>
 800812e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008132:	d812      	bhi.n	800815a <_realloc_r+0x5a>
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7fe ff0c 	bl	8006f54 <_malloc_r>
 800813c:	4605      	mov	r5, r0
 800813e:	2800      	cmp	r0, #0
 8008140:	d0ed      	beq.n	800811e <_realloc_r+0x1e>
 8008142:	42bc      	cmp	r4, r7
 8008144:	4622      	mov	r2, r4
 8008146:	4631      	mov	r1, r6
 8008148:	bf28      	it	cs
 800814a:	463a      	movcs	r2, r7
 800814c:	f7ff f9af 	bl	80074ae <memcpy>
 8008150:	4631      	mov	r1, r6
 8008152:	4640      	mov	r0, r8
 8008154:	f7ff fa18 	bl	8007588 <_free_r>
 8008158:	e7e1      	b.n	800811e <_realloc_r+0x1e>
 800815a:	4635      	mov	r5, r6
 800815c:	e7df      	b.n	800811e <_realloc_r+0x1e>

0800815e <__swhatbuf_r>:
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	460c      	mov	r4, r1
 8008162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008166:	2900      	cmp	r1, #0
 8008168:	b096      	sub	sp, #88	; 0x58
 800816a:	4615      	mov	r5, r2
 800816c:	461e      	mov	r6, r3
 800816e:	da0d      	bge.n	800818c <__swhatbuf_r+0x2e>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	bf0c      	ite	eq
 800817c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008180:	2340      	movne	r3, #64	; 0x40
 8008182:	2000      	movs	r0, #0
 8008184:	6031      	str	r1, [r6, #0]
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	b016      	add	sp, #88	; 0x58
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	466a      	mov	r2, sp
 800818e:	f000 f849 	bl	8008224 <_fstat_r>
 8008192:	2800      	cmp	r0, #0
 8008194:	dbec      	blt.n	8008170 <__swhatbuf_r+0x12>
 8008196:	9901      	ldr	r1, [sp, #4]
 8008198:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800819c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081a0:	4259      	negs	r1, r3
 80081a2:	4159      	adcs	r1, r3
 80081a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a8:	e7eb      	b.n	8008182 <__swhatbuf_r+0x24>

080081aa <__smakebuf_r>:
 80081aa:	898b      	ldrh	r3, [r1, #12]
 80081ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ae:	079d      	lsls	r5, r3, #30
 80081b0:	4606      	mov	r6, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	d507      	bpl.n	80081c6 <__smakebuf_r+0x1c>
 80081b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	2301      	movs	r3, #1
 80081c0:	6163      	str	r3, [r4, #20]
 80081c2:	b002      	add	sp, #8
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	ab01      	add	r3, sp, #4
 80081c8:	466a      	mov	r2, sp
 80081ca:	f7ff ffc8 	bl	800815e <__swhatbuf_r>
 80081ce:	9900      	ldr	r1, [sp, #0]
 80081d0:	4605      	mov	r5, r0
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7fe febe 	bl	8006f54 <_malloc_r>
 80081d8:	b948      	cbnz	r0, 80081ee <__smakebuf_r+0x44>
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	059a      	lsls	r2, r3, #22
 80081e0:	d4ef      	bmi.n	80081c2 <__smakebuf_r+0x18>
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	f043 0302 	orr.w	r3, r3, #2
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	e7e3      	b.n	80081b6 <__smakebuf_r+0xc>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	6020      	str	r0, [r4, #0]
 80081f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	6163      	str	r3, [r4, #20]
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	6120      	str	r0, [r4, #16]
 8008200:	b15b      	cbz	r3, 800821a <__smakebuf_r+0x70>
 8008202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008206:	4630      	mov	r0, r6
 8008208:	f000 f81e 	bl	8008248 <_isatty_r>
 800820c:	b128      	cbz	r0, 800821a <__smakebuf_r+0x70>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	431d      	orrs	r5, r3
 800821e:	81a5      	strh	r5, [r4, #12]
 8008220:	e7cf      	b.n	80081c2 <__smakebuf_r+0x18>
	...

08008224 <_fstat_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d07      	ldr	r5, [pc, #28]	; (8008244 <_fstat_r+0x20>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	f7f8 fcde 	bl	8000bf2 <_fstat>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d102      	bne.n	8008240 <_fstat_r+0x1c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	b103      	cbz	r3, 8008240 <_fstat_r+0x1c>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	20000984 	.word	0x20000984

08008248 <_isatty_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_isatty_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f8 fcdd 	bl	8000c12 <_isatty>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_isatty_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_isatty_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000984 	.word	0x20000984

08008268 <_malloc_usable_size_r>:
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f18      	subs	r0, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfbc      	itt	lt
 8008272:	580b      	ldrlt	r3, [r1, r0]
 8008274:	18c0      	addlt	r0, r0, r3
 8008276:	4770      	bx	lr

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
