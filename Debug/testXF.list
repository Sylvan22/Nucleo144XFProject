
testXF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f74  08008f74  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f7c  08008f7c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008f7c  08008f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  2000006c  08009000  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  08009000  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f8dd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008b0f  00000000  00000000  0005f9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  000684d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124a  00000000  00000000  00069d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b37f  00000000  00000000  0006af92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023848  00000000  00000000  00096311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e81e7  00000000  00000000  000b9b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000859c  00000000  00000000  001a1d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001aa2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b10 	.word	0x08008b10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008b10 	.word	0x08008b10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include <Board/CanInterface.h>

// ovewrite can rx callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	Can_Interface::getInstance()->CAN_available(hcan);// tell the can_interface that a can message is available
 80005c4:	f000 f812 	bl	80005ec <_ZN13Can_Interface11getInstanceEv>
 80005c8:	4603      	mov	r3, r0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f839 	bl	8000644 <_ZN13Can_Interface13CAN_availableEP19__CAN_HandleTypeDef>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <__tcf_0>:
Can_Interface* Can_Interface::getInstance() {
	static ::Can_Interface instance;
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4801      	ldr	r0, [pc, #4]	; (80005e8 <__tcf_0+0xc>)
 80005e2:	f000 f84b 	bl	800067c <_ZN13Can_InterfaceD1Ev>
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000088 	.word	0x20000088

080005ec <_ZN13Can_Interface11getInstanceEv>:
Can_Interface* Can_Interface::getInstance() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	static ::Can_Interface instance;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_ZN13Can_Interface11getInstanceEv+0x4c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f3bf 8f5b 	dmb	ish
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d013      	beq.n	8000632 <_ZN13Can_Interface11getInstanceEv+0x46>
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <_ZN13Can_Interface11getInstanceEv+0x4c>)
 800060c:	f006 fecc 	bl	80073a8 <__cxa_guard_acquire>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <_ZN13Can_Interface11getInstanceEv+0x46>
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <_ZN13Can_Interface11getInstanceEv+0x50>)
 8000622:	f000 f81b 	bl	800065c <_ZN13Can_InterfaceC1Ev>
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <_ZN13Can_Interface11getInstanceEv+0x54>)
 8000628:	f007 f8aa 	bl	8007780 <atexit>
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <_ZN13Can_Interface11getInstanceEv+0x4c>)
 800062e:	f006 fec7 	bl	80073c0 <__cxa_guard_release>
	return &instance;
 8000632:	4b02      	ldr	r3, [pc, #8]	; (800063c <_ZN13Can_Interface11getInstanceEv+0x50>)
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000088 	.word	0x20000088
 8000640:	080005dd 	.word	0x080005dd

08000644 <_ZN13Can_Interface13CAN_availableEP19__CAN_HandleTypeDef>:
}

void Can_Interface::sendCanMsg(uint32_t id, uint32_t dlc, uint8_t *data) {
}

void Can_Interface::CAN_available(CAN_HandleTypeDef *hcan) {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <_ZN13Can_InterfaceC1Ev>:

CAN_MESSAGE Can_Interface::getCanMsg() {

}

Can_Interface::Can_Interface() {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <_ZN13Can_InterfaceC1Ev+0x1c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	08008c90 	.word	0x08008c90

0800067c <_ZN13Can_InterfaceD1Ev>:

Can_Interface::~Can_Interface() {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <_ZN13Can_InterfaceD1Ev+0x1c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	08008c90 	.word	0x08008c90

0800069c <_ZN13Can_InterfaceD0Ev>:
Can_Interface::~Can_Interface() {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
}
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffe9 	bl	800067c <_ZN13Can_InterfaceD1Ev>
 80006aa:	2104      	movs	r1, #4
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f006 fe79 	bl	80073a4 <_ZdlPvj>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fc40 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f818 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f90e 	bl	80008e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 f8b4 	bl	8000838 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d0:	f000 f8dc 	bl	800088c <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80006d4:	f000 f87c 	bl	80007d0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  trace_initialize();
 80006d8:	f004 f83e 	bl	8004758 <trace_initialize>

  trace_out("Initializing XF...");
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0x38>)
 80006de:	f004 f841 	bl	8004764 <trace_out>
  XF_initialize(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f006 fe2d 	bl	8007342 <XF_initialize>
  Factory_initialize();
 80006e8:	f003 ff70 	bl	80045cc <Factory_initialize>
  Factory_build();
 80006ec:	f003 ff74 	bl	80045d8 <Factory_build>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x34>
 80006f2:	bf00      	nop
 80006f4:	08008b28 	.word	0x08008b28

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f007 fa4e 	bl	8007ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <SystemClock_Config+0xd0>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemClock_Config+0xd4>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800076c:	23a8      	movs	r3, #168	; 0xa8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f002 faa1 	bl	8002cc8 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800078c:	f000 f95a 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fc16 	bl	8001fe0 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ba:	f000 f943 	bl	8000a44 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_CAN1_Init+0x60>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_CAN1_Init+0x64>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_CAN1_Init+0x60>)
 80007dc:	2210      	movs	r2, #16
 80007de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_CAN1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_CAN1_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_CAN1_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_CAN1_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_CAN1_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_CAN1_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_CAN1_Init+0x60>)
 800081e:	f000 fc27 	bl	8001070 <HAL_CAN_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000828:	f000 f90c 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000090 	.word	0x20000090
 8000834:	40006400 	.word	0x40006400

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART3_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000870:	f002 fcc8 	bl	8003204 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f8e3 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000b8 	.word	0x200000b8
 8000888:	40004800 	.word	0x40004800

0800088c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2206      	movs	r2, #6
 800089c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	f001 fa3d 	bl	8001d4e <HAL_PCD_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f8b3 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000fc 	.word	0x200000fc

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a44      	ldr	r2, [pc, #272]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <MX_GPIO_Init+0x14c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0x14c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0x14c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009ae:	f001 f9b5 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_GPIO_Init+0x154>)
 80009b8:	f001 f9b0 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481b      	ldr	r0, [pc, #108]	; (8000a40 <MX_GPIO_Init+0x158>)
 80009d4:	f001 f80e 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_GPIO_Init+0x150>)
 80009f2:	f000 ffff 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x154>)
 8000a0e:	f000 fff1 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0x154>)
 8000a26:	f000 ffe5 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40021800 	.word	0x40021800
 8000a40:	40020800 	.word	0x40020800

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_CAN_MspInit+0x94>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d133      	bne.n	8000b2a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_CAN_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000afa:	2303      	movs	r3, #3
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b0a:	2309      	movs	r3, #9
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <HAL_CAN_MspInit+0x9c>)
 8000b16:	f000 ff6d 	bl	80019f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2014      	movs	r0, #20
 8000b20:	f000 feab 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b24:	2014      	movs	r0, #20
 8000b26:	f000 fec4 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40006400 	.word	0x40006400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bac:	2307      	movs	r3, #7
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb8:	f000 ff1c 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004800 	.word	0x40004800
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a0      	sub	sp, #128	; 0x80
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	225c      	movs	r2, #92	; 0x5c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 ffd9 	bl	8007ba8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfe:	d14e      	bne.n	8000c9e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c06:	2300      	movs	r3, #0
 8000c08:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fb00 	bl	8002214 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff ff13 	bl	8000a44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c54:	4619      	mov	r1, r3
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <HAL_PCD_MspInit+0xdc>)
 8000c58:	f000 fecc 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480e      	ldr	r0, [pc, #56]	; (8000cac <HAL_PCD_MspInit+0xdc>)
 8000c72:	f000 febf 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6353      	str	r3, [r2, #52]	; 0x34
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_PCD_MspInit+0xd8>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3780      	adds	r7, #128	; 0x80
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b598      	push	{r3, r4, r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f974 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000d00:	f005 fa39 	bl	8006176 <XF_isRunning>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00e      	beq.n	8000d28 <SysTick_Handler+0x30>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000d0a:	f000 f981 	bl	8001010 <HAL_GetTick>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f005 fa24 	bl	800615c <XF_tickIntervalInMilliseconds>
 8000d14:	4603      	mov	r3, r0
 8000d16:	fbb4 f2f3 	udiv	r2, r4, r3
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	1ae3      	subs	r3, r4, r3
  if (XF_isRunning() &&
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <SysTick_Handler+0x30>
  {
      XF_tick();
 8000d24:	f005 fa00 	bl	8006128 <XF_tick>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd98      	pop	{r3, r4, r7, pc}

08000d2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <CAN1_RX0_IRQHandler+0x10>)
 8000d32:	f000 fa98 	bl	8001266 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000090 	.word	0x20000090

08000d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_kill>:

int _kill(int pid, int sig)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d5a:	f006 ffc7 	bl	8007cec <__errno>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2216      	movs	r2, #22
 8000d62:	601a      	str	r2, [r3, #0]
  return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_exit>:

void _exit (int status)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffe7 	bl	8000d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d82:	e7fe      	b.n	8000d82 <_exit+0x12>

08000d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e009      	b.n	8000de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf1      	blt.n	8000dd0 <_write+0x12>
  }
  return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_close>:

int _close(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_isatty>:

int _isatty(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f006 ff2c 	bl	8007cec <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20020000 	.word	0x20020000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000608 	.word	0x20000608
 8000ec8:	20000a50 	.word	0x20000a50

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f006 feeb 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fbcb 	bl	80006bc <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f34:	08008f94 	.word	0x08008f94
  ldr r2, =_sbss
 8000f38:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f3c:	20000a4c 	.word	0x20000a4c

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fc79 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd6a 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc91 	bl	80018ce <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 fc59 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	2000060c 	.word	0x2000060c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000060c 	.word	0x2000060c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd06 	bl	8000aa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb4 	bl	8001010 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb0 	bl	8001010 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0e5      	beq.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0202 	bic.w	r2, r2, #2
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff8e 	bl	8001010 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8a 	bl	8001010 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e5      	bne.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b08a      	sub	sp, #40	; 0x28
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d07c      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d023      	beq.n	80012fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f983 	bl	80015d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80012ce:	e016      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	e00c      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	e002      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f989 	bl	8001610 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d024      	beq.n	8001352 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001310:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f963 	bl	80015e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001322:	e016      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e00c      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e002      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f969 	bl	8001624 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d024      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f943 	bl	80015fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001376:	e016      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e00c      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	e002      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f949 	bl	8001638 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2210      	movs	r2, #16
 80013c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00b      	beq.n	80013ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2208      	movs	r2, #8
 80013e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f930 	bl	800164c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f8d9 	bl	80005bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001424:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2210      	movs	r2, #16
 800142c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2208      	movs	r2, #8
 8001448:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f912 	bl	8001674 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f8f9 	bl	8001660 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2210      	movs	r2, #16
 8001488:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f8fc 	bl	8001688 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2208      	movs	r2, #8
 80014aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8f5 	bl	800169c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d07b      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d072      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001520:	2b00      	cmp	r3, #0
 8001522:	d043      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001534:	2b60      	cmp	r3, #96	; 0x60
 8001536:	d02b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x32a>
 8001538:	2b60      	cmp	r3, #96	; 0x60
 800153a:	d82e      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 800153c:	2b50      	cmp	r3, #80	; 0x50
 800153e:	d022      	beq.n	8001586 <HAL_CAN_IRQHandler+0x320>
 8001540:	2b50      	cmp	r3, #80	; 0x50
 8001542:	d82a      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 8001544:	2b40      	cmp	r3, #64	; 0x40
 8001546:	d019      	beq.n	800157c <HAL_CAN_IRQHandler+0x316>
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d826      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 800154c:	2b30      	cmp	r3, #48	; 0x30
 800154e:	d010      	beq.n	8001572 <HAL_CAN_IRQHandler+0x30c>
 8001550:	2b30      	cmp	r3, #48	; 0x30
 8001552:	d822      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 8001554:	2b10      	cmp	r3, #16
 8001556:	d002      	beq.n	800155e <HAL_CAN_IRQHandler+0x2f8>
 8001558:	2b20      	cmp	r3, #32
 800155a:	d005      	beq.n	8001568 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800155c:	e01d      	b.n	800159a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001566:	e019      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001570:	e014      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800157a:	e00f      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001584:	e00a      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800158e:	e005      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001598:	e000      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            break;
 800159a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2204      	movs	r2, #4
 80015b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f872 	bl	80016b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff29 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff3e 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff31 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_DMA_Start_IT+0x26>
 8001908:	2302      	movs	r3, #2
 800190a:	e040      	b.n	800198e <HAL_DMA_Start_IT+0xa8>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d12f      	bne.n	8001980 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f82e 	bl	8001996 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	223f      	movs	r2, #63	; 0x3f
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0216 	orr.w	r2, r2, #22
 8001954:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0208 	orr.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e005      	b.n	800198c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019b2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b40      	cmp	r3, #64	; 0x40
 80019c2:	d108      	bne.n	80019d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019d4:	e007      	b.n	80019e6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e165      	b.n	8001cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8154 	bne.w	8001cd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d017      	beq.n	8001ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80ae 	beq.w	8001cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <HAL_GPIO_Init+0x300>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b96:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_GPIO_Init+0x308>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d025      	beq.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_GPIO_Init+0x30c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_GPIO_Init+0x216>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_GPIO_Init+0x310>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x212>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x314>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x20e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x318>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x20a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x31c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x206>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x320>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x202>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x21c>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f ae96 	bls.w	8001a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d50:	b08f      	sub	sp, #60	; 0x3c
 8001d52:	af0a      	add	r7, sp, #40	; 0x28
 8001d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e116      	b.n	8001f8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe ff28 	bl	8000bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2203      	movs	r2, #3
 8001d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 f81f 	bl	8003de2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	687e      	ldr	r6, [r7, #4]
 8001dac:	466d      	mov	r5, sp
 8001dae:	f106 0410 	add.w	r4, r6, #16
 8001db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dc2:	1d33      	adds	r3, r6, #4
 8001dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f001 ffaa 	bl	8003d20 <USB_CoreInit>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0d7      	b.n	8001f8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 f80d 	bl	8003e04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e04a      	b.n	8001e86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	333d      	adds	r3, #61	; 0x3d
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333c      	adds	r3, #60	; 0x3c
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	b298      	uxth	r0, r3
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3344      	adds	r3, #68	; 0x44
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3340      	adds	r3, #64	; 0x40
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3348      	adds	r3, #72	; 0x48
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	334c      	adds	r3, #76	; 0x4c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3354      	adds	r3, #84	; 0x54
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3af      	bcc.n	8001df0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e044      	b.n	8001f20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3b5      	bcc.n	8001e96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	687e      	ldr	r6, [r7, #4]
 8001f32:	466d      	mov	r5, sp
 8001f34:	f106 0410 	add.w	r4, r6, #16
 8001f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f48:	1d33      	adds	r3, r6, #4
 8001f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4c:	6838      	ldr	r0, [r7, #0]
 8001f4e:	f001 ffa5 	bl	8003e9c <USB_DevInit>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e014      	b.n	8001f8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d102      	bne.n	8001f82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f80a 	bl	8001f96 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 f963 	bl	8004252 <USB_DevDisconnect>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	f043 0303 	orr.w	r3, r3, #3
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cc      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90c      	bls.n	800201c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d044      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4934      	ldr	r1, [pc, #208]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7fe ff9e 	bl	8001010 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe ff9a 	bl	8001010 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e04f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20c      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002166:	f000 fb7f 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fefe 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	08008c98 	.word	0x08008c98
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a9b      	lsrs	r3, r3, #10
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08008ca8 	.word	0x08008ca8

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021f0:	f7ff ffdc 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0b5b      	lsrs	r3, r3, #13
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	08008ca8 	.word	0x08008ca8

08002214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d010      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002252:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	496c      	ldr	r1, [pc, #432]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800226a:	2301      	movs	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800227c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002280:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	4960      	ldr	r1, [pc, #384]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002298:	2301      	movs	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4955      	ldr	r1, [pc, #340]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c6:	d101      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	4946      	ldr	r1, [pc, #280]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d101      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002304:	2301      	movs	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808a 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800233e:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a33      	ldr	r2, [pc, #204]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800234a:	f7fe fe61 	bl	8001010 <HAL_GetTick>
 800234e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe fe5d 	bl	8001010 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e278      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002378:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02f      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	429a      	cmp	r2, r3
 800238c:	d028      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002396:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d114      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe fe2b 	bl	8001010 <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fe27 	bl	8001010 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e240      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ec:	d114      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002402:	4902      	ldr	r1, [pc, #8]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
 8002408:	e00c      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470e40 	.word	0x42470e40
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800241e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002422:	6093      	str	r3, [r2, #8]
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	4944      	ldr	r1, [pc, #272]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002432:	4313      	orrs	r3, r2
 8002434:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800244a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	4937      	ldr	r1, [pc, #220]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	492e      	ldr	r1, [pc, #184]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d011      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	4926      	ldr	r1, [pc, #152]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ba:	d101      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024bc:	2301      	movs	r3, #1
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	491a      	ldr	r1, [pc, #104]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fc:	4911      	ldr	r1, [pc, #68]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800250e:	2301      	movs	r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002520:	f040 80ff 	bne.w	8002722 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800252a:	f7fe fd71 	bl	8001010 <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002530:	e00e      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002532:	f7fe fd6d 	bl	8001010 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d907      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e188      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002544:	40023800 	.word	0x40023800
 8002548:	424711e0 	.word	0x424711e0
 800254c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ea      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002578:	2b00      	cmp	r3, #0
 800257a:	d028      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d124      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002584:	4b71      	ldr	r3, [pc, #452]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	3301      	adds	r3, #1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002596:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	431a      	orrs	r2, r3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	071b      	lsls	r3, r3, #28
 80025c6:	4961      	ldr	r1, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d035      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f8:	d130      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	3301      	adds	r3, #1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002612:	0f1b      	lsrs	r3, r3, #28
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	019b      	lsls	r3, r3, #6
 8002624:	431a      	orrs	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	071b      	lsls	r3, r3, #28
 800263c:	4943      	ldr	r1, [pc, #268]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264a:	f023 021f 	bic.w	r2, r3, #31
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	493d      	ldr	r1, [pc, #244]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d029      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002670:	d124      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	0f1b      	lsrs	r3, r3, #28
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	019b      	lsls	r3, r3, #6
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	071b      	lsls	r3, r3, #28
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	4917      	ldr	r1, [pc, #92]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fe fc88 	bl	8001010 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002704:	f7fe fc84 	bl	8001010 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e09f      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 8095 	bne.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fc6e 	bl	8001010 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002736:	e00f      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002738:	f7fe fc6a 	bl	8001010 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d908      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e085      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	42470068 	.word	0x42470068
 8002754:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002764:	d0e8      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02b      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	2b00      	cmp	r3, #0
 800278c:	d127      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	4928      	ldr	r1, [pc, #160]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	3b01      	subs	r3, #1
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01d      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f2:	d118      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	0e1b      	lsrs	r3, r3, #24
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	019b      	lsls	r3, r3, #6
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4910      	ldr	r1, [pc, #64]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800282c:	f7fe fbf0 	bl	8001010 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002834:	f7fe fbec 	bl	8001010 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e007      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002852:	d1ef      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	; 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	42470070 	.word	0x42470070

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b0ae      	sub	sp, #184	; 0xb8
 800286e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288e:	4bcb      	ldr	r3, [pc, #812]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b0c      	cmp	r3, #12
 8002898:	f200 8206 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x440>
 800289c:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	08002ca9 	.word	0x08002ca9
 80028ac:	08002ca9 	.word	0x08002ca9
 80028b0:	08002ca9 	.word	0x08002ca9
 80028b4:	080028e1 	.word	0x080028e1
 80028b8:	08002ca9 	.word	0x08002ca9
 80028bc:	08002ca9 	.word	0x08002ca9
 80028c0:	08002ca9 	.word	0x08002ca9
 80028c4:	080028e9 	.word	0x080028e9
 80028c8:	08002ca9 	.word	0x08002ca9
 80028cc:	08002ca9 	.word	0x08002ca9
 80028d0:	08002ca9 	.word	0x08002ca9
 80028d4:	08002ad9 	.word	0x08002ad9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4bb9      	ldr	r3, [pc, #740]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x358>)
 80028da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80028de:	e1e7      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e0:	4bb8      	ldr	r3, [pc, #736]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028e6:	e1e3      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4bb4      	ldr	r3, [pc, #720]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f4:	4bb1      	ldr	r3, [pc, #708]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d071      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002900:	4bae      	ldr	r3, [pc, #696]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800290c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002926:	4622      	mov	r2, r4
 8002928:	462b      	mov	r3, r5
 800292a:	f04f 0000 	mov.w	r0, #0
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	0159      	lsls	r1, r3, #5
 8002934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002938:	0150      	lsls	r0, r2, #5
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4621      	mov	r1, r4
 8002940:	1a51      	subs	r1, r2, r1
 8002942:	6439      	str	r1, [r7, #64]	; 0x40
 8002944:	4629      	mov	r1, r5
 8002946:	eb63 0301 	sbc.w	r3, r3, r1
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002958:	4649      	mov	r1, r9
 800295a:	018b      	lsls	r3, r1, #6
 800295c:	4641      	mov	r1, r8
 800295e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002962:	4641      	mov	r1, r8
 8002964:	018a      	lsls	r2, r1, #6
 8002966:	4641      	mov	r1, r8
 8002968:	1a51      	subs	r1, r2, r1
 800296a:	63b9      	str	r1, [r7, #56]	; 0x38
 800296c:	4649      	mov	r1, r9
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002980:	4649      	mov	r1, r9
 8002982:	00cb      	lsls	r3, r1, #3
 8002984:	4641      	mov	r1, r8
 8002986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298a:	4641      	mov	r1, r8
 800298c:	00ca      	lsls	r2, r1, #3
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	4603      	mov	r3, r0
 8002994:	4622      	mov	r2, r4
 8002996:	189b      	adds	r3, r3, r2
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
 800299a:	462b      	mov	r3, r5
 800299c:	460a      	mov	r2, r1
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029b0:	4629      	mov	r1, r5
 80029b2:	024b      	lsls	r3, r1, #9
 80029b4:	4621      	mov	r1, r4
 80029b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ba:	4621      	mov	r1, r4
 80029bc:	024a      	lsls	r2, r1, #9
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029d4:	f7fd fc74 	bl	80002c0 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4613      	mov	r3, r2
 80029de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029e2:	e067      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80029f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029fe:	2300      	movs	r3, #0
 8002a00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a06:	4622      	mov	r2, r4
 8002a08:	462b      	mov	r3, r5
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	0159      	lsls	r1, r3, #5
 8002a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a18:	0150      	lsls	r0, r2, #5
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4621      	mov	r1, r4
 8002a20:	1a51      	subs	r1, r2, r1
 8002a22:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a24:	4629      	mov	r1, r5
 8002a26:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a38:	4649      	mov	r1, r9
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a42:	4641      	mov	r1, r8
 8002a44:	018a      	lsls	r2, r1, #6
 8002a46:	4641      	mov	r1, r8
 8002a48:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a66:	4692      	mov	sl, r2
 8002a68:	469b      	mov	fp, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	462b      	mov	r3, r5
 8002a74:	eb4b 0303 	adc.w	r3, fp, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa0:	677a      	str	r2, [r7, #116]	; 0x74
 8002aa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002aa6:	f7fd fc0b 	bl	80002c0 <__aeabi_uldivmod>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ad6:	e0eb      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d06b      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x354>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	663b      	str	r3, [r7, #96]	; 0x60
 8002b04:	2300      	movs	r3, #0
 8002b06:	667b      	str	r3, [r7, #100]	; 0x64
 8002b08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	462b      	mov	r3, r5
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0159      	lsls	r1, r3, #5
 8002b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1e:	0150      	lsls	r0, r2, #5
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4621      	mov	r1, r4
 8002b26:	1a51      	subs	r1, r2, r1
 8002b28:	61b9      	str	r1, [r7, #24]
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b3e:	4659      	mov	r1, fp
 8002b40:	018b      	lsls	r3, r1, #6
 8002b42:	4651      	mov	r1, sl
 8002b44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b48:	4651      	mov	r1, sl
 8002b4a:	018a      	lsls	r2, r1, #6
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	ebb2 0801 	subs.w	r8, r2, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	eb63 0901 	sbc.w	r9, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6c:	4690      	mov	r8, r2
 8002b6e:	4699      	mov	r9, r3
 8002b70:	4623      	mov	r3, r4
 8002b72:	eb18 0303 	adds.w	r3, r8, r3
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	462b      	mov	r3, r5
 8002b7a:	eb49 0303 	adc.w	r3, r9, r3
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	024b      	lsls	r3, r1, #9
 8002b90:	4621      	mov	r1, r4
 8002b92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b96:	4621      	mov	r1, r4
 8002b98:	024a      	lsls	r2, r1, #9
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ba6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ba8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bac:	f7fd fb88 	bl	80002c0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bba:	e065      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x420>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8002bda:	2300      	movs	r3, #0
 8002bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bde:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002be2:	4642      	mov	r2, r8
 8002be4:	464b      	mov	r3, r9
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	4649      	mov	r1, r9
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c14:	4659      	mov	r1, fp
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4651      	mov	r1, sl
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4651      	mov	r1, sl
 8002c24:	1a54      	subs	r4, r2, r1
 8002c26:	4659      	mov	r1, fp
 8002c28:	eb63 0501 	sbc.w	r5, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c70:	2200      	movs	r2, #0
 8002c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c7a:	f7fd fb21 	bl	80002c0 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4613      	mov	r3, r2
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0f1b      	lsrs	r3, r3, #28
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	37b8      	adds	r7, #184	; 0xb8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e28d      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8083 	beq.w	8002dee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ce8:	4b94      	ldr	r3, [pc, #592]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d019      	beq.n	8002d28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cf4:	4b91      	ldr	r3, [pc, #580]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d00:	4b8e      	ldr	r3, [pc, #568]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d0c:	d00c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d112      	bne.n	8002d40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d05b      	beq.n	8002dec <HAL_RCC_OscConfig+0x124>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d157      	bne.n	8002dec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e25a      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x90>
 8002d4a:	4b7c      	ldr	r3, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e01d      	b.n	8002d94 <HAL_RCC_OscConfig+0xcc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0xb4>
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a72      	ldr	r2, [pc, #456]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0xcc>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6e      	ldr	r2, [pc, #440]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6b      	ldr	r2, [pc, #428]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f938 	bl	8001010 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe f934 	bl	8001010 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e21f      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0xdc>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f924 	bl	8001010 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe f920 	bl	8001010 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e20b      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x104>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d06f      	beq.n	8002eda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dfa:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e06:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x186>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1d3      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x278>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe f8cd 	bl	8001010 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f8c9 	bl	8001010 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1b4      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_OscConfig+0x278>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f8ac 	bl	8001010 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe f8a8 	bl	8001010 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e193      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f88c 	bl	8001010 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe f888 	bl	8001010 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e173      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x234>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f875 	bl	8001010 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe f871 	bl	8001010 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e15c      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b83      	ldr	r3, [pc, #524]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b7c      	ldr	r3, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f831 	bl	8001010 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe f82d 	bl	8001010 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e118      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x31e>
 8002fd8:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x358>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x340>
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a60      	ldr	r2, [pc, #384]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x358>
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a59      	ldr	r2, [pc, #356]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a56      	ldr	r2, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fd fff2 	bl	8001010 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fd ffee 	bl	8001010 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0d7      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x368>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fd ffdc 	bl	8001010 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd ffd8 	bl	8001010 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0c1      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b40      	ldr	r3, [pc, #256]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80ad 	beq.w	80031f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d060      	beq.n	8003168 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d145      	bne.n	800313a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_RCC_OscConfig+0x4b4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd ffac 	bl	8001010 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd ffa8 	bl	8001010 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e093      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x4b4>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fd ff7d 	bl	8001010 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd ff79 	bl	8001010 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e064      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x452>
 8003138:	e05c      	b.n	80031f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x4b4>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd ff66 	bl	8001010 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ff62 	bl	8001010 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04d      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x480>
 8003166:	e045      	b.n	80031f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e040      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCC_OscConfig+0x538>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d030      	beq.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d129      	bne.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d122      	bne.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d119      	bne.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10f      	bne.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800

08003204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e03f      	b.n	8003296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fc88 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 faf5 	bl	8003838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800325c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800326c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800327c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d17c      	bne.n	80033b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_UART_Transmit+0x2c>
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e075      	b.n	80033ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_UART_Transmit+0x3e>
 80032d8:	2302      	movs	r3, #2
 80032da:	e06e      	b.n	80033ba <HAL_UART_Transmit+0x11c>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	; 0x21
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f2:	f7fd fe8d 	bl	8001010 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330c:	d108      	bne.n	8003320 <HAL_UART_Transmit+0x82>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e003      	b.n	8003328 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003330:	e02a      	b.n	8003388 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2180      	movs	r1, #128	; 0x80
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f982 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e036      	b.n	80033ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3302      	adds	r3, #2
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e007      	b.n	800337a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	3301      	adds	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1cf      	bne.n	8003332 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f952 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e006      	b.n	80033ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d165      	bne.n	80034aa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_UART_Transmit_DMA+0x26>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e05e      	b.n	80034ac <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Transmit_DMA+0x38>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e057      	b.n	80034ac <HAL_UART_Transmit_DMA+0xe8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2221      	movs	r2, #33	; 0x21
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_UART_Transmit_DMA+0xf0>)
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_UART_Transmit_DMA+0xf4>)
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <HAL_UART_Transmit_DMA+0xf8>)
 800343a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3304      	adds	r3, #4
 8003458:	461a      	mov	r2, r3
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	f7fe fa43 	bl	80018e6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	617b      	str	r3, [r7, #20]
   return(result);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3314      	adds	r3, #20
 8003490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003492:	627a      	str	r2, [r7, #36]	; 0x24
 8003494:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e5      	bne.n	8003472 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3730      	adds	r7, #48	; 0x30
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	080034fd 	.word	0x080034fd
 80034b8:	08003597 	.word	0x08003597
 80034bc:	080035b3 	.word	0x080035b3

080034c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b090      	sub	sp, #64	; 0x40
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d137      	bne.n	8003588 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	2200      	movs	r2, #0
 800351c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800351e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	623b      	str	r3, [r7, #32]
   return(result);
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800353e:	633a      	str	r2, [r7, #48]	; 0x30
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	60fb      	str	r3, [r7, #12]
   return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003572:	61fa      	str	r2, [r7, #28]
 8003574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	69b9      	ldr	r1, [r7, #24]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	617b      	str	r3, [r7, #20]
   return(result);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003586:	e002      	b.n	800358e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003588:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800358a:	f7ff ff99 	bl	80034c0 <HAL_UART_TxCpltCallback>
}
 800358e:	bf00      	nop
 8003590:	3740      	adds	r7, #64	; 0x40
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ff95 	bl	80034d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b21      	cmp	r3, #33	; 0x21
 80035e4:	d108      	bne.n	80035f8 <UART_DMAError+0x46>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f000 f895 	bl	8003722 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b22      	cmp	r3, #34	; 0x22
 8003618:	d108      	bne.n	800362c <UART_DMAError+0x7a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003626:	68b8      	ldr	r0, [r7, #8]
 8003628:	f000 f8a3 	bl	8003772 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f043 0210 	orr.w	r2, r3, #16
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003638:	68b8      	ldr	r0, [r7, #8]
 800363a:	f7ff ff55 	bl	80034e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b090      	sub	sp, #64	; 0x40
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e050      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d04c      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	f7fd fcd3 	bl	8001010 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003672:	429a      	cmp	r2, r3
 8003674:	d241      	bcs.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003696:	637a      	str	r2, [r7, #52]	; 0x34
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800369c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ca:	623a      	str	r2, [r7, #32]
 80036cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d09f      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3740      	adds	r7, #64	; 0x40
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b089      	sub	sp, #36	; 0x24
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	60bb      	str	r3, [r7, #8]
   return(result);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	61ba      	str	r2, [r7, #24]
 800374c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	613b      	str	r3, [r7, #16]
   return(result);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003766:	bf00      	nop
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003772:	b480      	push	{r7}
 8003774:	b095      	sub	sp, #84	; 0x54
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800379a:	643a      	str	r2, [r7, #64]	; 0x40
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e5      	bne.n	800377a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d119      	bne.n	800381e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800380a:	61ba      	str	r2, [r7, #24]
 800380c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	613b      	str	r3, [r7, #16]
   return(result);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800382c:	bf00      	nop
 800382e:	3754      	adds	r7, #84	; 0x54
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b0c0      	sub	sp, #256	; 0x100
 800383e:	af00      	add	r7, sp, #0
 8003840:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	68d9      	ldr	r1, [r3, #12]
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	ea40 0301 	orr.w	r3, r0, r1
 8003860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	431a      	orrs	r2, r3
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003890:	f021 010c 	bic.w	r1, r1, #12
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800389e:	430b      	orrs	r3, r1
 80038a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	6999      	ldr	r1, [r3, #24]
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	ea40 0301 	orr.w	r3, r0, r1
 80038be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b8f      	ldr	r3, [pc, #572]	; (8003b04 <UART_SetConfig+0x2cc>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d005      	beq.n	80038d8 <UART_SetConfig+0xa0>
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <UART_SetConfig+0x2d0>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d104      	bne.n	80038e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7fe fc88 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 80038dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e0:	e003      	b.n	80038ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7fe fc6f 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80038e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f4:	f040 810c 	bne.w	8003b10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003902:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003906:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800390a:	4622      	mov	r2, r4
 800390c:	462b      	mov	r3, r5
 800390e:	1891      	adds	r1, r2, r2
 8003910:	65b9      	str	r1, [r7, #88]	; 0x58
 8003912:	415b      	adcs	r3, r3
 8003914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003916:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800391a:	4621      	mov	r1, r4
 800391c:	eb12 0801 	adds.w	r8, r2, r1
 8003920:	4629      	mov	r1, r5
 8003922:	eb43 0901 	adc.w	r9, r3, r1
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800393a:	4690      	mov	r8, r2
 800393c:	4699      	mov	r9, r3
 800393e:	4623      	mov	r3, r4
 8003940:	eb18 0303 	adds.w	r3, r8, r3
 8003944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003948:	462b      	mov	r3, r5
 800394a:	eb49 0303 	adc.w	r3, r9, r3
 800394e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800395e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003966:	460b      	mov	r3, r1
 8003968:	18db      	adds	r3, r3, r3
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
 800396c:	4613      	mov	r3, r2
 800396e:	eb42 0303 	adc.w	r3, r2, r3
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
 8003974:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003978:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800397c:	f7fc fca0 	bl	80002c0 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	011c      	lsls	r4, r3, #4
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003998:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800399c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039a8:	415b      	adcs	r3, r3
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b0:	4641      	mov	r1, r8
 80039b2:	eb12 0a01 	adds.w	sl, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0b01 	adc.w	fp, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d0:	4692      	mov	sl, r2
 80039d2:	469b      	mov	fp, r3
 80039d4:	4643      	mov	r3, r8
 80039d6:	eb1a 0303 	adds.w	r3, sl, r3
 80039da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039de:	464b      	mov	r3, r9
 80039e0:	eb4b 0303 	adc.w	r3, fp, r3
 80039e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039fc:	460b      	mov	r3, r1
 80039fe:	18db      	adds	r3, r3, r3
 8003a00:	643b      	str	r3, [r7, #64]	; 0x40
 8003a02:	4613      	mov	r3, r2
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a12:	f7fc fc55 	bl	80002c0 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2264      	movs	r2, #100	; 0x64
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	1acb      	subs	r3, r1, r3
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003a34:	fba3 2302 	umull	r2, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a40:	441c      	add	r4, r3
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6339      	str	r1, [r7, #48]	; 0x30
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a98:	464b      	mov	r3, r9
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ab4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ab8:	460b      	mov	r3, r1
 8003aba:	18db      	adds	r3, r3, r3
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	4613      	mov	r3, r2
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ace:	f7fc fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	3332      	adds	r3, #50	; 0x32
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 0207 	and.w	r2, r3, #7
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4422      	add	r2, r4
 8003afe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b00:	e106      	b.n	8003d10 <UART_SetConfig+0x4d8>
 8003b02:	bf00      	nop
 8003b04:	40011000 	.word	0x40011000
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b22:	4642      	mov	r2, r8
 8003b24:	464b      	mov	r3, r9
 8003b26:	1891      	adds	r1, r2, r2
 8003b28:	6239      	str	r1, [r7, #32]
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b32:	4641      	mov	r1, r8
 8003b34:	1854      	adds	r4, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0501 	adc.w	r5, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	00eb      	lsls	r3, r5, #3
 8003b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4a:	00e2      	lsls	r2, r4, #3
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	18e3      	adds	r3, r4, r3
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b58:	464b      	mov	r3, r9
 8003b5a:	eb45 0303 	adc.w	r3, r5, r3
 8003b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b7e:	4629      	mov	r1, r5
 8003b80:	008b      	lsls	r3, r1, #2
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b88:	4621      	mov	r1, r4
 8003b8a:	008a      	lsls	r2, r1, #2
 8003b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b90:	f7fc fb96 	bl	80002c0 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	011c      	lsls	r4, r3, #4
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	61b9      	str	r1, [r7, #24]
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6139      	str	r1, [r7, #16]
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	008b      	lsls	r3, r1, #2
 8003c20:	4641      	mov	r1, r8
 8003c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c26:	4641      	mov	r1, r8
 8003c28:	008a      	lsls	r2, r1, #2
 8003c2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c2e:	f7fc fb47 	bl	80002c0 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2264      	movs	r2, #100	; 0x64
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	1acb      	subs	r3, r1, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c58:	441c      	add	r4, r3
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	673b      	str	r3, [r7, #112]	; 0x70
 8003c62:	677a      	str	r2, [r7, #116]	; 0x74
 8003c64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	1891      	adds	r1, r2, r2
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	415b      	adcs	r3, r3
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c78:	4641      	mov	r1, r8
 8003c7a:	1851      	adds	r1, r2, r1
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	4649      	mov	r1, r9
 8003c80:	414b      	adcs	r3, r1
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c90:	4659      	mov	r1, fp
 8003c92:	00cb      	lsls	r3, r1, #3
 8003c94:	4651      	mov	r1, sl
 8003c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	00ca      	lsls	r2, r1, #3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003caa:	464b      	mov	r3, r9
 8003cac:	460a      	mov	r2, r1
 8003cae:	eb42 0303 	adc.w	r3, r2, r3
 8003cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbe:	667a      	str	r2, [r7, #100]	; 0x64
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ccc:	4649      	mov	r1, r9
 8003cce:	008b      	lsls	r3, r1, #2
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	008a      	lsls	r2, r1, #2
 8003cda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cde:	f7fc faef 	bl	80002c0 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	2164      	movs	r1, #100	; 0x64
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	3332      	adds	r3, #50	; 0x32
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4422      	add	r2, r4
 8003d0e:	609a      	str	r2, [r3, #8]
}
 8003d10:	bf00      	nop
 8003d12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d16:	46bd      	mov	sp, r7
 8003d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d20:	b084      	sub	sp, #16
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	f107 001c 	add.w	r0, r7, #28
 8003d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d122      	bne.n	8003d7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa9c 	bl	80042b0 <USB_CoreReset>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e01a      	b.n	8003db4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa90 	bl	80042b0 <USB_CoreReset>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
 8003da6:	e005      	b.n	8003db4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d10b      	bne.n	8003dd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f043 0206 	orr.w	r2, r3, #6
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dde:	b004      	add	sp, #16
 8003de0:	4770      	bx	lr

08003de2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0201 	bic.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d115      	bne.n	8003e52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7fd f8f8 	bl	8001028 <HAL_Delay>
      ms++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa28 	bl	8004294 <USB_GetMode>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d01e      	beq.n	8003e88 <USB_SetCurrentMode+0x84>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b31      	cmp	r3, #49	; 0x31
 8003e4e:	d9f0      	bls.n	8003e32 <USB_SetCurrentMode+0x2e>
 8003e50:	e01a      	b.n	8003e88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d115      	bne.n	8003e84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f7fd f8df 	bl	8001028 <HAL_Delay>
      ms++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa0f 	bl	8004294 <USB_GetMode>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <USB_SetCurrentMode+0x84>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b31      	cmp	r3, #49	; 0x31
 8003e80:	d9f0      	bls.n	8003e64 <USB_SetCurrentMode+0x60>
 8003e82:	e001      	b.n	8003e88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e005      	b.n	8003e94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b32      	cmp	r3, #50	; 0x32
 8003e8c:	d101      	bne.n	8003e92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e009      	b.n	8003ed0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3340      	adds	r3, #64	; 0x40
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b0e      	cmp	r3, #14
 8003ed4:	d9f2      	bls.n	8003ebc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11c      	bne.n	8003f16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e005      	b.n	8003f22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f34:	4619      	mov	r1, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	680b      	ldr	r3, [r1, #0]
 8003f40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10c      	bne.n	8003f62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f965 	bl	8004220 <USB_SetDevSpeed>
 8003f56:	e008      	b.n	8003f6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f58:	2101      	movs	r1, #1
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f960 	bl	8004220 <USB_SetDevSpeed>
 8003f60:	e003      	b.n	8003f6a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f62:	2103      	movs	r1, #3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f95b 	bl	8004220 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8f3 	bl	8004158 <USB_FlushTxFifo>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f91f 	bl	80041c0 <USB_FlushRxFifo>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f92:	461a      	mov	r2, r3
 8003f94:	2300      	movs	r3, #0
 8003f96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e043      	b.n	800403e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fcc:	d118      	bne.n	8004000 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e013      	b.n	8004012 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e008      	b.n	8004012 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3301      	adds	r3, #1
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d3b7      	bcc.n	8003fb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e043      	b.n	80040d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004062:	d118      	bne.n	8004096 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e013      	b.n	80040a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e008      	b.n	80040a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	461a      	mov	r2, r3
 80040c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3301      	adds	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d3b7      	bcc.n	800404c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f043 0210 	orr.w	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <USB_DevInit+0x2b8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f043 0208 	orr.w	r2, r3, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800412e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004150:	b004      	add	sp, #16
 8004152:	4770      	bx	lr
 8004154:	803c3800 	.word	0x803c3800

08004158 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3301      	adds	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a13      	ldr	r2, [pc, #76]	; (80041bc <USB_FlushTxFifo+0x64>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e01b      	b.n	80041b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	daf2      	bge.n	8004166 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	019b      	lsls	r3, r3, #6
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <USB_FlushTxFifo+0x64>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e006      	b.n	80041b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d0f0      	beq.n	8004190 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	00030d40 	.word	0x00030d40

080041c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a11      	ldr	r2, [pc, #68]	; (800421c <USB_FlushRxFifo+0x5c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e018      	b.n	8004210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	daf2      	bge.n	80041cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2210      	movs	r2, #16
 80041ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a08      	ldr	r2, [pc, #32]	; (800421c <USB_FlushRxFifo+0x5c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e006      	b.n	8004210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d0f0      	beq.n	80041f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	00030d40 	.word	0x00030d40

08004220 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800426c:	f023 0303 	bic.w	r3, r3, #3
 8004270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0301 	and.w	r3, r3, #1
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <USB_CoreReset+0x64>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e01b      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	daf2      	bge.n	80042bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <USB_CoreReset+0x64>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d0f0      	beq.n	80042e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	00030d40 	.word	0x00030d40

08004318 <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	791b      	ldrb	r3, [r3, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #id_ identifying the event in the behaviors context.
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : status_(eventStatus) {}
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fd05 	bl	8004d84 <_ZN10XFBehavior13getDispatcherEv>
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	681c      	ldr	r4, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	47a0      	blx	r4
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <_ZNK14StateMachine0117getRepeatIntervalEv>:
    ~StateMachine01() override;

protected:
    XFEventStatus processEvent() override;								///< Remplementation from XFBehavior

    inline int getRepeatInterval() const { return repeatInterval_; }	///< Returns repeat interval. Accessor for #_repeatInterval.
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZNK14StateMachine017getTextB5cxx11Ev>:
    inline string getText() const { return text_; }						///< Returns text. Accessor for #_text.
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f003 f967 	bl	800768c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 * Constructor
 *
 * \param repeatInterval Interval in milliseconds used in state machine.
 * \param text Text to display by the state machine.
 */
StateMachine01::StateMachine01(int repeatInterval, string text)
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 : repeatInterval_(repeatInterval),
   text_(text)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc2e 	bl	8004c38 <_ZN10XFBehaviorC1Ev>
 80043dc:	4a09      	ldr	r2, [pc, #36]	; (8004404 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]
 : repeatInterval_(repeatInterval),
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	611a      	str	r2, [r3, #16]
   text_(text)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f003 f94c 	bl	800768c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
{
	currentState_ = STATE_INITIAL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	731a      	strb	r2, [r3, #12]
}
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08008cb8 	.word	0x08008cb8

08004408 <_ZN14StateMachine01D1Ev>:

StateMachine01::~StateMachine01()
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <_ZN14StateMachine01D1Ev+0x2c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3314      	adds	r3, #20
 800441a:	4618      	mov	r0, r3
 800441c:	f003 f8a8 	bl	8007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fc1e 	bl	8004c64 <_ZN10XFBehaviorD1Ev>
{

}
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	08008cb8 	.word	0x08008cb8

08004438 <_ZN14StateMachine01D0Ev>:
StateMachine01::~StateMachine01()
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
}
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ffe1 	bl	8004408 <_ZN14StateMachine01D1Ev>
 8004446:	212c      	movs	r1, #44	; 0x2c
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f002 ffab 	bl	80073a4 <_ZdlPvj>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZN14StateMachine0112processEventEv>:

XFEventStatus StateMachine01::processEvent()
{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	b091      	sub	sp, #68	; 0x44
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	eEventStatus eventStatus = XFEventStatus::Unknown;
 8004460:	2300      	movs	r3, #0
 8004462:	72fb      	strb	r3, [r7, #11]
    switch (currentState_)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7b1b      	ldrb	r3, [r3, #12]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d002      	beq.n	8004472 <_ZN14StateMachine0112processEventEv+0x1a>
 800446c:	2b02      	cmp	r3, #2
 800446e:	d026      	beq.n	80044be <_ZN14StateMachine0112processEventEv+0x66>
				eventStatus = XFEventStatus::Consumed;
			}
		}
		break;
	default:
		break;
 8004470:	e07b      	b.n	800456a <_ZN14StateMachine0112processEventEv+0x112>
			if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fc79 	bl	8004d6c <_ZNK10XFBehavior15getCurrentEventEv>
 800447a:	4603      	mov	r3, r0
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff4b 	bl	8004318 <_ZNK7XFEvent12getEventTypeEv>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d068      	beq.n	8004564 <_ZN14StateMachine0112processEventEv+0x10c>
				GEN(XFDefaultTransition());
 8004492:	687d      	ldr	r5, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	681c      	ldr	r4, [r3, #0]
 800449c:	2010      	movs	r0, #16
 800449e:	f002 ff92 	bl	80073c6 <_Znwj>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461e      	mov	r6, r3
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 fd44 	bl	8004f34 <_ZN19XFDefaultTransitionC1Ev>
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	47a0      	blx	r4
				currentState_ = STATE_SAY_HELLO;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	731a      	strb	r2, [r3, #12]
				eventStatus = XFEventStatus::Consumed;
 80044b8:	2301      	movs	r3, #1
 80044ba:	72fb      	strb	r3, [r7, #11]
		break;
 80044bc:	e052      	b.n	8004564 <_ZN14StateMachine0112processEventEv+0x10c>
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fc53 	bl	8004d6c <_ZNK10XFBehavior15getCurrentEventEv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff25 	bl	8004318 <_ZNK7XFEvent12getEventTypeEv>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d015      	beq.n	8004500 <_ZN14StateMachine0112processEventEv+0xa8>
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fc48 	bl	8004d6c <_ZNK10XFBehavior15getCurrentEventEv>
 80044dc:	4603      	mov	r3, r0
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff ff1a 	bl	8004318 <_ZNK7XFEvent12getEventTypeEv>
 80044e4:	4603      	mov	r3, r0
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d10c      	bne.n	8004504 <_ZN14StateMachine0112processEventEv+0xac>
				 getCurrentTimeout()->getId() == Timeout_SAY_HELLO_id))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fc54 	bl	8004d9a <_ZN10XFBehavior17getCurrentTimeoutEv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff1b 	bl	8004330 <_ZNK7XFEvent5getIdEv>
 80044fa:	4603      	mov	r3, r0
				(getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <_ZN14StateMachine0112processEventEv+0xac>
			if (getCurrentEvent()->getEventType() == XFEvent::DefaultTransition ||
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <_ZN14StateMachine0112processEventEv+0xae>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02e      	beq.n	8004568 <_ZN14StateMachine0112processEventEv+0x110>
					Trace::out(getText()+"\r");
 800450a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff49 	bl	80043a8 <_ZNK14StateMachine017getTextB5cxx11Ev>
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <_ZN14StateMachine0112processEventEv+0x12c>)
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f831 	bl	8004588 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f96c 	bl	8004808 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	4618      	mov	r0, r3
 8004536:	f003 f81b 	bl	8007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800453a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453e:	4618      	mov	r0, r3
 8004540:	f003 f816 	bl	8007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				scheduleTimeout(Timeout_SAY_HELLO_id, getRepeatInterval());
 8004544:	687c      	ldr	r4, [r7, #4]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff22 	bl	8004390 <_ZNK14StateMachine0117getRepeatIntervalEv>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	2101      	movs	r1, #1
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff ff08 	bl	8004368 <_ZN10XFBehavior15scheduleTimeoutEii>
				currentState_ = STATE_SAY_HELLO;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	731a      	strb	r2, [r3, #12]
				eventStatus = XFEventStatus::Consumed;
 800455e:	2301      	movs	r3, #1
 8004560:	72fb      	strb	r3, [r7, #11]
		break;
 8004562:	e001      	b.n	8004568 <_ZN14StateMachine0112processEventEv+0x110>
		break;
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <_ZN14StateMachine0112processEventEv+0x112>
		break;
 8004568:	bf00      	nop
	}

	return eventStatus;
 800456a:	7afa      	ldrb	r2, [r7, #11]
 800456c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fee8 	bl	8004348 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8004578:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
}
 800457c:	4618      	mov	r0, r3
 800457e:	3744      	adds	r7, #68	; 0x44
 8004580:	46bd      	mov	sp, r7
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004584:	08008b3c 	.word	0x08008b3c

08004588 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f003 f83c 	bl	8007614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f809 	bl	80045b6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4619      	mov	r1, r3
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f002 ffc7 	bl	800753c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <Factory_initialize>:
#include "xf/xf.h"
#include "trace/trace.h"
#include "testfactory01.h"

void Factory_initialize()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
    TestFactory01::initialize();
 80045d0:	f000 f808 	bl	80045e4 <_ZN13TestFactory0110initializeEv>
}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <Factory_build>:

void Factory_build()
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
    TestFactory01::build();
 80045dc:	f000 f80a 	bl	80045f4 <_ZN13TestFactory015buildEv>
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN13TestFactory0110initializeEv>:
{
}

// static
void TestFactory01::initialize()
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <_ZN13TestFactory015buildEv>:

// static
void TestFactory01::build()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
    Trace::out("Starting test1...");
 80045f8:	4806      	ldr	r0, [pc, #24]	; (8004614 <_ZN13TestFactory015buildEv+0x20>)
 80045fa:	f000 f937 	bl	800486c <_ZN5Trace3outEPKcz>
    Trace::out("---------------------");
 80045fe:	4806      	ldr	r0, [pc, #24]	; (8004618 <_ZN13TestFactory015buildEv+0x24>)
 8004600:	f000 f934 	bl	800486c <_ZN5Trace3outEPKcz>

    // Start state machine
    task01_.startBehavior();
 8004604:	4805      	ldr	r0, [pc, #20]	; (800461c <_ZN13TestFactory015buildEv+0x28>)
 8004606:	f000 fb5b 	bl	8004cc0 <_ZN10XFBehavior13startBehaviorEv>
    task02_.startBehavior();
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <_ZN13TestFactory015buildEv+0x2c>)
 800460c:	f000 fb58 	bl	8004cc0 <_ZN10XFBehavior13startBehaviorEv>
}
 8004610:	bf00      	nop
 8004612:	bd80      	pop	{r7, pc}
 8004614:	08008b40 	.word	0x08008b40
 8004618:	08008b54 	.word	0x08008b54
 800461c:	20000610 	.word	0x20000610
 8004620:	2000063c 	.word	0x2000063c

08004624 <_Z41__static_initialization_and_destruction_0ii>:
 8004624:	b580      	push	{r7, lr}
 8004626:	b090      	sub	sp, #64	; 0x40
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d142      	bne.n	80046ba <_Z41__static_initialization_and_destruction_0ii+0x96>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463a:	4293      	cmp	r3, r2
 800463c:	d13d      	bne.n	80046ba <_Z41__static_initialization_and_destruction_0ii+0x96>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 800463e:	f107 0320 	add.w	r3, r7, #32
 8004642:	4618      	mov	r0, r3
 8004644:	f002 fed0 	bl	80073e8 <_ZNSaIcEC1Ev>
 8004648:	f107 0220 	add.w	r2, r7, #32
 800464c:	f107 0308 	add.w	r3, r7, #8
 8004650:	4923      	ldr	r1, [pc, #140]	; (80046e0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004652:	4618      	mov	r0, r3
 8004654:	f003 f84e 	bl	80076f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	461a      	mov	r2, r3
 800465e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004662:	4820      	ldr	r0, [pc, #128]	; (80046e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004664:	f7ff feb0 	bl	80043c8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f002 ff7f 	bl	8007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004672:	f107 0320 	add.w	r3, r7, #32
 8004676:	4618      	mov	r0, r3
 8004678:	f002 feb7 	bl	80073ea <_ZNSaIcED1Ev>
StateMachine01 TestFactory01::task02_(500, "Echo");
 800467c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004680:	4618      	mov	r0, r3
 8004682:	f002 feb1 	bl	80073e8 <_ZNSaIcEC1Ev>
 8004686:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800468a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468e:	4916      	ldr	r1, [pc, #88]	; (80046e8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004690:	4618      	mov	r0, r3
 8004692:	f003 f82f 	bl	80076f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469a:	461a      	mov	r2, r3
 800469c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046a0:	4812      	ldr	r0, [pc, #72]	; (80046ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80046a2:	f7ff fe91 	bl	80043c8 <_ZN14StateMachine01C1EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80046a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 ff60 	bl	8007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80046b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046b4:	4618      	mov	r0, r3
 80046b6:	f002 fe98 	bl	80073ea <_ZNSaIcED1Ev>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <_Z41__static_initialization_and_destruction_0ii+0xb2>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d105      	bne.n	80046d6 <_Z41__static_initialization_and_destruction_0ii+0xb2>
 80046ca:	4808      	ldr	r0, [pc, #32]	; (80046ec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80046cc:	f7ff fe9c 	bl	8004408 <_ZN14StateMachine01D1Ev>
StateMachine01 TestFactory01::task01_(1000, "Say Hello");
 80046d0:	4804      	ldr	r0, [pc, #16]	; (80046e4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80046d2:	f7ff fe99 	bl	8004408 <_ZN14StateMachine01D1Ev>
}
 80046d6:	bf00      	nop
 80046d8:	3740      	adds	r7, #64	; 0x40
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08008b6c 	.word	0x08008b6c
 80046e4:	20000610 	.word	0x20000610
 80046e8:	08008b78 	.word	0x08008b78
 80046ec:	2000063c 	.word	0x2000063c

080046f0 <_GLOBAL__sub_I_Factory_initialize>:
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7ff ff93 	bl	8004624 <_Z41__static_initialization_and_destruction_0ii>
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_GLOBAL__sub_D_Factory_initialize>:
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
 8004704:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004708:	2000      	movs	r0, #0
 800470a:	f7ff ff8b 	bl	8004624 <_Z41__static_initialization_and_destruction_0ii>
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZL10traceMutexv>:
static int32_t checkStringEnding(char * str, uint32_t len);

static XFMutex * mutex = XFMutex::create();

static interface::XFMutex & traceMutex()
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
    return *mutex;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <_ZL10traceMutexv+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	200007f8 	.word	0x200007f8

08004728 <_ZL14traceMutexLockv>:

static void traceMutexLock()
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
    traceMutex().lock();
 800472c:	f7ff fff0 	bl	8004710 <_ZL10traceMutexv>
 8004730:	4603      	mov	r3, r0
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	3208      	adds	r2, #8
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	4790      	blx	r2
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZL16traceMutexUnlockv>:

static void traceMutexUnlock()
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
    traceMutex().unlock();
 8004744:	f7ff ffe4 	bl	8004710 <_ZL10traceMutexv>
 8004748:	4603      	mov	r3, r0
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	320c      	adds	r2, #12
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	4790      	blx	r2
}
 8004754:	bf00      	nop
 8004756:	bd80      	pop	{r7, pc}

08004758 <trace_initialize>:

void trace_initialize()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
    Trace::initialize();
 800475c:	f000 f826 	bl	80047ac <_ZN5Trace10initializeEv>
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}

08004764 <trace_out>:

void trace_out(const char * const format , ...)
{
 8004764:	b40f      	push	{r0, r1, r2, r3}
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
    va_list args;

    // Format string
    va_start(args, format);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	607b      	str	r3, [r7, #4]
    vsprintf(strTrace, format, args);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6939      	ldr	r1, [r7, #16]
 8004776:	480b      	ldr	r0, [pc, #44]	; (80047a4 <trace_out+0x40>)
 8004778:	f003 f9f2 	bl	8007b60 <vsiprintf>
    va_end(args);

    checkStringEnding(strTrace, strlen(strTrace));
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <trace_out+0x40>)
 800477e:	f7fb fd97 	bl	80002b0 <strlen>
 8004782:	4603      	mov	r3, r0
 8004784:	4619      	mov	r1, r3
 8004786:	4807      	ldr	r0, [pc, #28]	; (80047a4 <trace_out+0x40>)
 8004788:	f000 f81a 	bl	80047c0 <_ZL17checkStringEndingPcm>

    traceUart.write(strTrace);
 800478c:	2200      	movs	r2, #0
 800478e:	4905      	ldr	r1, [pc, #20]	; (80047a4 <trace_out+0x40>)
 8004790:	4805      	ldr	r0, [pc, #20]	; (80047a8 <trace_out+0x44>)
 8004792:	f000 f994 	bl	8004abe <_ZN4Uart5writeEPKcj>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	200006f8 	.word	0x200006f8
 80047a8:	20000668 	.word	0x20000668

080047ac <_ZN5Trace10initializeEv>:

//static
void Trace::initialize()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	traceUart.initialize(TRACE_UART_BAUD_RATE);
 80047b0:	4802      	ldr	r0, [pc, #8]	; (80047bc <_ZN5Trace10initializeEv+0x10>)
 80047b2:	f000 f979 	bl	8004aa8 <_ZN4Uart10initializeEv>
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000668 	.word	0x20000668

080047c0 <_ZL17checkStringEndingPcm>:

static int32_t checkStringEnding(char * str, uint32_t len)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	if (!len)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <_ZL17checkStringEndingPcm+0x14>
	{
		return 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e015      	b.n	8004800 <_ZL17checkStringEndingPcm+0x40>
	}

	if (str[len-1] != '\n')
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b0a      	cmp	r3, #10
 80047e0:	d00a      	beq.n	80047f8 <_ZL17checkStringEndingPcm+0x38>
		str[len] = '\r';
		str[len+1] = '\n';
		str[len+2] = '\0';
#else
		// Add "\n" at the end of the string
		str[len] = '\n';
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4413      	add	r3, r2
 80047e8:	220a      	movs	r2, #10
 80047ea:	701a      	strb	r2, [r3, #0]
		str[len+1] = '\0';
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
			memmove(&str[len], &str[len-1], 2);
			str[len-1] = '\r';
		}
	}
#endif // TRACE_ADD_CRLF_SEQU
	return strlen(str);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fb fd59 	bl	80002b0 <strlen>
 80047fe:	4603      	mov	r3, r0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Trace::out(string str)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	traceMutexLock();
 8004810:	f7ff ff8a 	bl	8004728 <_ZL14traceMutexLockv>
	if (str[str.length()-1] != '\n')
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f002 feb1 	bl	800757c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800481a:	4603      	mov	r3, r0
 800481c:	3b01      	subs	r3, #1
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f002 fead 	bl	8007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004826:	4603      	mov	r3, r0
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b0a      	cmp	r3, #10
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
	{
		str += '\n';
 8004838:	210a      	movs	r1, #10
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f002 fec2 	bl	80075c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	if(str[str.length()-2] != '\r'){
		str.insert(str.length()-1, "\r");
	}
#endif // TRACE_ADD_CRLF_SEQU

	traceUart.write(str.data(), str.length());
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f002 fefd 	bl	8007640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8004846:	4604      	mov	r4, r0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f002 fe97 	bl	800757c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	4621      	mov	r1, r4
 8004854:	4804      	ldr	r0, [pc, #16]	; (8004868 <_ZN5Trace3outENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8004856:	f000 f932 	bl	8004abe <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 800485a:	f7ff ff71 	bl	8004740 <_ZL16traceMutexUnlockv>
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	20000668 	.word	0x20000668

0800486c <_ZN5Trace3outEPKcz>:

void Trace::out(const char * format, ...)
{
 800486c:	b40f      	push	{r0, r1, r2, r3}
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
	traceMutexLock();
 8004874:	f7ff ff58 	bl	8004728 <_ZL14traceMutexLockv>
	va_list args;

	// Format string
	va_start(args, format);
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	607b      	str	r3, [r7, #4]
	vsprintf(strTrace, format, args);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6939      	ldr	r1, [r7, #16]
 8004882:	480c      	ldr	r0, [pc, #48]	; (80048b4 <_ZN5Trace3outEPKcz+0x48>)
 8004884:	f003 f96c 	bl	8007b60 <vsiprintf>
	va_end(args);

	checkStringEnding(strTrace, strlen(strTrace));
 8004888:	480a      	ldr	r0, [pc, #40]	; (80048b4 <_ZN5Trace3outEPKcz+0x48>)
 800488a:	f7fb fd11 	bl	80002b0 <strlen>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
 8004892:	4808      	ldr	r0, [pc, #32]	; (80048b4 <_ZN5Trace3outEPKcz+0x48>)
 8004894:	f7ff ff94 	bl	80047c0 <_ZL17checkStringEndingPcm>

	traceUart.write(strTrace);
 8004898:	2200      	movs	r2, #0
 800489a:	4906      	ldr	r1, [pc, #24]	; (80048b4 <_ZN5Trace3outEPKcz+0x48>)
 800489c:	4806      	ldr	r0, [pc, #24]	; (80048b8 <_ZN5Trace3outEPKcz+0x4c>)
 800489e:	f000 f90e 	bl	8004abe <_ZN4Uart5writeEPKcj>
	traceMutexUnlock();
 80048a2:	f7ff ff4d 	bl	8004740 <_ZL16traceMutexUnlockv>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr
 80048b4:	200006f8 	.word	0x200006f8
 80048b8:	20000668 	.word	0x20000668

080048bc <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10f      	bne.n	80048ec <_Z41__static_initialization_and_destruction_0ii+0x30>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10a      	bne.n	80048ec <_Z41__static_initialization_and_destruction_0ii+0x30>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 80048d6:	2300      	movs	r3, #0
 80048d8:	4a0c      	ldr	r2, [pc, #48]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80048da:	2100      	movs	r1, #0
 80048dc:	480c      	ldr	r0, [pc, #48]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80048de:	f000 f877 	bl	80049d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
static XFMutex * mutex = XFMutex::create();
 80048e2:	f002 fd01 	bl	80072e8 <_ZN9interface7XFMutex6createEv>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d102      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x46>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 80048fc:	4804      	ldr	r0, [pc, #16]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80048fe:	f000 f8b3 	bl	8004a68 <_ZN4UartD1Ev>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200000b8 	.word	0x200000b8
 8004910:	20000668 	.word	0x20000668
 8004914:	200007f8 	.word	0x200007f8

08004918 <_GLOBAL__sub_I_trace_initialize>:
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
 800491c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff ffcb 	bl	80048bc <_Z41__static_initialization_and_destruction_0ii>
 8004926:	bd80      	pop	{r7, pc}

08004928 <_GLOBAL__sub_D_trace_initialize>:
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
 800492c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004930:	2000      	movs	r0, #0
 8004932:	f7ff ffc3 	bl	80048bc <_Z41__static_initialization_and_destruction_0ii>
 8004936:	bd80      	pop	{r7, pc}

08004938 <_Z5inISRv>:

volatile int bInISR = 0;
volatile int bOMEnterCriticalRegionNested = 0;

int inISR()
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <_Z5inISRv+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200007fc 	.word	0x200007fc

08004950 <_Z13enterCriticalv>:

void enterCritical()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8004954:	f7ff fff0 	bl	8004938 <_Z5inISRv>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <_Z13enterCriticalv+0x38>
	{
		if (!bOMEnterCriticalRegionNested)
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <_Z13enterCriticalv+0x3c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <_Z13enterCriticalv+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800497a:	b672      	cpsid	i
}
 800497c:	bf00      	nop
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 800497e:	4b03      	ldr	r3, [pc, #12]	; (800498c <_Z13enterCriticalv+0x3c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a01      	ldr	r2, [pc, #4]	; (800498c <_Z13enterCriticalv+0x3c>)
 8004986:	6013      	str	r3, [r2, #0]
	}
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000800 	.word	0x20000800

08004990 <_Z12exitCriticalv>:

void exitCritical()
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8004994:	f7ff ffd0 	bl	8004938 <_Z5inISRv>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <_Z12exitCriticalv+0x38>
	{
		bOMEnterCriticalRegionNested--;
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <_Z12exitCriticalv+0x3c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <_Z12exitCriticalv+0x3c>)
 80049b0:	6013      	str	r3, [r2, #0]

		if (!bOMEnterCriticalRegionNested)
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <_Z12exitCriticalv+0x3c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <_Z12exitCriticalv+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 80049c4:	b662      	cpsie	i
}
 80049c6:	bf00      	nop
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000800 	.word	0x20000800

080049d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	461a      	mov	r2, r3
 80049dc:	460b      	mov	r3, r1
 80049de:	72fb      	strb	r3, [r7, #11]
 80049e0:	4613      	mov	r3, r2
 80049e2:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 80049e4:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
 : _uartNbr(-1),
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	711a      	strb	r2, [r3, #4]
   _pUartHandle(NULL),
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
   _bTxDMA(bTxDMA)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	7aba      	ldrb	r2, [r7, #10]
 80049fa:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 80049fc:	7afb      	ldrb	r3, [r7, #11]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d905      	bls.n	8004a0e <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8004a06:	2111      	movs	r1, #17
 8004a08:	4814      	ldr	r0, [pc, #80]	; (8004a5c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004a0a:	f002 fe9b 	bl	8007744 <__assert_func>

	if (uartNbr < UART_COUNT)
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d817      	bhi.n	8004a44 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 8004a14:	7afb      	ldrb	r3, [r7, #11]
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	490f      	ldr	r1, [pc, #60]	; (8004a60 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	7afa      	ldrb	r2, [r7, #11]
 8004a2e:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	e005      	b.n	8004a44 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 8004a3a:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8004a3c:	211f      	movs	r1, #31
 8004a3e:	4807      	ldr	r0, [pc, #28]	; (8004a5c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8004a40:	f002 fe80 	bl	8007744 <__assert_func>
        }
    }
}
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	08008ce0 	.word	0x08008ce0
 8004a54:	08008b80 	.word	0x08008b80
 8004a58:	08008b98 	.word	0x08008b98
 8004a5c:	08008bd0 	.word	0x08008bd0
 8004a60:	20000804 	.word	0x20000804
 8004a64:	08008bfc 	.word	0x08008bfc

08004a68 <_ZN4UartD1Ev>:

Uart::~Uart()
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <_ZN4UartD1Ev+0x1c>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
{

}
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	08008ce0 	.word	0x08008ce0

08004a88 <_ZN4UartD0Ev>:
Uart::~Uart()
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
}
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ffe9 	bl	8004a68 <_ZN4UartD1Ev>
 8004a96:	2190      	movs	r1, #144	; 0x90
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f002 fc83 	bl	80073a4 <_ZdlPvj>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	return true;
 8004ab0:	2301      	movs	r3, #1
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
	if (!length)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 8004ad0:	68b8      	ldr	r0, [r7, #8]
 8004ad2:	f7fb fbed 	bl	80002b0 <strlen>
 8004ad6:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	7b1b      	ldrb	r3, [r3, #12]
 8004adc:	f083 0301 	eor.w	r3, r3, #1
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6898      	ldr	r0, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	2332      	movs	r3, #50	; 0x32
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	f7fe fbd4 	bl	800329e <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 8004af6:	e004      	b.n	8004b02 <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f805 	bl	8004b0c <_ZN4Uart13writeUsingDMAEPKhm>
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b80      	cmp	r3, #128	; 0x80
 8004b1c:	d905      	bls.n	8004b2a <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 8004b1e:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8004b20:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 8004b22:	2150      	movs	r1, #80	; 0x50
 8004b24:	4814      	ldr	r0, [pc, #80]	; (8004b78 <_ZN4Uart13writeUsingDMAEPKhm+0x6c>)
 8004b26:	f002 fe0d 	bl	8007744 <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	330d      	adds	r3, #13
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 f907 	bl	8007d46 <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004b38:	e000      	b.n	8004b3c <_ZN4Uart13writeUsingDMAEPKhm+0x30>
    { continue; }
 8004b3a:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f2      	bne.n	8004b3a <_ZN4Uart13writeUsingDMAEPKhm+0x2e>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6898      	ldr	r0, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	330d      	adds	r3, #13
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fe fc2f 	bl	80033c4 <HAL_UART_Transmit_DMA>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	08008c04 	.word	0x08008c04
 8004b74:	08008c24 	.word	0x08008c24
 8004b78:	08008bd0 	.word	0x08008bd0

08004b7c <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>:
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	{
        return (this->status_ == eventStatus);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
	}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <_ZN9interface10XFBehaviorC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  	///< Called by the dispatcher to process an event.

protected:
    XFBehavior() = default;
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <_ZN9interface10XFBehaviorC1Ev+0x1c>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	08008d18 	.word	0x08008d18

08004bf8 <_ZN9interface10XFBehaviorD1Ev>:
    virtual ~XFBehavior() = default;
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <_ZN9interface10XFBehaviorD1Ev+0x1c>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	08008d18 	.word	0x08008d18

08004c18 <_ZN9interface10XFBehaviorD0Ev>:
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ffe9 	bl	8004bf8 <_ZN9interface10XFBehaviorD1Ev>
 8004c26:	2104      	movs	r1, #4
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f002 fbbb 	bl	80073a4 <_ZdlPvj>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <_ZN10XFBehaviorC1Ev>:
#include "xf/initialevent.h"
#include "xf/behavior.h"
#include "trace/trace.h"
// TODO: Implement code for XFBehavior class  

XFBehavior::XFBehavior()
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffc8 	bl	8004bd8 <_ZN9interface10XFBehaviorC1Ev>
 8004c48:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <_ZN10XFBehaviorC1Ev+0x28>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
{
    this->deleteOnTerminate_ = false; // false by default
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	711a      	strb	r2, [r3, #4]
}
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	08008cf0 	.word	0x08008cf0

08004c64 <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <_ZN10XFBehaviorD1Ev+0x38>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
{
    if(this->deleteOnTerminate()){
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f85f 	bl	8004d36 <_ZNK10XFBehavior17deleteOnTerminateEv>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <_ZN10XFBehaviorD1Ev+0x26>
        delete this;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <_ZN10XFBehaviorD1Ev+0x26>
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f80b 	bl	8004ca0 <_ZN10XFBehaviorD0Ev>
XFBehavior::~XFBehavior()
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ffb3 	bl	8004bf8 <_ZN9interface10XFBehaviorD1Ev>
    }
}
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08008cf0 	.word	0x08008cf0

08004ca0 <_ZN10XFBehaviorD0Ev>:
XFBehavior::~XFBehavior()
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
}
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ffdb 	bl	8004c64 <_ZN10XFBehaviorD1Ev>
 8004cae:	210c      	movs	r1, #12
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f002 fb77 	bl	80073a4 <_ZdlPvj>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    XFInitialEvent* evInit = new XFInitialEvent();
 8004cc8:	2010      	movs	r0, #16
 8004cca:	f002 fb7c 	bl	80073c6 <_Znwj>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461c      	mov	r4, r3
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f970 	bl	8004fb8 <_ZN14XFInitialEventC1Ev>
 8004cd8:	60fc      	str	r4, [r7, #12]
    this->pushEvent(evInit);//send an init event
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}

08004cf0 <_ZN10XFBehavior9pushEventEP7XFEvent>:

void XFBehavior::pushEvent(XFEvent *pEvent){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
    /*
    if(pEvent->getEventType()== XFEvent::DefaultTransition||pEvent->getEventType()== XFEvent::Initial){
        pEvent->setBehavior(this);
    }*/
    if(pEvent->getBehavior()==nullptr){
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f7ff ff3e 	bl	8004b7c <_ZNK7XFEvent11getBehaviorEv>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf0c      	ite	eq
 8004d06:	2301      	moveq	r3, #1
 8004d08:	2300      	movne	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <_ZN10XFBehavior9pushEventEP7XFEvent+0x2a>
        pEvent->setBehavior(this);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	6838      	ldr	r0, [r7, #0]
 8004d16:	f7ff ff3d 	bl	8004b94 <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>
    }
    getDispatcher()->pushEvent(pEvent);// push event further
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f832 	bl	8004d84 <_ZN10XFBehavior13getDispatcherEv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	3208      	adds	r2, #8
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	4790      	blx	r2
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
    return this->deleteOnTerminate_;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	791b      	ldrb	r3, [r3, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
    this->deleteOnTerminate_ = deleteBehaviour;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	711a      	strb	r2, [r3, #4]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent *XFBehavior::getCurrentEvent() const
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
    return this->pCurrentEvent_;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher *XFBehavior::getDispatcher(){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
    return interface::XFDispatcher::getInstance();
 8004d8c:	f000 f9ac 	bl	80050e8 <_ZN9interface12XFDispatcher11getInstanceEv>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout *XFBehavior::getCurrentTimeout()
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
    if(this->pCurrentEvent_->getEventType() == XFEvent::Timeout){
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fab6 	bl	8004318 <_ZNK7XFEvent12getEventTypeEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <_ZN10XFBehavior17getCurrentTimeoutEv+0x28>
    return (XFTimeout*)this->pCurrentEvent_;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	e000      	b.n	8004dc4 <_ZN10XFBehavior17getCurrentTimeoutEv+0x2a>
    }
    return nullptr;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent *pEvent)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
    this->pCurrentEvent_= pEvent;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent *pEvent)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    XFBehavior::TerminateBehavior terminateBehavior = false;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]
    XFEventStatus status;
 8004df6:	f107 030c 	add.w	r3, r7, #12
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff faa3 	bl	8004348 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
    this->setCurrentEvent(pEvent);
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ffe1 	bl	8004dcc <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>
    status = this->processEvent();
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	331c      	adds	r3, #28
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	733b      	strb	r3, [r7, #12]
    if(status == XFEventStatus::Consumed && pEvent->deleteAfterConsume()){
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	737b      	strb	r3, [r7, #13]
 8004e1e:	f107 020d 	add.w	r2, r7, #13
 8004e22:	f107 030c 	add.w	r3, r7, #12
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fec1 	bl	8004bb0 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <_ZN10XFBehavior7processEPK7XFEvent+0x62>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6838      	ldr	r0, [r7, #0]
 8004e3e:	4798      	blx	r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <_ZN10XFBehavior7processEPK7XFEvent+0x62>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <_ZN10XFBehavior7processEPK7XFEvent+0x64>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <_ZN10XFBehavior7processEPK7XFEvent+0x78>
        delete pEvent;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <_ZN10XFBehavior7processEPK7XFEvent+0x78>
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	3204      	adds	r2, #4
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	4790      	blx	r2
    }
    if(status == XFEventStatus::Terminate && this->deleteOnTerminate()){
 8004e60:	2308      	movs	r3, #8
 8004e62:	73bb      	strb	r3, [r7, #14]
 8004e64:	f107 020e 	add.w	r2, r7, #14
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fe9e 	bl	8004bb0 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <_ZN10XFBehavior7processEPK7XFEvent+0xa8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <_ZN10XFBehavior7processEPK7XFEvent+0xa8>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <_ZN10XFBehavior7processEPK7XFEvent+0xaa>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <_ZN10XFBehavior7processEPK7XFEvent+0xb2>
        terminateBehavior = true;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]

    }
    return terminateBehavior;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZN7XFEventC1ENS_11XFEventTypeEi>:
    XFEvent(XFEventType eventType, int id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr) {}
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	460b      	mov	r3, r1
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	72fb      	strb	r3, [r7, #11]
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <_ZN7XFEventC1ENS_11XFEventTypeEi+0x34>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	7afa      	ldrb	r2, [r7, #11]
 8004ebc:	711a      	strb	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	08008d3c 	.word	0x08008d3c

08004edc <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <_ZN7XFEventD1Ev+0x1c>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	08008d3c 	.word	0x08008d3c

08004efc <_ZN7XFEventD0Ev>:
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ffe9 	bl	8004edc <_ZN7XFEventD1Ev>
 8004f0a:	2110      	movs	r1, #16
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 fa49 	bl	80073a4 <_ZdlPvj>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	2300      	movs	r3, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <_ZN19XFDefaultTransitionC1Ev>:
#include "xf/defaulttransition.h"

// TODO: Implement code for XFDefaultTransition class

XFDefaultTransition::XFDefaultTransition():XFEvent(DefaultTransition)
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ffae 	bl	8004ea4 <_ZN7XFEventC1ENS_11XFEventTypeEi>
 8004f48:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <_ZN19XFDefaultTransitionC1Ev+0x24>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
{

}
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	08008d50 	.word	0x08008d50

08004f5c <_ZNK19XFDefaultTransition18deleteAfterConsumeEv>:

bool XFDefaultTransition::deleteAfterConsume() const
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
    return false;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <_ZN19XFDefaultTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * another (without a trigger) a default transition must be pushed.
 */
class XFDefaultTransition : public XFEvent
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <_ZN19XFDefaultTransitionD1Ev+0x20>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ffa9 	bl	8004edc <_ZN7XFEventD1Ev>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08008d50 	.word	0x08008d50

08004f98 <_ZN19XFDefaultTransitionD0Ev>:
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ffe7 	bl	8004f74 <_ZN19XFDefaultTransitionD1Ev>
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f002 f9fb 	bl	80073a4 <_ZdlPvj>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

// TODO: Implement code for XFInitialEvent class

XFInitialEvent::XFInitialEvent()
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    :XFEvent(Initial)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff6c 	bl	8004ea4 <_ZN7XFEventC1ENS_11XFEventTypeEi>
 8004fcc:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <_ZN14XFInitialEventC1Ev+0x24>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
{

}
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08008d64 	.word	0x08008d64

08004fe0 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    return false;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	4a05      	ldr	r2, [pc, #20]	; (8005018 <_ZN14XFInitialEventD1Ev+0x20>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff67 	bl	8004edc <_ZN7XFEventD1Ev>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	08008d64 	.word	0x08008d64

0800501c <_ZN14XFInitialEventD0Ev>:
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffe7 	bl	8004ff8 <_ZN14XFInitialEventD1Ev>
 800502a:	2110      	movs	r1, #16
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f002 f9b9 	bl	80073a4 <_ZdlPvj>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>:
#include "xf/timeout.h"
#include "xf/interface/timeoutmanager.h"
// TODO: Implement code for XFTimeout class

XFTimeout::XFTimeout(int id, int interval, interface::XFBehavior *pBehavior)
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
    :XFEvent(Timeout,id),interval_(interval)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	2104      	movs	r1, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff27 	bl	8004ea4 <_ZN7XFEventC1ENS_11XFEventTypeEi>
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE+0x3c>)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]
{
    this->setBehavior(pBehavior);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fd94 	bl	8004b94 <_ZN7XFEvent11setBehaviorEPN9interface10XFBehaviorE>
}
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	08008d78 	.word	0x08008d78

0800507c <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    return false;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <_ZN9XFTimeoutD1Ev+0x20>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff19 	bl	8004edc <_ZN7XFEventD1Ev>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	08008d78 	.word	0x08008d78

080050b8 <_ZN9XFTimeoutD0Ev>:
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ffe7 	bl	8005094 <_ZN9XFTimeoutD1Ev>
 80050c6:	2118      	movs	r1, #24
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f002 f96b 	bl	80073a4 <_ZdlPvj>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <__tcf_0>:
//       returned by the 'interface::XFDispatcher' class.


interface::XFDispatcher * interface::XFDispatcher::getInstance()
{
    static ::XFDispatcher dispatcher;
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__tcf_0+0xc>)
 80050de:	f000 f84f 	bl	8005180 <_ZN12XFDispatcherD1Ev>
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000810 	.word	0x20000810

080050e8 <_ZN9interface12XFDispatcher11getInstanceEv>:
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
    static ::XFDispatcher dispatcher;
 80050ec:	4b11      	ldr	r3, [pc, #68]	; (8005134 <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3bf 8f5b 	dmb	ish
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf0c      	ite	eq
 80050fc:	2301      	moveq	r3, #1
 80050fe:	2300      	movne	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <_ZN9interface12XFDispatcher11getInstanceEv+0x46>
 8005106:	480b      	ldr	r0, [pc, #44]	; (8005134 <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 8005108:	f002 f94e 	bl	80073a8 <__cxa_guard_acquire>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <_ZN9interface12XFDispatcher11getInstanceEv+0x46>
 800511c:	4806      	ldr	r0, [pc, #24]	; (8005138 <_ZN9interface12XFDispatcher11getInstanceEv+0x50>)
 800511e:	f000 f8d1 	bl	80052c4 <_ZN12XFDispatcherC1Ev>
 8005122:	4806      	ldr	r0, [pc, #24]	; (800513c <_ZN9interface12XFDispatcher11getInstanceEv+0x54>)
 8005124:	f002 fb2c 	bl	8007780 <atexit>
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <_ZN9interface12XFDispatcher11getInstanceEv+0x4c>)
 800512a:	f002 f949 	bl	80073c0 <__cxa_guard_release>
    return &dispatcher;
 800512e:	4b02      	ldr	r3, [pc, #8]	; (8005138 <_ZN9interface12XFDispatcher11getInstanceEv+0x50>)
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000848 	.word	0x20000848
 8005138:	20000810 	.word	0x20000810
 800513c:	080050d9 	.word	0x080050d9

08005140 <_ZN9interface12XFDispatcherD1Ev>:
{
    friend class ::XF;
    friend class ::DispatcherThread;

public:
    virtual ~XFDispatcher() = default;
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	4a04      	ldr	r2, [pc, #16]	; (800515c <_ZN9interface12XFDispatcherD1Ev+0x1c>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	08008db4 	.word	0x08008db4

08005160 <_ZN9interface12XFDispatcherD0Ev>:
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ffe9 	bl	8005140 <_ZN9interface12XFDispatcherD1Ev>
 800516e:	2104      	movs	r1, #4
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f002 f917 	bl	80073a4 <_ZdlPvj>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <_ZN12XFDispatcherD1Ev>:

// TODO: Implement code for XFDispatcher class

#endif // USE_XF_COMMON_DISPATCHER_CLASS

XFDispatcher::~XFDispatcher()
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	4a08      	ldr	r2, [pc, #32]	; (80051ac <_ZN12XFDispatcherD1Ev+0x2c>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f8b2 	bl	80062fc <_ZN12XFEventQueueD1Ev>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ffd0 	bl	8005140 <_ZN9interface12XFDispatcherD1Ev>
{

}
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08008d8c 	.word	0x08008d8c

080051b0 <_ZN12XFDispatcherD0Ev>:
XFDispatcher::~XFDispatcher()
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
}
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff ffe1 	bl	8005180 <_ZN12XFDispatcherD1Ev>
 80051be:	2138      	movs	r1, #56	; 0x38
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f002 f8ef 	bl	80073a4 <_ZdlPvj>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <_ZN12XFDispatcher9pushEventEP7XFEvent>:

void XFDispatcher::pushEvent(XFEvent *pEvent)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
    //TODO: search for the isInISR=> how we know that we are in ISR or not
    //Trace::out("Push event");
    this->events_.push(pEvent,false);//push the event in the queue
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3304      	adds	r3, #4
 80051de:	2200      	movs	r2, #0
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f8c4 	bl	8006370 <_ZN12XFEventQueue4pushEPK7XFEventb>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN12XFDispatcher15scheduleTimeoutEiiPN9interface10XFBehaviorE>:

void XFDispatcher::scheduleTimeout(int timeoutId, int interval, interface::XFBehavior *pBehavior)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
    XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId,interval,pBehavior);//add the timeout in timeoutManager, call timeoutManager with getInstance
 80051fe:	f000 f93b 	bl	8005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005202:	6803      	ldr	r3, [r0, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	681c      	ldr	r4, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	47a0      	blx	r4
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bd90      	pop	{r4, r7, pc}

08005218 <_ZN12XFDispatcher17unscheduleTimeoutEiPN9interface10XFBehaviorE>:
void XFDispatcher::unscheduleTimeout(int timeoutId, interface::XFBehavior *pBehavior)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
   XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId,pBehavior);//call timoutManager with getInstance to remove the timeout
 8005224:	f000 f928 	bl	8005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8005228:	4603      	mov	r3, r0
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	3218      	adds	r2, #24
 800522e:	6814      	ldr	r4, [r2, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	4618      	mov	r0, r3
 8005236:	47a0      	blx	r4
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}

08005240 <_ZN12XFDispatcher11executeOnceEv>:

// TODO: pop an event and execute it
void XFDispatcher::executeOnce()
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
    if(!this->events_.empty()){// if there is an event in the queue   
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f001 f881 	bl	8006354 <_ZNK12XFEventQueue5emptyEv>
 8005252:	4603      	mov	r3, r0
 8005254:	f083 0301 	eor.w	r3, r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <_ZN12XFDispatcher11executeOnceEv+0x42>
        dispatchEvent(this->events_.front());// dispatch the event
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	331c      	adds	r3, #28
 8005264:	681c      	ldr	r4, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f8a4 	bl	80063b8 <_ZN12XFEventQueue5frontEv>
 8005270:	4603      	mov	r3, r0
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	47a0      	blx	r4
        this->events_.pop();// pop the event
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f001 f8aa 	bl	80063d6 <_ZN12XFEventQueue3popEv>
    }
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	bd90      	pop	{r4, r7, pc}

0800528a <_ZN12XFDispatcher7executeEPKv>:


int XFDispatcher::execute(const void *param)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
    while(true){
        this->executeOnce();
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3318      	adds	r3, #24
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
 80052a0:	e7f8      	b.n	8005294 <_ZN12XFDispatcher7executeEPKv+0xa>
	...

080052a4 <_ZN9interface12XFDispatcherC1Ev>:
protected:
    /**
     * Constructor is protected because only method createInstance()
     * should be called to create Dispatcher instances
     */
    XFDispatcher() = default;
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <_ZN9interface12XFDispatcherC1Ev+0x1c>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	08008db4 	.word	0x08008db4

080052c4 <_ZN12XFDispatcherC1Ev>:
    }
}

XFDispatcher::XFDispatcher()
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ffe8 	bl	80052a4 <_ZN9interface12XFDispatcherC1Ev>
 80052d4:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <_ZN12XFDispatcherC1Ev+0x2c>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fff0 	bl	80062c4 <_ZN12XFEventQueueC1Ev>
{

}
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	08008d8c 	.word	0x08008d8c

080052f4 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent>:


void XFDispatcher::dispatchEvent(const XFEvent *pEvent) const
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
    XFBehavior::TerminateBehavior terminateBehavior;
    terminateBehavior = pEvent->getBehavior()->process(pEvent); // call the process method
 80052fe:	6838      	ldr	r0, [r7, #0]
 8005300:	f7ff fc3c 	bl	8004b7c <_ZNK7XFEvent11getBehaviorEv>
 8005304:	4603      	mov	r3, r0
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	3218      	adds	r2, #24
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	4790      	blx	r2
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]

    if(terminateBehavior){// if we should delete the behavior
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x3e>
        delete (pEvent->getBehavior());
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f7ff fc2d 	bl	8004b7c <_ZNK7XFEvent11getBehaviorEv>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <_ZNK12XFDispatcher13dispatchEventEPK7XFEvent+0x3e>
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	3204      	adds	r2, #4
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	4790      	blx	r2
    }

}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f805 	bl	800536a <_ZNSt8__detail17_List_node_header7_M_initEv>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	609a      	str	r2, [r3, #8]
#endif
      }
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <_ZNKSt14_Function_base8_M_emptyEv>:
    {
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf0c      	ite	eq
 80053a2:	2301      	moveq	r3, #1
 80053a4:	2300      	movne	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    {
        tickInterval_ = tickInterval;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	605a      	str	r2, [r3, #4]
    }
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    {
        return tickInterval_;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
    }
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
        tickInterval_(0)
 80053f0:	4a06      	ldr	r2, [pc, #24]	; (800540c <_ZN9interface16XFTimeoutManagerC1Ev+0x24>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
    {}
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	08008e08 	.word	0x08008e08

08005410 <_ZN9XFTimeout11setRelTicksEi>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline int getInterval() const { return interval_; }                                            ///< Returns the timeout interval in milliseconds.
    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	615a      	str	r2, [r3, #20]
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <_ZNK9XFTimeout11getRelTicksEv>:
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	1ad2      	subs	r2, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	615a      	str	r2, [r3, #20]
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <__tcf_0>:
//       returned by the 'interface::XFTimeoutManager' class.


interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
    static ::XFTimeoutManager timeoutManager;
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__tcf_0+0xc>)
 800546e:	f000 f85d 	bl	800552c <_ZN16XFTimeoutManagerD1Ev>
 8005472:	bd80      	pop	{r7, pc}
 8005474:	2000084c 	.word	0x2000084c

08005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
    static ::XFTimeoutManager timeoutManager;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3bf 8f5b 	dmb	ish
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <_ZN9interface16XFTimeoutManager11getInstanceEv+0x46>
 8005496:	480b      	ldr	r0, [pc, #44]	; (80054c4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 8005498:	f001 ff86 	bl	80073a8 <__cxa_guard_acquire>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <_ZN9interface16XFTimeoutManager11getInstanceEv+0x46>
 80054ac:	4806      	ldr	r0, [pc, #24]	; (80054c8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x50>)
 80054ae:	f000 f9b9 	bl	8005824 <_ZN16XFTimeoutManagerC1Ev>
 80054b2:	4806      	ldr	r0, [pc, #24]	; (80054cc <_ZN9interface16XFTimeoutManager11getInstanceEv+0x54>)
 80054b4:	f002 f964 	bl	8007780 <atexit>
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x4c>)
 80054ba:	f001 ff81 	bl	80073c0 <__cxa_guard_release>
    return &timeoutManager;
 80054be:	4b02      	ldr	r3, [pc, #8]	; (80054c8 <_ZN9interface16XFTimeoutManager11getInstanceEv+0x50>)
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000864 	.word	0x20000864
 80054c8:	2000084c 	.word	0x2000084c
 80054cc:	08005469 	.word	0x08005469

080054d0 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <_ZN9interface16XFTimeoutManagerD1Ev+0x1c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	08008e08 	.word	0x08008e08

080054f0 <_ZN9interface16XFTimeoutManagerD0Ev>:
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ffe9 	bl	80054d0 <_ZN9interface16XFTimeoutManagerD1Ev>
 80054fe:	2108      	movs	r1, #8
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 ff4f 	bl	80073a4 <_ZdlPvj>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa79 	bl	8005a12 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <_ZN16XFTimeoutManagerD1Ev>:

#endif // USE_XF_COMMON_TIMEOUTMANAGER_CLASS


XFTimeoutManager::~XFTimeoutManager()
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <_ZN16XFTimeoutManagerD1Ev+0x2c>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3308      	adds	r3, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ffe6 	bl	8005510 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ffc2 	bl	80054d0 <_ZN9interface16XFTimeoutManagerD1Ev>
{

}
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	08008ddc 	.word	0x08008ddc

0800555c <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
}
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ffe1 	bl	800552c <_ZN16XFTimeoutManagerD1Ev>
 800556a:	2118      	movs	r1, #24
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 ff19 	bl	80073a4 <_ZdlPvj>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZN16XFTimeoutManager5startESt8functionIFvmEE>:

void XFTimeoutManager::start(std::function<void (uint32_t)> startTimeoutManagerTimer)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
    startTimeoutManagerTimer(this->tickInterval_);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4619      	mov	r1, r3
 800558c:	6838      	ldr	r0, [r7, #0]
 800558e:	f000 fa50 	bl	8005a32 <_ZNKSt8functionIFvmEEclEm>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZN16XFTimeoutManager15scheduleTimeoutEllPN9interface10XFBehaviorE>:

// add a timeout in the list with the target to reach when the event is done
void XFTimeoutManager::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFBehavior *pBehavior)
{
 800559a:	b590      	push	{r4, r7, lr}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
    XFTimeout * timeout = new XFTimeout(timeoutId,interval,pBehavior);// create a new timeout
 80055a8:	2018      	movs	r0, #24
 80055aa:	f001 ff0c 	bl	80073c6 <_Znwj>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461c      	mov	r4, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7ff fd3f 	bl	800503c <_ZN9XFTimeoutC1EiiPN9interface10XFBehaviorE>
 80055be:	617c      	str	r4, [r7, #20]
    timeout->setRelTicks(interval/this->getTickInterval());// set the ticks
 80055c0:	697c      	ldr	r4, [r7, #20]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff ff18 	bl	8005410 <_ZN9XFTimeout11setRelTicksEi>
    addTimeout(timeout);//push it in the list
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3320      	adds	r3, #32
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	4798      	blx	r3
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd90      	pop	{r4, r7, pc}

080055f6 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE>:

void XFTimeoutManager::unscheduleTimeout(int32_t timeoutId, interface::XFBehavior *pBehavior)
{
 80055f6:	b590      	push	{r4, r7, lr}
 80055f8:	b089      	sub	sp, #36	; 0x24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
    this->pMutex_->lock();
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
    TimeoutList::iterator it;
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fa27 	bl	8005a6c <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>
    for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3308      	adds	r3, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fa30 	bl	8005a88 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005628:	4603      	mov	r3, r0
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e02a      	b.n	8005684 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x8e>
        if((*it)->getId()== timeoutId){
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa71 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005638:	4603      	mov	r3, r0
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fe77 	bl	8004330 <_ZNK7XFEvent5getIdEv>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4293      	cmp	r3, r2
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x82>
            it = this->timeouts_.erase(it);// we remove the concerned timeout
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f103 0408 	add.w	r4, r3, #8
 800565a:	f107 0214 	add.w	r2, r7, #20
 800565e:	f107 0318 	add.w	r3, r7, #24
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fa66 	bl	8005b36 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fa72 	bl	8005b56 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8005672:	4603      	mov	r3, r0
 8005674:	617b      	str	r3, [r7, #20]
            break;
 8005676:	e017      	b.n	80056a8 <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0xb2>
    for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8005678:	f107 0314 	add.w	r3, r7, #20
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa37 	bl	8005af2 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3308      	adds	r3, #8
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fa0e 	bl	8005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800568e:	4603      	mov	r3, r0
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	f107 021c 	add.w	r2, r7, #28
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa14 	bl	8005aca <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1c2      	bne.n	800562e <_ZN16XFTimeoutManager17unscheduleTimeoutElPN9interface10XFBehaviorE+0x38>
        }
    }
    this->pMutex_->unlock();
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
}
 80056ba:	bf00      	nop
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}

080056c2 <_ZN16XFTimeoutManager4tickEv>:

void XFTimeoutManager::tick()
{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
    this->pMutex_->lock();// lock mutex
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
                it--;
            }
        }
    }*/

    if(!this->timeouts_.empty()){// if there is something in the list
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3308      	adds	r3, #8
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa53 	bl	8005b8c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f083 0301 	eor.w	r3, r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d064      	beq.n	80057bc <_ZN16XFTimeoutManager4tickEv+0xfa>
        TimeoutList::iterator it = this->timeouts_.begin();
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3308      	adds	r3, #8
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f9c6 	bl	8005a88 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80056fc:	4603      	mov	r3, r0
 80056fe:	60fb      	str	r3, [r7, #12]
        if((*it)->getRelTicks() > 0){
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fa08 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800570a:	4603      	mov	r3, r0
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fe8c 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfcc      	ite	gt
 800571a:	2301      	movgt	r3, #1
 800571c:	2300      	movle	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d027      	beq.n	8005774 <_ZN16XFTimeoutManager4tickEv+0xb2>
            (*it)->substractFromRelTicks(1);}// we substract one tick if relTick is not 0
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f9f6 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800572e:	4603      	mov	r3, r0
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe85 	bl	8005444 <_ZN9XFTimeout21substractFromRelTicksEi>
 800573a:	e03f      	b.n	80057bc <_ZN16XFTimeoutManager4tickEv+0xfa>
        else{
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
                returnTimeout((*it));// we push the event
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	4618      	mov	r0, r3
 8005742:	f000 f9ea 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8005746:	4603      	mov	r3, r0
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f94c 	bl	80059ea <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                it = this->timeouts_.erase(it);// and we delete the timeout from the list
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f103 0408 	add.w	r4, r3, #8
 8005758:	f107 020c 	add.w	r2, r7, #12
 800575c:	f107 0310 	add.w	r3, r7, #16
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f9e7 	bl	8005b36 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8005768:	6939      	ldr	r1, [r7, #16]
 800576a:	4620      	mov	r0, r4
 800576c:	f000 f9f3 	bl	8005b56 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8005770:	4603      	mov	r3, r0
 8005772:	60fb      	str	r3, [r7, #12]
            while(it!=this->timeouts_.end() && (*it)->getRelTicks()== 0 ){
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3308      	adds	r3, #8
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f996 	bl	8005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800577e:	4603      	mov	r3, r0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	f107 0214 	add.w	r2, r7, #20
 8005786:	f107 030c 	add.w	r3, r7, #12
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f99c 	bl	8005aca <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <_ZN16XFTimeoutManager4tickEv+0xf4>
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f9bc 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80057a2:	4603      	mov	r3, r0
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fe40 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <_ZN16XFTimeoutManager4tickEv+0xf4>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <_ZN16XFTimeoutManager4tickEv+0xf6>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1bf      	bne.n	800573c <_ZN16XFTimeoutManager4tickEv+0x7a>
            }
        }

    }

    this->pMutex_->unlock();// unlock mutex
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4610      	mov	r0, r2
 80057cc:	4798      	blx	r3
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}

080057d6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9f6 	bl	8005bd0 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      _List_base() = default;
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f9d9 	bl	8005bb0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:
      list() = default;
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ffeb 	bl	80057ee <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <_ZN16XFTimeoutManagerC1Ev>:

XFTimeoutManager::XFTimeoutManager()
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fdda 	bl	80053e8 <_ZN9interface16XFTimeoutManagerC1Ev>
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <_ZN16XFTimeoutManagerC1Ev+0x34>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3308      	adds	r3, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ffe2 	bl	8005808 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
{
    this->pMutex_ = interface::XFMutex::create();
 8005844:	f001 fd50 	bl	80072e8 <_ZN9interface7XFMutex6createEv>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	615a      	str	r2, [r3, #20]
}
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	08008ddc 	.word	0x08008ddc

0800585c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:

void XFTimeoutManager::addTimeout(XFTimeout *pNewTimeout)
{
 800585c:	b5b0      	push	{r4, r5, r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]

    bool timeoutInserted = false; // flag used to know if we have inserted the timeout in the list
 8005866:	2300      	movs	r3, #0
 8005868:	77fb      	strb	r3, [r7, #31]
    this->pMutex_->lock();
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3308      	adds	r3, #8
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
    //this->timeouts_.push_back(pNewTimeout);// add a timeout in the list
    if(!this->timeouts_.empty()){// if there is something in the list
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3308      	adds	r3, #8
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f983 	bl	8005b8c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8005886:	4603      	mov	r3, r0
 8005888:	f083 0301 	eor.w	r3, r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8097 	beq.w	80059c2 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x166>

        TimeoutList::iterator it;
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f8e7 	bl	8005a6c <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>
        for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3308      	adds	r3, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f8f0 	bl	8005a88 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80058a8:	4603      	mov	r3, r0
 80058aa:	60bb      	str	r3, [r7, #8]
 80058ac:	e067      	b.n	800597e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x122>
            XFTimeout* currentTimeout = (*it);// cast the iterator into a timeout
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f931 	bl	8005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80058b8:	4603      	mov	r3, r0
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	61bb      	str	r3, [r7, #24]
            if(!timeoutInserted){
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	f083 0301 	eor.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d053      	beq.n	8005972 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x116>
                if(currentTimeout->getRelTicks() > pNewTimeout->getRelTicks()){// if the relTicks in current timeout are bigger than the ticks in newTimeout
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f7ff fdae 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 80058d0:	4604      	mov	r4, r0
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fda9 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 80058da:	4603      	mov	r3, r0
 80058dc:	429c      	cmp	r4, r3
 80058de:	bfcc      	ite	gt
 80058e0:	2301      	movgt	r3, #1
 80058e2:	2300      	movle	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d034      	beq.n	8005954 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xf8>
                  this->timeouts_.insert(it,pNewTimeout);// insert the timeout in the list
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f103 0408 	add.w	r4, r3, #8
 80058f0:	f107 0208 	add.w	r2, r7, #8
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f91b 	bl	8005b36 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8005900:	463b      	mov	r3, r7
 8005902:	461a      	mov	r2, r3
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	4620      	mov	r0, r4
 8005908:	f000 f96e 	bl	8005be8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    timeoutInserted=true;
 800590c:	2301      	movs	r3, #1
 800590e:	77fb      	strb	r3, [r7, #31]
                    if(it!=this->timeouts_.end()){currentTimeout->setRelTicks(currentTimeout->getRelTicks()-pNewTimeout->getRelTicks());}
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3308      	adds	r3, #8
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f8c8 	bl	8005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800591a:	4603      	mov	r3, r0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	f107 0210 	add.w	r2, r7, #16
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f8ce 	bl	8005aca <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d037      	beq.n	80059a4 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x148>
 8005934:	69bc      	ldr	r4, [r7, #24]
 8005936:	69b8      	ldr	r0, [r7, #24]
 8005938:	f7ff fd78 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 800593c:	4605      	mov	r5, r0
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fd73 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 8005946:	4603      	mov	r3, r0
 8005948:	1aeb      	subs	r3, r5, r3
 800594a:	4619      	mov	r1, r3
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff fd5f 	bl	8005410 <_ZN9XFTimeout11setRelTicksEi>
                    break;
 8005952:	e027      	b.n	80059a4 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x148>
                }
                else{
                    pNewTimeout->setRelTicks(pNewTimeout->getRelTicks()-currentTimeout->getRelTicks());
 8005954:	683c      	ldr	r4, [r7, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fd67 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 800595e:	4605      	mov	r5, r0
 8005960:	69b8      	ldr	r0, [r7, #24]
 8005962:	f7ff fd63 	bl	800542c <_ZNK9XFTimeout11getRelTicksEv>
 8005966:	4603      	mov	r3, r0
 8005968:	1aeb      	subs	r3, r5, r3
 800596a:	4619      	mov	r1, r3
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fd4f 	bl	8005410 <_ZN9XFTimeout11setRelTicksEi>
        for(it = this->timeouts_.begin();it != this->timeouts_.end();it++){
 8005972:	f107 0308 	add.w	r3, r7, #8
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f8ba 	bl	8005af2 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3308      	adds	r3, #8
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f891 	bl	8005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005988:	4603      	mov	r3, r0
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	f107 0214 	add.w	r2, r7, #20
 8005990:	f107 0308 	add.w	r3, r7, #8
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f897 	bl	8005aca <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d185      	bne.n	80058ae <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x52>
 80059a2:	e000      	b.n	80059a6 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x14a>
                    break;
 80059a4:	bf00      	nop
            /*
            else{
                currentTimeout->setRelTicks(currentTimeout->getRelTicks()-pNewTimeout->getRelTicks());// remove the new timeout ticks in the timeouts further in list
            }*/
        }
        if(!timeoutInserted){// if we didn't inserted the timeout in the list, we push it now in the back
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
 80059a8:	f083 0301 	eor.w	r3, r3, #1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x174>
            this->timeouts_.push_back(pNewTimeout);// add a timeout in the list
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3308      	adds	r3, #8
 80059b6:	463a      	mov	r2, r7
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f93a 	bl	8005c34 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9push_backERKS2_>
 80059c0:	e006      	b.n	80059d0 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x174>
        }
    }
    else{// if the list is empty
        this->timeouts_.push_front(pNewTimeout);// add a timeout in the list
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3308      	adds	r3, #8
 80059c6:	463a      	mov	r2, r7
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f944 	bl	8005c58 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
    }
    this->pMutex_->unlock();
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4610      	mov	r0, r2
 80059e0:	4798      	blx	r3

}
 80059e2:	bf00      	nop
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bdb0      	pop	{r4, r5, r7, pc}

080059ea <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:

void XFTimeoutManager::returnTimeout(XFTimeout *pTimeout)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f8c0 	bl	8004b7c <_ZNK7XFEvent11getBehaviorEv>
 80059fc:	4603      	mov	r3, r0
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	320c      	adds	r2, #12
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	4790      	blx	r2
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f92e 	bl	8005c7c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fed7 	bl	80057d6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <_ZNKSt8functionIFvmEEclEm>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8005a32:	b5b0      	push	{r4, r5, r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
      {
	if (_M_empty())
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fca7 	bl	8005392 <_ZNKSt14_Function_base8_M_emptyEv>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <_ZNKSt8functionIFvmEEclEm+0x1c>
	  __throw_bad_function_call();
 8005a4a:	f001 fce7 	bl	800741c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68dc      	ldr	r4, [r3, #12]
 8005a52:	687d      	ldr	r5, [r7, #4]
 8005a54:	463b      	mov	r3, r7
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f936 	bl	8005cc8 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4628      	mov	r0, r5
 8005a62:	47a0      	blx	r4
 8005a64:	bf00      	nop
      }
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bdb0      	pop	{r4, r5, r7, pc}

08005a6c <_ZNSt14_List_iteratorIP9XFTimeoutEC1Ev>:
      _List_iterator() _GLIBCXX_NOEXCEPT
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	f107 030c 	add.w	r3, r7, #12
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f91f 	bl	8005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f90f 	bl	8005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]
	return __tmp;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
      }
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f8e8 	bl	8005cfc <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f8b7 	bl	8005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 8005b70:	463b      	mov	r3, r7
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f8f6 	bl	8005d64 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8cb 	bl	8005d18 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 8005b82:	68fb      	ldr	r3, [r7, #12]
    }
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8e4 	bl	8005d86 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fbc6 	bl	8005352 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8e0 	bl	8005d9e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f8dc 	bl	8005db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8005bfc:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8005bfe:	697c      	ldr	r4, [r7, #20]
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f8ad 	bl	8005d64 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f001 fbec 	bl	80073ec <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f8ff 	bl	8005e1c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 8005c1e:	f107 0310 	add.w	r3, r7, #16
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 f85a 	bl	8005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8005c2a:	693b      	ldr	r3, [r7, #16]
    }
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd90      	pop	{r4, r7, pc}

08005c34 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9push_backERKS2_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff33 	bl	8005aaa <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8005c44:	4603      	mov	r3, r0
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8f7 	bl	8005e3e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ff10 	bl	8005a88 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8e5 	bl	8005e3e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8005c8a:	e014      	b.n	8005cb6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x3a>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f000 f830 	bl	8005cfc <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005c9c:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8eb 	bl	8005e7a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 f8f1 	bl	8005e90 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8005cae:	6939      	ldr	r1, [r7, #16]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8fa 	bl	8005eaa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d1e6      	bne.n	8005c8c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x10>
    }
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3308      	adds	r3, #8
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f8dd 	bl	8005ec8 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2101      	movs	r1, #1
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f8da 	bl	8005ee0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fb63 	bl	80073fa <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f89d 	bl	8005e7a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8005d40:	4604      	mov	r4, r0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ffda 	bl	8005cfc <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 f89f 	bl	8005e90 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f8a7 	bl	8005eaa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ffb1 	bl	8005cde <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8b7 	bl	8005f02 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005db4:	b590      	push	{r4, r7, lr}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 f8a9 	bl	8005f18 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 8005dc6:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f855 	bl	8005e7a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8005dd0:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8005dd2:	f107 0308 	add.w	r3, r7, #8
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f8aa 	bl	8005f34 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f7ff ff8b 	bl	8005cfc <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8005de6:	4604      	mov	r4, r0
 8005de8:	6838      	ldr	r0, [r7, #0]
 8005dea:	f000 f8cc 	bl	8005f86 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461a      	mov	r2, r3
 8005df2:	4621      	mov	r1, r4
 8005df4:	6938      	ldr	r0, [r7, #16]
 8005df6:	f000 f8d1 	bl	8005f9c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8005dfa:	f107 0308 	add.w	r3, r7, #8
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f8de 	bl	8005fc2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 8005e06:	697c      	ldr	r4, [r7, #20]
	}
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f8a5 	bl	8005f5c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 8005e12:	4623      	mov	r3, r4
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f89b 	bl	8005f86 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8005e50:	4603      	mov	r3, r0
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ffad 	bl	8005db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8005e5a:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fac2 	bl	80073ec <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ffd5 	bl	8005e1c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 8005e72:	bf00      	nop
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f89f 	bl	8005fe0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f89b 	bl	8005ff6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f89f 	bl	8006014 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	1ad2      	subs	r2, r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f880 	bl	800602a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005f40:	68b8      	ldr	r0, [r7, #8]
 8005f42:	f000 f881 	bl	8006048 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	605a      	str	r2, [r3, #4]
      { }
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	4619      	mov	r1, r3
 8005f78:	f000 f83d 	bl	8005ff6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ffec 	bl	8005f86 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f852 	bl	800605e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
	return *this;
 8005fd2:	687b      	ldr	r3, [r7, #4]
      }
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f83f 	bl	800608a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006034:	2200      	movs	r2, #0
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f847 	bl	80060cc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 800603e:	4603      	mov	r3, r0
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800605e:	b590      	push	{r4, r7, lr}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ff8b 	bl	8005f86 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8006070:	4603      	mov	r3, r0
 8006072:	681c      	ldr	r4, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4619      	mov	r1, r3
 8006078:	2004      	movs	r0, #4
 800607a:	f7ff f95e 	bl	800533a <_ZnwjPv>
 800607e:	4603      	mov	r3, r0
 8006080:	601c      	str	r4, [r3, #0]
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bd90      	pop	{r4, r7, pc}

0800608a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4619      	mov	r1, r3
 80060a2:	68b8      	ldr	r0, [r7, #8]
 80060a4:	f001 f97e 	bl	80073a4 <_ZdlPvj>
      }
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	0aaaaaaa 	.word	0x0aaaaaaa

080060cc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff ffe9 	bl	80060b0 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 80060de:	4602      	mov	r2, r0
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4293      	cmp	r3, r2
 80060e4:	bf8c      	ite	hi
 80060e6:	2301      	movhi	r3, #1
 80060e8:	2300      	movls	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4a09      	ldr	r2, [pc, #36]	; (8006124 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x58>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006102:	f001 f982 	bl	800740a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8006106:	f001 f97d 	bl	8007404 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4613      	mov	r3, r2
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f956 	bl	80073c6 <_Znwj>
 800611a:	4603      	mov	r3, r0
      }
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	15555555 	.word	0x15555555

08006128 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
	bInISR = true;								// Tell critical section we are in an ISR
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <XF_tick+0x30>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
	if (XF::isRunning())                        // Call tick only if XF is running
 8006132:	f001 f92b 	bl	800738c <_ZN2XF9isRunningEv>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <XF_tick+0x24>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 800613c:	f7ff f99c 	bl	8005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8006140:	4603      	mov	r3, r0
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	321c      	adds	r2, #28
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	4790      	blx	r2
	}
	bInISR = false;
 800614c:	4b02      	ldr	r3, [pc, #8]	; (8006158 <XF_tick+0x30>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	200007fc 	.word	0x200007fc

0800615c <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 8006160:	f7ff f98a 	bl	8005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8006164:	4603      	mov	r3, r0
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	320c      	adds	r2, #12
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	4790      	blx	r2
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	bd80      	pop	{r7, pc}

08006176 <XF_isRunning>:

bool XF_isRunning()
{
 8006176:	b580      	push	{r7, lr}
 8006178:	af00      	add	r7, sp, #0
    return XF::isRunning();
 800617a:	f001 f907 	bl	800738c <_ZN2XF9isRunningEv>
 800617e:	4603      	mov	r3, r0
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d205      	bcs.n	80061a0 <_ZSt16__deque_buf_sizej+0x1c>
 8006194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	e000      	b.n	80061a2 <_ZSt16__deque_buf_sizej+0x1e>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <_ZN12XFEventQueue4pendEv>:
#include "eventqueue.h"

// TODO: Implement code for XFEventQueue class

bool XFEventQueue::pend()
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;									///< Returns pointer to next event to pop.
    virtual void pop() = 0;													///< Pops the next event from the queue.
    virtual bool pend() = 0;												///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <_ZN9interface12XFEventQueueC1Ev+0x1c>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	08008e74 	.word	0x08008e74

080061e4 <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	4a04      	ldr	r2, [pc, #16]	; (8006200 <_ZN9interface12XFEventQueueD1Ev+0x1c>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	08008e74 	.word	0x08008e74

08006204 <_ZN9interface12XFEventQueueD0Ev>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff ffe9 	bl	80061e4 <_ZN9interface12XFEventQueueD1Ev>
 8006212:	2104      	movs	r1, #4
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f8c5 	bl	80073a4 <_ZdlPvj>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <_ZN9interface7XFMutexC1Ev+0x1c>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	08008e58 	.word	0x08008e58

08006244 <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <_ZN9interface7XFMutexD1Ev+0x1c>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	08008e58 	.word	0x08008e58

08006264 <_ZN9interface7XFMutexD0Ev>:
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ffe9 	bl	8006244 <_ZN9interface7XFMutexD1Ev>
 8006272:	2104      	movs	r1, #4
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f895 	bl	80073a4 <_ZdlPvj>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <_ZN7XFMutexC1Ev>:
	void unlock() override;

	bool tryLock(int32_t timeout = 0) override;

protected:
    XFMutex() = default;     ///< Do not allow to directly create an object of this class. Call interface::XFMutex::create() instead.
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ffc8 	bl	8006224 <_ZN9interface7XFMutexC1Ev>
 8006294:	4a03      	ldr	r2, [pc, #12]	; (80062a4 <_ZN7XFMutexC1Ev+0x20>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	08008e98 	.word	0x08008e98

080062a8 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f8bd 	bl	8006432 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <_ZN12XFEventQueueC1Ev>:

XFEventQueue::XFEventQueue() {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff78 	bl	80061c4 <_ZN9interface12XFEventQueueC1Ev>
 80062d4:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <_ZN12XFEventQueueC1Ev+0x34>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ffd0 	bl	8006284 <_ZN7XFMutexC1Ev>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3308      	adds	r3, #8
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f88e 	bl	800640a <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
}
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	08008e34 	.word	0x08008e34

080062fc <_ZN12XFEventQueueD1Ev>:

XFEventQueue::~XFEventQueue() {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <_ZN12XFEventQueueD1Ev+0x34>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3308      	adds	r3, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff ffca 	bl	80062a8 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4618      	mov	r0, r3
 800631a:	f000 ffc3 	bl	80072a4 <_ZN7XFMutexD1Ev>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff ff5f 	bl	80061e4 <_ZN9interface12XFEventQueueD1Ev>
}
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08008e34 	.word	0x08008e34

08006334 <_ZN12XFEventQueueD0Ev>:
XFEventQueue::~XFEventQueue() {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
}
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff ffdd 	bl	80062fc <_ZN12XFEventQueueD1Ev>
 8006342:	2130      	movs	r1, #48	; 0x30
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 f82d 	bl	80073a4 <_ZdlPvj>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNK12XFEventQueue5emptyEv>:

bool XFEventQueue::empty() const {
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	return this->queue_.empty();
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3308      	adds	r3, #8
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f88b 	bl	800647c <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 8006366:	4603      	mov	r3, r0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <_ZN12XFEventQueue4pushEPK7XFEventb>:

bool XFEventQueue::push(const XFEvent *pEvent, bool fromISR) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	71fb      	strb	r3, [r7, #7]
	if(fromISR){
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <_ZN12XFEventQueue4pushEPK7XFEventb+0x1e>
		this->mutex_.lock();
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f000 ffba 	bl	8007302 <_ZN7XFMutex4lockEv>
	}
	this->queue_.push(pEvent);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3308      	adds	r3, #8
 8006392:	f107 0208 	add.w	r2, r7, #8
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f87c 	bl	8006496 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
	if(fromISR){
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <_ZN12XFEventQueue4pushEPK7XFEventb+0x3e>
		this->mutex_.unlock();
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 ffb4 	bl	8007316 <_ZN7XFMutex6unlockEv>
	}
	return true;
 80063ae:	2301      	movs	r3, #1
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZN12XFEventQueue5frontEv>:

const XFEvent* XFEventQueue::front() {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	return this->queue_.front();
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3308      	adds	r3, #8
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f874 	bl	80064b2 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 80063ca:	4603      	mov	r3, r0
 80063cc:	681b      	ldr	r3, [r3, #0]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZN12XFEventQueue3popEv>:

void XFEventQueue::pop() {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
	this->queue_.pop();
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3308      	adds	r3, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f872 	bl	80064cc <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f87e 	bl	80064fc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
	: c() { }
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	2328      	movs	r3, #40	; 0x28
 8006418:	461a      	mov	r2, r3
 800641a:	2100      	movs	r1, #0
 800641c:	f001 fbc4 	bl	8007ba8 <memset>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff ffe4 	bl	80063f0 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8006432:	b580      	push	{r7, lr}
 8006434:	b08a      	sub	sp, #40	; 0x28
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800643a:	f107 0308 	add.w	r3, r7, #8
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f88e 	bl	8006562 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8006446:	f107 0318 	add.w	r3, r7, #24
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f897 	bl	8006580 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f8a2 	bl	800659e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800645a:	4603      	mov	r3, r0
 800645c:	f107 0218 	add.w	r2, r7, #24
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8c1 	bl	80065ec <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f856 	bl	800651e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	3728      	adds	r7, #40	; 0x28
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f8bd 	bl	8006606 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 800648c:	4603      	mov	r3, r0
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f8c0 	bl	800662a <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
	return c.front();
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f8d5 	bl	800666c <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 80064c2:	4603      	mov	r3, r0
      }
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f8dc 	bl	8006694 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f904 	bl	80066fa <_ZNSaIPK7XFEventED1Ev>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f8e7 	bl	80066da <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800650c:	2100      	movs	r1, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8ff 	bl	8006712 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d010      	beq.n	8006550 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8006536:	3304      	adds	r3, #4
 8006538:	461a      	mov	r2, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f94c 	bl	80067d8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	461a      	mov	r2, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f95f 	bl	800680e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff ffc6 	bl	80064e4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f81e 	bl	80065b4 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	3318      	adds	r3, #24
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f80f 	bl	80065b4 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	609a      	str	r2, [r3, #8]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80065ec:	b480      	push	{r7}
 80065ee:	b08d      	sub	sp, #52	; 0x34
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80065fa:	bf00      	nop
 80065fc:	3734      	adds	r7, #52	; 0x34
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f103 0218 	add.w	r2, r3, #24
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3308      	adds	r3, #8
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f000 f912 	bl	8006844 <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 8006620:	4603      	mov	r3, r0
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800663e:	429a      	cmp	r2, r3
 8006640:	d00c      	beq.n	800665c <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	4619      	mov	r1, r3
 800664c:	f000 f90e 	bl	800686c <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	1d1a      	adds	r2, r3, #4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	619a      	str	r2, [r3, #24]
      }
 800665a:	e003      	b.n	8006664 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3a>
	  _M_push_back_aux(__x);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f918 	bl	8006894 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	return *begin();
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff ff71 	bl	8006562 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f949 	bl	800691c <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 800668a:	4603      	mov	r3, r0
      }
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d010      	beq.n	80066cc <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff76 	bl	800659e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 80066b2:	4602      	mov	r2, r0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 f93a 	bl	8006934 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	1d1a      	adds	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]
      }
 80066ca:	e002      	b.n	80066d2 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f93e 	bl	800694e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f95b 	bl	800699e <_ZNSaIPK7XFEventEC1Ev>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f963 	bl	80069b6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>
	{ }
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f970 	bl	80069e8 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b089      	sub	sp, #36	; 0x24
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800671c:	2004      	movs	r0, #4
 800671e:	f7ff fd31 	bl	8006184 <_ZSt16__deque_buf_sizej>
 8006722:	4602      	mov	r2, r0
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	fbb3 f3f2 	udiv	r3, r3, r2
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800672e:	2308      	movs	r3, #8
 8006730:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3302      	adds	r3, #2
 8006736:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8006738:	f107 0210 	add.w	r2, r7, #16
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f95b 	bl	80069fe <_ZSt3maxIjERKT_S2_S2_>
 8006748:	4603      	mov	r3, r0
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f965 	bl	8006a26 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 800675c:	4602      	mov	r2, r0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1acb      	subs	r3, r1, r3
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8006772:	4413      	add	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4413      	add	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	69b9      	ldr	r1, [r7, #24]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f96b 	bl	8006a60 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3308      	adds	r3, #8
 800678e:	69b9      	ldr	r1, [r7, #24]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f980 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f103 0218 	add.w	r2, r3, #24
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3b04      	subs	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 f977 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80067b4:	2004      	movs	r0, #4
 80067b6:	f7ff fce5 	bl	8006184 <_ZSt16__deque_buf_sizej>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	fbb3 f1f2 	udiv	r1, r3, r2
 80067c2:	fb01 f202 	mul.w	r2, r1, r2
 80067c6:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
    }
 80067d0:	bf00      	nop
 80067d2:	3724      	adds	r7, #36	; 0x24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e008      	b.n	80067fc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x24>
	_M_deallocate_node(*__n);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f969 	bl	8006ac8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3304      	adds	r3, #4
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d3f2      	bcc.n	80067ea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x12>
    }
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800681a:	f107 0314 	add.w	r3, r7, #20
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f964 	bl	8006aee <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 f97a 	bl	8006b28 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
      }
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f969 	bl	8006b10 <_ZNSaIPPK7XFEventED1Ev>
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <_ZSteqRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f964 	bl	8006b46 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f969 	bl	8006b5c <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8006894:	b5b0      	push	{r4, r5, r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f972 	bl	8006b88 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>
 80068a4:	4604      	mov	r4, r0
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f980 	bl	8006bac <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>
 80068ac:	4603      	mov	r3, r0
 80068ae:	429c      	cmp	r4, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80068bc:	4816      	ldr	r0, [pc, #88]	; (8006918 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x84>)
 80068be:	f000 fdaa 	bl	8007416 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f982 	bl	8006bce <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	1d1c      	adds	r4, r3, #4
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 f996 	bl	8006c04 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 80068d8:	4603      	mov	r3, r0
 80068da:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80068dc:	687c      	ldr	r4, [r7, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699d      	ldr	r5, [r3, #24]
 80068e2:	6838      	ldr	r0, [r7, #0]
 80068e4:	f000 f92f 	bl	8006b46 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	4629      	mov	r1, r5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f7ff ffbc 	bl	800686c <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f103 0218 	add.w	r2, r3, #24
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f000 f8c7 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bdb0      	pop	{r4, r5, r7, pc}
 8006918:	08008c58 	.word	0x08008c58

0800691c <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f971 	bl	8006c28 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
	}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fe20 	bl	800659e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7ff ffe4 	bl	8006934 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 f8a7 	bl	8006ac8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 0208 	add.w	r2, r3, #8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f000 f884 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	609a      	str	r2, [r3, #8]
    }
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <_ZNSaIPK7XFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f949 	bl	8006c3e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3308      	adds	r3, #8
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f940 	bl	8006c54 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f93b 	bl	8006c54 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d201      	bcs.n	8006a18 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	e000      	b.n	8006a1a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006a18:	687b      	ldr	r3, [r7, #4]
    }
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8006a26:	b590      	push	{r4, r7, lr}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f859 	bl	8006aee <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f91d 	bl	8006c82 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	bf00      	nop
      }
 8006a4c:	f107 030c 	add.w	r3, r7, #12
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f85d 	bl	8006b10 <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8006a56:	4623      	mov	r3, r4
      }
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd90      	pop	{r4, r7, pc}

08006a60 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e008      	b.n	8006a84 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x24>
	    *__cur = this->_M_allocate_node();
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8c6 	bl	8006c04 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3304      	adds	r3, #4
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d3f2      	bcc.n	8006a72 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x12>
    }
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8006a96:	b590      	push	{r4, r7, lr}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685c      	ldr	r4, [r3, #4]
 8006ab2:	f000 f8f5 	bl	8006ca0 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	18e2      	adds	r2, r4, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	609a      	str	r2, [r3, #8]
      }
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd90      	pop	{r4, r7, pc}

08006ac8 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8006ad2:	687c      	ldr	r4, [r7, #4]
 8006ad4:	2004      	movs	r0, #4
 8006ad6:	f7ff fb55 	bl	8006184 <_ZSt16__deque_buf_sizej>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 f8e5 	bl	8006cb0 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd90      	pop	{r4, r7, pc}

08006aee <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006af8:	6838      	ldr	r0, [r7, #0]
 8006afa:	f000 f8e8 	bl	8006cce <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8ee 	bl	8006ce4 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <_ZNSaIPPK7XFEventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8f0 	bl	8006cfe <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8eb 	bl	8006d14 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ffec 	bl	8006b46 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	681c      	ldr	r4, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4619      	mov	r1, r3
 8006b76:	2004      	movs	r0, #4
 8006b78:	f7fe fbdf 	bl	800533a <_ZnwjPv>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	601c      	str	r4, [r3, #0]
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}

08006b88 <_ZNKSt5dequeIPK7XFEventSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f103 0218 	add.w	r2, r3, #24
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f000 f8c9 	bl	8006d34 <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <_ZNKSt5dequeIPK7XFEventSaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f889 	bl	8006cce <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f8e4 	bl	8006d8c <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	6809      	ldr	r1, [r1, #0]
 8006be8:	1a41      	subs	r1, r0, r1
 8006bea:	1089      	asrs	r1, r1, #2
 8006bec:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d904      	bls.n	8006bfc <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8e2 	bl	8006dc0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8006c0c:	687c      	ldr	r4, [r7, #4]
 8006c0e:	2004      	movs	r0, #4
 8006c10:	f7ff fab8 	bl	8006184 <_ZSt16__deque_buf_sizej>
 8006c14:	4603      	mov	r3, r0
 8006c16:	4619      	mov	r1, r3
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 f96b 	bl	8006ef4 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 8006c1e:	4603      	mov	r3, r0
      }
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd90      	pop	{r4, r7, pc}

08006c28 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	60da      	str	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f94a 	bl	8006f2a <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006ca4:	2004      	movs	r0, #4
 8006ca6:	f7ff fa6d 	bl	8006184 <_ZSt16__deque_buf_sizej>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4618      	mov	r0, r3
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f95b 	bl	8006f7c <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f954 	bl	8006f9c <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4619      	mov	r1, r3
 8006d26:	68b8      	ldr	r0, [r7, #8]
 8006d28:	f000 fb3c 	bl	80073a4 <_ZdlPvj>
      }
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <_ZStmiRKSt15_Deque_iteratorIPK7XFEventRS2_PS2_ES7_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8006d3e:	f7ff ffaf 	bl	8006ca0 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	109b      	asrs	r3, r3, #2
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf14      	ite	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6811      	ldr	r1, [r2, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6852      	ldr	r2, [r2, #4]
 8006d70:	1a8a      	subs	r2, r1, r2
 8006d72:	1092      	asrs	r2, r2, #2
 8006d74:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	6891      	ldr	r1, [r2, #8]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	1a8a      	subs	r2, r1, r2
 8006d80:	1092      	asrs	r2, r2, #2
 8006d82:	4413      	add	r3, r2
      }
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <_ZNSt5dequeIPK7XFEventSaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006d94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d98:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f909 	bl	8006fb2 <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>
 8006da0:	4603      	mov	r3, r0
 8006da2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006da4:	f107 0208 	add.w	r2, r7, #8
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	4611      	mov	r1, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f90b 	bl	8006fca <_ZSt3minIjERKT_S2_S2_>
 8006db4:	4603      	mov	r3, r0
 8006db6:	681b      	ldr	r3, [r3, #0]
      }
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b08b      	sub	sp, #44	; 0x2c
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	109b      	asrs	r3, r3, #2
 8006dda:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8006ddc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	4413      	add	r3, r2
 8006de4:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d92d      	bls.n	8006e4e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1acb      	subs	r3, r1, r3
 8006dfe:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006e00:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x4e>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	e000      	b.n	8006e10 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006e12:	4413      	add	r3, r2
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d209      	bcs.n	8006e34 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8006e28:	3304      	adds	r3, #4
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f000 f8e0 	bl	8006ff2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 8006e32:	e048      	b.n	8006ec6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e3c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	4413      	add	r3, r2
 8006e46:	461a      	mov	r2, r3
 8006e48:	f000 f8eb 	bl	8007022 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 8006e4c:	e03b      	b.n	8006ec6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3304      	adds	r3, #4
 8006e56:	f107 0208 	add.w	r2, r7, #8
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fdce 	bl	80069fe <_ZSt3maxIjERKT_S2_S2_>
 8006e62:	4603      	mov	r3, r0
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8006e68:	3302      	adds	r3, #2
 8006e6a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	69b9      	ldr	r1, [r7, #24]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fdd8 	bl	8006a26 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 8006e76:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xce>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	e000      	b.n	8006e90 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd0>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4413      	add	r3, r2
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f000 f8a4 	bl	8006ff2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f7ff fcaa 	bl	800680e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fde2 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f103 0018 	add.w	r0, r3, #24
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f7ff fdd5 	bl	8006a96 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 8006eec:	bf00      	nop
 8006eee:	372c      	adds	r7, #44	; 0x2c
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd90      	pop	{r4, r7, pc}

08006ef4 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006efe:	2200      	movs	r2, #0
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f8b1 	bl	800706a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006f1a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff ffeb 	bl	8006f12 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE11_M_max_sizeEv>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4293      	cmp	r3, r2
 8006f42:	bf8c      	ite	hi
 8006f44:	2301      	movhi	r3, #1
 8006f46:	2300      	movls	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5e:	d301      	bcc.n	8006f64 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006f60:	f000 fa53 	bl	800740a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8006f64:	f000 fa4e 	bl	8007404 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fa2a 	bl	80073c6 <_Znwj>
 8006f72:	4603      	mov	r3, r0
      }
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	68b8      	ldr	r0, [r7, #8]
 8006f90:	f000 fa08 	bl	80073a4 <_ZdlPvj>
      }
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <_ZNSt16allocator_traitsISaIPK7XFEventEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f87e 	bl	80070bc <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 8006fc0:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d201      	bcs.n	8006fe4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	e000      	b.n	8006fe6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006fe4:	687b      	ldr	r3, [r7, #4]
    }
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006ff2:	b590      	push	{r4, r7, lr}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f868 	bl	80070d4 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8007004:	4604      	mov	r4, r0
 8007006:	68b8      	ldr	r0, [r7, #8]
 8007008:	f000 f864 	bl	80070d4 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800700c:	4603      	mov	r3, r0
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f869 	bl	80070ea <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8007018:	4603      	mov	r3, r0
    }
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bd90      	pop	{r4, r7, pc}

08007022 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007022:	b590      	push	{r4, r7, lr}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f850 	bl	80070d4 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 8007034:	4604      	mov	r4, r0
 8007036:	68b8      	ldr	r0, [r7, #8]
 8007038:	f000 f84c 	bl	80070d4 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800703c:	4603      	mov	r3, r0
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4619      	mov	r1, r3
 8007042:	4620      	mov	r0, r4
 8007044:	f000 f874 	bl	8007130 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8007048:	4603      	mov	r3, r0
    }
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bd90      	pop	{r4, r7, pc}

08007052 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800705a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff ffeb 	bl	8007052 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 800707c:	4602      	mov	r2, r0
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4293      	cmp	r3, r2
 8007082:	bf8c      	ite	hi
 8007084:	2301      	movhi	r3, #1
 8007086:	2300      	movls	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d301      	bcc.n	80070a4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80070a0:	f000 f9b3 	bl	800740a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80070a4:	f000 f9ae 	bl	8007404 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 f98a 	bl	80073c6 <_Znwj>
 80070b2:	4603      	mov	r3, r0
      }
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff ffc4 	bl	8007052 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE11_M_max_sizeEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    { return __it; }
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80070ea:	b5b0      	push	{r4, r5, r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f83d 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 80070fc:	4604      	mov	r4, r0
 80070fe:	68b8      	ldr	r0, [r7, #8]
 8007100:	f000 f839 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8007104:	4605      	mov	r5, r0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f834 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	4629      	mov	r1, r5
 8007114:	4620      	mov	r0, r4
 8007116:	f000 f839 	bl	800718c <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800711a:	4602      	mov	r2, r0
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f843 	bl	80071ac <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 8007126:	4603      	mov	r3, r0
    }
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bdb0      	pop	{r4, r5, r7, pc}

08007130 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8007130:	b5b0      	push	{r4, r5, r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f81a 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8007142:	4604      	mov	r4, r0
 8007144:	68b8      	ldr	r0, [r7, #8]
 8007146:	f000 f816 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800714a:	4605      	mov	r5, r0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f811 	bl	8007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 8007154:	4603      	mov	r3, r0
 8007156:	461a      	mov	r2, r3
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f832 	bl	80071c4 <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 8007160:	4602      	mov	r2, r0
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f820 	bl	80071ac <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>
 800716c:	4603      	mov	r3, r0
    }
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bdb0      	pop	{r4, r5, r7, pc}

08007176 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <_ZSt14__copy_move_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f821 	bl	80071e4 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <_ZSt12__niter_wrapIPPPK7XFEventET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <_ZSt23__copy_move_backward_a1ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f815 	bl	8007204 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 80071da:	4603      	mov	r3, r0
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f815 	bl	8007224 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 80071fa:	4603      	mov	r3, r0
    }
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f822 	bl	800725e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 800721a:	4603      	mov	r3, r0
    }
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	109b      	asrs	r3, r3, #2
 8007238:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	461a      	mov	r2, r3
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc93 	bl	8007b74 <memmove>
	  return __result + _Num;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4413      	add	r3, r2
	}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	109b      	asrs	r3, r3, #2
 8007272:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	425b      	negs	r3, r3
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	18d0      	adds	r0, r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	461a      	mov	r2, r3
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	f000 fc72 	bl	8007b74 <memmove>
	  return __result - _Num;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	425b      	negs	r3, r3
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4413      	add	r3, r2
	}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <_ZN7XFMutexD1Ev>:
class XFMutex : public interface::XFMutex
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <_ZN7XFMutexD1Ev+0x20>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe ffc5 	bl	8006244 <_ZN9interface7XFMutexD1Ev>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	08008e98 	.word	0x08008e98

080072c8 <_ZN7XFMutexD0Ev>:
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ffe7 	bl	80072a4 <_ZN7XFMutexD1Ev>
 80072d6:	2104      	movs	r1, #4
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f863 	bl	80073a4 <_ZdlPvj>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 80072e8:	b598      	push	{r3, r4, r7, lr}
 80072ea:	af00      	add	r7, sp, #0
    return new ::XFMutex;
 80072ec:	2004      	movs	r0, #4
 80072ee:	f000 f86a 	bl	80073c6 <_Znwj>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461c      	mov	r4, r3
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7fe ffc4 	bl	8006284 <_ZN7XFMutexC1Ev>
 80072fc:	4623      	mov	r3, r4
}
 80072fe:	4618      	mov	r0, r3
 8007300:	bd98      	pop	{r3, r4, r7, pc}

08007302 <_ZN7XFMutex4lockEv>:
// TODO: Implement code for XFMutex class
void XFMutex::lock() {
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
	enterCritical();
 800730a:	f7fd fb21 	bl	8004950 <_Z13enterCriticalv>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <_ZN7XFMutex6unlockEv>:

void XFMutex::unlock() {
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
	exitCritical();
 800731e:	f7fd fb37 	bl	8004990 <_Z12exitCriticalv>
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <_ZN7XFMutex7tryLockEl>:

bool XFMutex::tryLock(int32_t timeout) {
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
	return true;
 8007334:	2301      	movs	r3, #1
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <XF_initialize>:
// TODO: Implement code for XF class
bool XF::isRunning_=false;
bool XF::isInitialized_=false;

void XF_initialize(int timeInterval)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
    XF::initialize(timeInterval);
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f804 	bl	800735c <_ZN2XF10initializeEiiPPc>
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <_ZN2XF10initializeEiiPPc>:
void XF_execOnce()
{
    XF::execOnce();
}

void XF::initialize(int timeInterval, int argc, char *argv[]) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
	XF::isInitialized_=true;
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <_ZN2XF10initializeEiiPPc+0x2c>)
 800736a:	2201      	movs	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
	interface::XFTimeoutManager::getInstance()->initialize(timeInterval);
 800736e:	f7fe f883 	bl	8005478 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8007372:	4603      	mov	r3, r0
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	3208      	adds	r2, #8
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	4618      	mov	r0, r3
 800737e:	4790      	blx	r2
}
 8007380:	bf00      	nop
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000869 	.word	0x20000869

0800738c <_ZN2XF9isRunningEv>:
	XF::isRunning_ =true;
	interface::XFDispatcher::getInstance()->executeOnce();
	return 0;
}

bool XF::isRunning() {
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
	return XF::isRunning_;
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <_ZN2XF9isRunningEv+0x14>)
 8007392:	781b      	ldrb	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000868 	.word	0x20000868

080073a4 <_ZdlPvj>:
 80073a4:	f000 b9bb 	b.w	800771e <_ZdlPv>

080073a8 <__cxa_guard_acquire>:
 80073a8:	6803      	ldr	r3, [r0, #0]
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d406      	bmi.n	80073bc <__cxa_guard_acquire+0x14>
 80073ae:	7843      	ldrb	r3, [r0, #1]
 80073b0:	b103      	cbz	r3, 80073b4 <__cxa_guard_acquire+0xc>
 80073b2:	deff      	udf	#255	; 0xff
 80073b4:	2301      	movs	r3, #1
 80073b6:	7043      	strb	r3, [r0, #1]
 80073b8:	4618      	mov	r0, r3
 80073ba:	4770      	bx	lr
 80073bc:	2000      	movs	r0, #0
 80073be:	4770      	bx	lr

080073c0 <__cxa_guard_release>:
 80073c0:	2301      	movs	r3, #1
 80073c2:	6003      	str	r3, [r0, #0]
 80073c4:	4770      	bx	lr

080073c6 <_Znwj>:
 80073c6:	2801      	cmp	r0, #1
 80073c8:	bf38      	it	cc
 80073ca:	2001      	movcc	r0, #1
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4604      	mov	r4, r0
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 f9db 	bl	800778c <malloc>
 80073d6:	b100      	cbz	r0, 80073da <_Znwj+0x14>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	f000 f9a3 	bl	8007724 <_ZSt15get_new_handlerv>
 80073de:	b908      	cbnz	r0, 80073e4 <_Znwj+0x1e>
 80073e0:	f000 f9a8 	bl	8007734 <abort>
 80073e4:	4780      	blx	r0
 80073e6:	e7f3      	b.n	80073d0 <_Znwj+0xa>

080073e8 <_ZNSaIcEC1Ev>:
 80073e8:	4770      	bx	lr

080073ea <_ZNSaIcED1Ev>:
 80073ea:	4770      	bx	lr

080073ec <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80073ec:	684b      	ldr	r3, [r1, #4]
 80073ee:	6043      	str	r3, [r0, #4]
 80073f0:	684b      	ldr	r3, [r1, #4]
 80073f2:	6001      	str	r1, [r0, #0]
 80073f4:	6018      	str	r0, [r3, #0]
 80073f6:	6048      	str	r0, [r1, #4]
 80073f8:	4770      	bx	lr

080073fa <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80073fa:	e9d0 3200 	ldrd	r3, r2, [r0]
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	4770      	bx	lr

08007404 <_ZSt17__throw_bad_allocv>:
 8007404:	b508      	push	{r3, lr}
 8007406:	f000 f995 	bl	8007734 <abort>

0800740a <_ZSt28__throw_bad_array_new_lengthv>:
 800740a:	b508      	push	{r3, lr}
 800740c:	f000 f992 	bl	8007734 <abort>

08007410 <_ZSt19__throw_logic_errorPKc>:
 8007410:	b508      	push	{r3, lr}
 8007412:	f000 f98f 	bl	8007734 <abort>

08007416 <_ZSt20__throw_length_errorPKc>:
 8007416:	b508      	push	{r3, lr}
 8007418:	f000 f98c 	bl	8007734 <abort>

0800741c <_ZSt25__throw_bad_function_callv>:
 800741c:	b508      	push	{r3, lr}
 800741e:	f000 f989 	bl	8007734 <abort>

08007422 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007422:	b10a      	cbz	r2, 8007428 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007424:	f000 bc8f 	b.w	8007d46 <memcpy>
 8007428:	4770      	bx	lr
	...

0800742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800742c:	b508      	push	{r3, lr}
 800742e:	680b      	ldr	r3, [r1, #0]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007434:	d302      	bcc.n	800743c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8007436:	480d      	ldr	r0, [pc, #52]	; (800746c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8007438:	f7ff ffed 	bl	8007416 <_ZSt20__throw_length_errorPKc>
 800743c:	4293      	cmp	r3, r2
 800743e:	d90b      	bls.n	8007458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007440:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007444:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8007448:	d206      	bcs.n	8007458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800744a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800744e:	bf2a      	itet	cs
 8007450:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8007454:	6008      	strcc	r0, [r1, #0]
 8007456:	600b      	strcs	r3, [r1, #0]
 8007458:	6808      	ldr	r0, [r1, #0]
 800745a:	3001      	adds	r0, #1
 800745c:	d501      	bpl.n	8007462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800745e:	f7ff ffd1 	bl	8007404 <_ZSt17__throw_bad_allocv>
 8007462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007466:	f7ff bfae 	b.w	80073c6 <_Znwj>
 800746a:	bf00      	nop
 800746c:	08008eac 	.word	0x08008eac

08007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8007470:	f850 3b08 	ldr.w	r3, [r0], #8
 8007474:	4283      	cmp	r3, r0
 8007476:	d002      	beq.n	800747e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8007478:	4618      	mov	r0, r3
 800747a:	f000 b950 	b.w	800771e <_ZdlPv>
 800747e:	4770      	bx	lr

08007480 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8007480:	6840      	ldr	r0, [r0, #4]
 8007482:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8007486:	3901      	subs	r1, #1
 8007488:	1a09      	subs	r1, r1, r0
 800748a:	4291      	cmp	r1, r2
 800748c:	b508      	push	{r3, lr}
 800748e:	d202      	bcs.n	8007496 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff ffc0 	bl	8007416 <_ZSt20__throw_length_errorPKc>
 8007496:	bd08      	pop	{r3, pc}

08007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007498:	2a01      	cmp	r2, #1
 800749a:	b410      	push	{r4}
 800749c:	d104      	bne.n	80074a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800749e:	780a      	ldrb	r2, [r1, #0]
 80074a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a4:	7002      	strb	r2, [r0, #0]
 80074a6:	4770      	bx	lr
 80074a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ac:	f7ff bfb9 	b.w	8007422 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080074b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80074b0:	b508      	push	{r3, lr}
 80074b2:	1a52      	subs	r2, r2, r1
 80074b4:	f7ff fff0 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074b8:	bd08      	pop	{r3, pc}

080074ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80074ba:	b508      	push	{r3, lr}
 80074bc:	1a52      	subs	r2, r2, r1
 80074be:	f7ff ffeb 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074c2:	bd08      	pop	{r3, pc}

080074c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80074c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074ca:	461f      	mov	r7, r3
 80074cc:	6843      	ldr	r3, [r0, #4]
 80074ce:	eb01 0802 	add.w	r8, r1, r2
 80074d2:	1ab2      	subs	r2, r6, r2
 80074d4:	441a      	add	r2, r3
 80074d6:	eba3 0908 	sub.w	r9, r3, r8
 80074da:	4603      	mov	r3, r0
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	f853 2b08 	ldr.w	r2, [r3], #8
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf18      	it	ne
 80074e6:	6882      	ldrne	r2, [r0, #8]
 80074e8:	460d      	mov	r5, r1
 80074ea:	bf08      	it	eq
 80074ec:	220f      	moveq	r2, #15
 80074ee:	a901      	add	r1, sp, #4
 80074f0:	4604      	mov	r4, r0
 80074f2:	f7ff ff9b 	bl	800742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80074f6:	4682      	mov	sl, r0
 80074f8:	b11d      	cbz	r5, 8007502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80074fa:	6821      	ldr	r1, [r4, #0]
 80074fc:	462a      	mov	r2, r5
 80074fe:	f7ff ffcb 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007502:	b137      	cbz	r7, 8007512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8007504:	b12e      	cbz	r6, 8007512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8007506:	4632      	mov	r2, r6
 8007508:	4639      	mov	r1, r7
 800750a:	eb0a 0005 	add.w	r0, sl, r5
 800750e:	f7ff ffc3 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007512:	f1b9 0f00 	cmp.w	r9, #0
 8007516:	d007      	beq.n	8007528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	4435      	add	r5, r6
 800751c:	464a      	mov	r2, r9
 800751e:	4441      	add	r1, r8
 8007520:	eb0a 0005 	add.w	r0, sl, r5
 8007524:	f7ff ffb8 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff ffa1 	bl	8007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800752e:	9b01      	ldr	r3, [sp, #4]
 8007530:	f8c4 a000 	str.w	sl, [r4]
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	b002      	add	sp, #8
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800753c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	460e      	mov	r6, r1
 8007542:	3008      	adds	r0, #8
 8007544:	6020      	str	r0, [r4, #0]
 8007546:	f856 3b08 	ldr.w	r3, [r6], #8
 800754a:	429e      	cmp	r6, r3
 800754c:	460d      	mov	r5, r1
 800754e:	d10b      	bne.n	8007568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8007550:	2210      	movs	r2, #16
 8007552:	4631      	mov	r1, r6
 8007554:	f7ff ff65 	bl	8007422 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8007558:	686b      	ldr	r3, [r5, #4]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	2300      	movs	r3, #0
 800755e:	602e      	str	r6, [r5, #0]
 8007560:	606b      	str	r3, [r5, #4]
 8007562:	722b      	strb	r3, [r5, #8]
 8007564:	4620      	mov	r0, r4
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	688b      	ldr	r3, [r1, #8]
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	e7f3      	b.n	8007558 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08007570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	f7ff ff7c 	bl	8007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007578:	4620      	mov	r0, r4
 800757a:	bd10      	pop	{r4, pc}

0800757c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800757c:	6840      	ldr	r0, [r0, #4]
 800757e:	4770      	bx	lr

08007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8007580:	6800      	ldr	r0, [r0, #0]
 8007582:	4408      	add	r0, r1
 8007584:	4770      	bx	lr

08007586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8007586:	4603      	mov	r3, r0
 8007588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758a:	f853 2b08 	ldr.w	r2, [r3], #8
 800758e:	6846      	ldr	r6, [r0, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	bf18      	it	ne
 8007594:	6883      	ldrne	r3, [r0, #8]
 8007596:	f106 0501 	add.w	r5, r6, #1
 800759a:	bf08      	it	eq
 800759c:	230f      	moveq	r3, #15
 800759e:	429d      	cmp	r5, r3
 80075a0:	4604      	mov	r4, r0
 80075a2:	460f      	mov	r7, r1
 80075a4:	d906      	bls.n	80075b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80075a6:	2301      	movs	r3, #1
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	2300      	movs	r3, #0
 80075ac:	461a      	mov	r2, r3
 80075ae:	4631      	mov	r1, r6
 80075b0:	f7ff ff88 	bl	80074c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	559f      	strb	r7, [r3, r6]
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	6065      	str	r5, [r4, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	555a      	strb	r2, [r3, r5]
 80075c0:	b003      	add	sp, #12
 80075c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80075c4:	b510      	push	{r4, lr}
 80075c6:	4604      	mov	r4, r0
 80075c8:	f7ff ffdd 	bl	8007586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80075cc:	4620      	mov	r0, r4
 80075ce:	bd10      	pop	{r4, pc}

080075d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80075d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	4623      	mov	r3, r4
 80075d6:	6840      	ldr	r0, [r0, #4]
 80075d8:	f853 6b08 	ldr.w	r6, [r3], #8
 80075dc:	429e      	cmp	r6, r3
 80075de:	bf18      	it	ne
 80075e0:	68a3      	ldrne	r3, [r4, #8]
 80075e2:	eb00 0502 	add.w	r5, r0, r2
 80075e6:	bf08      	it	eq
 80075e8:	230f      	moveq	r3, #15
 80075ea:	429d      	cmp	r5, r3
 80075ec:	d80a      	bhi.n	8007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80075ee:	b112      	cbz	r2, 80075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80075f0:	4430      	add	r0, r6
 80075f2:	f7ff ff51 	bl	8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6065      	str	r5, [r4, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	4620      	mov	r0, r4
 80075fe:	555a      	strb	r2, [r3, r5]
 8007600:	b002      	add	sp, #8
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	9200      	str	r2, [sp, #0]
 8007606:	460b      	mov	r3, r1
 8007608:	2200      	movs	r2, #0
 800760a:	4601      	mov	r1, r0
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff ff59 	bl	80074c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8007612:	e7f0      	b.n	80075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08007614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8007614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	460d      	mov	r5, r1
 800761c:	f7f8 fe48 	bl	80002b0 <strlen>
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8007622:	9001      	str	r0, [sp, #4]
 8007624:	4602      	mov	r2, r0
 8007626:	2100      	movs	r1, #0
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff ff29 	bl	8007480 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800762e:	9a01      	ldr	r2, [sp, #4]
 8007630:	4629      	mov	r1, r5
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff ffcc 	bl	80075d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8007638:	b003      	add	sp, #12
 800763a:	bd30      	pop	{r4, r5, pc}
 800763c:	08008ec4 	.word	0x08008ec4

08007640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8007640:	6800      	ldr	r0, [r0, #0]
 8007642:	4770      	bx	lr

08007644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8007644:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	4616      	mov	r6, r2
 800764a:	460d      	mov	r5, r1
 800764c:	b919      	cbnz	r1, 8007656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800764e:	b112      	cbz	r2, 8007656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8007650:	480d      	ldr	r0, [pc, #52]	; (8007688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8007652:	f7ff fedd 	bl	8007410 <_ZSt19__throw_logic_errorPKc>
 8007656:	1b73      	subs	r3, r6, r5
 8007658:	2b0f      	cmp	r3, #15
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	d907      	bls.n	800766e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800765e:	2200      	movs	r2, #0
 8007660:	a901      	add	r1, sp, #4
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff fee2 	bl	800742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	60a3      	str	r3, [r4, #8]
 800766e:	4632      	mov	r2, r6
 8007670:	4629      	mov	r1, r5
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	f7ff ff1c 	bl	80074b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8007678:	9b01      	ldr	r3, [sp, #4]
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	2100      	movs	r1, #0
 8007680:	54d1      	strb	r1, [r2, r3]
 8007682:	b002      	add	sp, #8
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	bf00      	nop
 8007688:	08008ed9 	.word	0x08008ed9

0800768c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	f100 0308 	add.w	r3, r0, #8
 8007692:	6003      	str	r3, [r0, #0]
 8007694:	e9d1 5200 	ldrd	r5, r2, [r1]
 8007698:	4604      	mov	r4, r0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	442a      	add	r2, r5
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7ff ffcf 	bl	8007644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80076a6:	4620      	mov	r0, r4
 80076a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080076ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80076ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076ae:	4604      	mov	r4, r0
 80076b0:	4616      	mov	r6, r2
 80076b2:	460d      	mov	r5, r1
 80076b4:	b919      	cbnz	r1, 80076be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076b6:	b112      	cbz	r2, 80076be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076b8:	480d      	ldr	r0, [pc, #52]	; (80076f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80076ba:	f7ff fea9 	bl	8007410 <_ZSt19__throw_logic_errorPKc>
 80076be:	1b73      	subs	r3, r6, r5
 80076c0:	2b0f      	cmp	r3, #15
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	d907      	bls.n	80076d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80076c6:	2200      	movs	r2, #0
 80076c8:	a901      	add	r1, sp, #4
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff feae 	bl	800742c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	6020      	str	r0, [r4, #0]
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	4632      	mov	r2, r6
 80076d8:	4629      	mov	r1, r5
 80076da:	6820      	ldr	r0, [r4, #0]
 80076dc:	f7ff feed 	bl	80074ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	2100      	movs	r1, #0
 80076e8:	54d1      	strb	r1, [r2, r3]
 80076ea:	b002      	add	sp, #8
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	bf00      	nop
 80076f0:	08008ed9 	.word	0x08008ed9

080076f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	f100 0308 	add.w	r3, r0, #8
 80076fa:	4604      	mov	r4, r0
 80076fc:	6003      	str	r3, [r0, #0]
 80076fe:	460d      	mov	r5, r1
 8007700:	b159      	cbz	r1, 800771a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007702:	4608      	mov	r0, r1
 8007704:	f7f8 fdd4 	bl	80002b0 <strlen>
 8007708:	182a      	adds	r2, r5, r0
 800770a:	4620      	mov	r0, r4
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	4629      	mov	r1, r5
 8007712:	f7ff ffcb 	bl	80076ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007716:	4620      	mov	r0, r4
 8007718:	bd38      	pop	{r3, r4, r5, pc}
 800771a:	2201      	movs	r2, #1
 800771c:	e7f5      	b.n	800770a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800771e <_ZdlPv>:
 800771e:	f000 b83d 	b.w	800779c <free>
	...

08007724 <_ZSt15get_new_handlerv>:
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <_ZSt15get_new_handlerv+0xc>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	f3bf 8f5b 	dmb	ish
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	2000086c 	.word	0x2000086c

08007734 <abort>:
 8007734:	b508      	push	{r3, lr}
 8007736:	2006      	movs	r0, #6
 8007738:	f000 fa66 	bl	8007c08 <raise>
 800773c:	2001      	movs	r0, #1
 800773e:	f7f9 fb17 	bl	8000d70 <_exit>
	...

08007744 <__assert_func>:
 8007744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007746:	4614      	mov	r4, r2
 8007748:	461a      	mov	r2, r3
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <__assert_func+0x2c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4605      	mov	r5, r0
 8007750:	68d8      	ldr	r0, [r3, #12]
 8007752:	b14c      	cbz	r4, 8007768 <__assert_func+0x24>
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <__assert_func+0x30>)
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800775c:	4906      	ldr	r1, [pc, #24]	; (8007778 <__assert_func+0x34>)
 800775e:	462b      	mov	r3, r5
 8007760:	f000 f974 	bl	8007a4c <fiprintf>
 8007764:	f7ff ffe6 	bl	8007734 <abort>
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <__assert_func+0x38>)
 800776a:	461c      	mov	r4, r3
 800776c:	e7f3      	b.n	8007756 <__assert_func+0x12>
 800776e:	bf00      	nop
 8007770:	20000064 	.word	0x20000064
 8007774:	08008f03 	.word	0x08008f03
 8007778:	08008f10 	.word	0x08008f10
 800777c:	08008f3e 	.word	0x08008f3e

08007780 <atexit>:
 8007780:	2300      	movs	r3, #0
 8007782:	4601      	mov	r1, r0
 8007784:	461a      	mov	r2, r3
 8007786:	4618      	mov	r0, r3
 8007788:	f000 baec 	b.w	8007d64 <__register_exitproc>

0800778c <malloc>:
 800778c:	4b02      	ldr	r3, [pc, #8]	; (8007798 <malloc+0xc>)
 800778e:	4601      	mov	r1, r0
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f000 b82b 	b.w	80077ec <_malloc_r>
 8007796:	bf00      	nop
 8007798:	20000064 	.word	0x20000064

0800779c <free>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <free+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f000 bb3d 	b.w	8007e20 <_free_r>
 80077a6:	bf00      	nop
 80077a8:	20000064 	.word	0x20000064

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0e      	ldr	r6, [pc, #56]	; (80077e8 <sbrk_aligned+0x3c>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f000 fa76 	bl	8007ca8 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 fa71 	bl	8007ca8 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d00a      	beq.n	80077e0 <sbrk_aligned+0x34>
 80077ca:	1cc4      	adds	r4, r0, #3
 80077cc:	f024 0403 	bic.w	r4, r4, #3
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d007      	beq.n	80077e4 <sbrk_aligned+0x38>
 80077d4:	1a21      	subs	r1, r4, r0
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fa66 	bl	8007ca8 <_sbrk_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	d101      	bne.n	80077e4 <sbrk_aligned+0x38>
 80077e0:	f04f 34ff 	mov.w	r4, #4294967295
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	20000874 	.word	0x20000874

080077ec <_malloc_r>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	1ccd      	adds	r5, r1, #3
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	2d00      	cmp	r5, #0
 8007800:	4607      	mov	r7, r0
 8007802:	db01      	blt.n	8007808 <_malloc_r+0x1c>
 8007804:	42a9      	cmp	r1, r5
 8007806:	d905      	bls.n	8007814 <_malloc_r+0x28>
 8007808:	230c      	movs	r3, #12
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	2600      	movs	r6, #0
 800780e:	4630      	mov	r0, r6
 8007810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078e8 <_malloc_r+0xfc>
 8007818:	f000 f868 	bl	80078ec <__malloc_lock>
 800781c:	f8d8 3000 	ldr.w	r3, [r8]
 8007820:	461c      	mov	r4, r3
 8007822:	bb5c      	cbnz	r4, 800787c <_malloc_r+0x90>
 8007824:	4629      	mov	r1, r5
 8007826:	4638      	mov	r0, r7
 8007828:	f7ff ffc0 	bl	80077ac <sbrk_aligned>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	4604      	mov	r4, r0
 8007830:	d155      	bne.n	80078de <_malloc_r+0xf2>
 8007832:	f8d8 4000 	ldr.w	r4, [r8]
 8007836:	4626      	mov	r6, r4
 8007838:	2e00      	cmp	r6, #0
 800783a:	d145      	bne.n	80078c8 <_malloc_r+0xdc>
 800783c:	2c00      	cmp	r4, #0
 800783e:	d048      	beq.n	80078d2 <_malloc_r+0xe6>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	4631      	mov	r1, r6
 8007844:	4638      	mov	r0, r7
 8007846:	eb04 0903 	add.w	r9, r4, r3
 800784a:	f000 fa2d 	bl	8007ca8 <_sbrk_r>
 800784e:	4581      	cmp	r9, r0
 8007850:	d13f      	bne.n	80078d2 <_malloc_r+0xe6>
 8007852:	6821      	ldr	r1, [r4, #0]
 8007854:	1a6d      	subs	r5, r5, r1
 8007856:	4629      	mov	r1, r5
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff ffa7 	bl	80077ac <sbrk_aligned>
 800785e:	3001      	adds	r0, #1
 8007860:	d037      	beq.n	80078d2 <_malloc_r+0xe6>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	442b      	add	r3, r5
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	f8d8 3000 	ldr.w	r3, [r8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d038      	beq.n	80078e2 <_malloc_r+0xf6>
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	42a2      	cmp	r2, r4
 8007874:	d12b      	bne.n	80078ce <_malloc_r+0xe2>
 8007876:	2200      	movs	r2, #0
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	e00f      	b.n	800789c <_malloc_r+0xb0>
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	1b52      	subs	r2, r2, r5
 8007880:	d41f      	bmi.n	80078c2 <_malloc_r+0xd6>
 8007882:	2a0b      	cmp	r2, #11
 8007884:	d917      	bls.n	80078b6 <_malloc_r+0xca>
 8007886:	1961      	adds	r1, r4, r5
 8007888:	42a3      	cmp	r3, r4
 800788a:	6025      	str	r5, [r4, #0]
 800788c:	bf18      	it	ne
 800788e:	6059      	strne	r1, [r3, #4]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	bf08      	it	eq
 8007894:	f8c8 1000 	streq.w	r1, [r8]
 8007898:	5162      	str	r2, [r4, r5]
 800789a:	604b      	str	r3, [r1, #4]
 800789c:	4638      	mov	r0, r7
 800789e:	f104 060b 	add.w	r6, r4, #11
 80078a2:	f000 f829 	bl	80078f8 <__malloc_unlock>
 80078a6:	f026 0607 	bic.w	r6, r6, #7
 80078aa:	1d23      	adds	r3, r4, #4
 80078ac:	1af2      	subs	r2, r6, r3
 80078ae:	d0ae      	beq.n	800780e <_malloc_r+0x22>
 80078b0:	1b9b      	subs	r3, r3, r6
 80078b2:	50a3      	str	r3, [r4, r2]
 80078b4:	e7ab      	b.n	800780e <_malloc_r+0x22>
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	d1dd      	bne.n	8007878 <_malloc_r+0x8c>
 80078bc:	f8c8 2000 	str.w	r2, [r8]
 80078c0:	e7ec      	b.n	800789c <_malloc_r+0xb0>
 80078c2:	4623      	mov	r3, r4
 80078c4:	6864      	ldr	r4, [r4, #4]
 80078c6:	e7ac      	b.n	8007822 <_malloc_r+0x36>
 80078c8:	4634      	mov	r4, r6
 80078ca:	6876      	ldr	r6, [r6, #4]
 80078cc:	e7b4      	b.n	8007838 <_malloc_r+0x4c>
 80078ce:	4613      	mov	r3, r2
 80078d0:	e7cc      	b.n	800786c <_malloc_r+0x80>
 80078d2:	230c      	movs	r3, #12
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	4638      	mov	r0, r7
 80078d8:	f000 f80e 	bl	80078f8 <__malloc_unlock>
 80078dc:	e797      	b.n	800780e <_malloc_r+0x22>
 80078de:	6025      	str	r5, [r4, #0]
 80078e0:	e7dc      	b.n	800789c <_malloc_r+0xb0>
 80078e2:	605b      	str	r3, [r3, #4]
 80078e4:	deff      	udf	#255	; 0xff
 80078e6:	bf00      	nop
 80078e8:	20000870 	.word	0x20000870

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_lock+0x8>)
 80078ee:	f000 ba28 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	200009b9 	.word	0x200009b9

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__malloc_unlock+0x8>)
 80078fa:	f000 ba23 	b.w	8007d44 <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	200009b9 	.word	0x200009b9

08007904 <std>:
 8007904:	2300      	movs	r3, #0
 8007906:	b510      	push	{r4, lr}
 8007908:	4604      	mov	r4, r0
 800790a:	e9c0 3300 	strd	r3, r3, [r0]
 800790e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007912:	6083      	str	r3, [r0, #8]
 8007914:	8181      	strh	r1, [r0, #12]
 8007916:	6643      	str	r3, [r0, #100]	; 0x64
 8007918:	81c2      	strh	r2, [r0, #14]
 800791a:	6183      	str	r3, [r0, #24]
 800791c:	4619      	mov	r1, r3
 800791e:	2208      	movs	r2, #8
 8007920:	305c      	adds	r0, #92	; 0x5c
 8007922:	f000 f941 	bl	8007ba8 <memset>
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <std+0x58>)
 8007928:	6263      	str	r3, [r4, #36]	; 0x24
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <std+0x5c>)
 800792c:	62a3      	str	r3, [r4, #40]	; 0x28
 800792e:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <std+0x60>)
 8007930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <std+0x64>)
 8007934:	6323      	str	r3, [r4, #48]	; 0x30
 8007936:	4b0d      	ldr	r3, [pc, #52]	; (800796c <std+0x68>)
 8007938:	6224      	str	r4, [r4, #32]
 800793a:	429c      	cmp	r4, r3
 800793c:	d006      	beq.n	800794c <std+0x48>
 800793e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007942:	4294      	cmp	r4, r2
 8007944:	d002      	beq.n	800794c <std+0x48>
 8007946:	33d0      	adds	r3, #208	; 0xd0
 8007948:	429c      	cmp	r4, r3
 800794a:	d105      	bne.n	8007958 <std+0x54>
 800794c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007954:	f000 b9f4 	b.w	8007d40 <__retarget_lock_init_recursive>
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	08007aad 	.word	0x08007aad
 8007960:	08007acf 	.word	0x08007acf
 8007964:	08007b07 	.word	0x08007b07
 8007968:	08007b2b 	.word	0x08007b2b
 800796c:	20000878 	.word	0x20000878

08007970 <stdio_exit_handler>:
 8007970:	4a02      	ldr	r2, [pc, #8]	; (800797c <stdio_exit_handler+0xc>)
 8007972:	4903      	ldr	r1, [pc, #12]	; (8007980 <stdio_exit_handler+0x10>)
 8007974:	4803      	ldr	r0, [pc, #12]	; (8007984 <stdio_exit_handler+0x14>)
 8007976:	f000 b87b 	b.w	8007a70 <_fwalk_sglue>
 800797a:	bf00      	nop
 800797c:	2000000c 	.word	0x2000000c
 8007980:	0800881d 	.word	0x0800881d
 8007984:	20000018 	.word	0x20000018

08007988 <cleanup_stdio>:
 8007988:	6841      	ldr	r1, [r0, #4]
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <cleanup_stdio+0x34>)
 800798c:	4299      	cmp	r1, r3
 800798e:	b510      	push	{r4, lr}
 8007990:	4604      	mov	r4, r0
 8007992:	d001      	beq.n	8007998 <cleanup_stdio+0x10>
 8007994:	f000 ff42 	bl	800881c <_fflush_r>
 8007998:	68a1      	ldr	r1, [r4, #8]
 800799a:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <cleanup_stdio+0x38>)
 800799c:	4299      	cmp	r1, r3
 800799e:	d002      	beq.n	80079a6 <cleanup_stdio+0x1e>
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 ff3b 	bl	800881c <_fflush_r>
 80079a6:	68e1      	ldr	r1, [r4, #12]
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <cleanup_stdio+0x3c>)
 80079aa:	4299      	cmp	r1, r3
 80079ac:	d004      	beq.n	80079b8 <cleanup_stdio+0x30>
 80079ae:	4620      	mov	r0, r4
 80079b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b4:	f000 bf32 	b.w	800881c <_fflush_r>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	bf00      	nop
 80079bc:	20000878 	.word	0x20000878
 80079c0:	200008e0 	.word	0x200008e0
 80079c4:	20000948 	.word	0x20000948

080079c8 <global_stdio_init.part.0>:
 80079c8:	b510      	push	{r4, lr}
 80079ca:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <global_stdio_init.part.0+0x30>)
 80079cc:	4c0b      	ldr	r4, [pc, #44]	; (80079fc <global_stdio_init.part.0+0x34>)
 80079ce:	4a0c      	ldr	r2, [pc, #48]	; (8007a00 <global_stdio_init.part.0+0x38>)
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	4620      	mov	r0, r4
 80079d4:	2200      	movs	r2, #0
 80079d6:	2104      	movs	r1, #4
 80079d8:	f7ff ff94 	bl	8007904 <std>
 80079dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80079e0:	2201      	movs	r2, #1
 80079e2:	2109      	movs	r1, #9
 80079e4:	f7ff ff8e 	bl	8007904 <std>
 80079e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079ec:	2202      	movs	r2, #2
 80079ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f2:	2112      	movs	r1, #18
 80079f4:	f7ff bf86 	b.w	8007904 <std>
 80079f8:	200009b0 	.word	0x200009b0
 80079fc:	20000878 	.word	0x20000878
 8007a00:	08007971 	.word	0x08007971

08007a04 <__sfp_lock_acquire>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__sfp_lock_acquire+0x8>)
 8007a06:	f000 b99c 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	200009ba 	.word	0x200009ba

08007a10 <__sfp_lock_release>:
 8007a10:	4801      	ldr	r0, [pc, #4]	; (8007a18 <__sfp_lock_release+0x8>)
 8007a12:	f000 b997 	b.w	8007d44 <__retarget_lock_release_recursive>
 8007a16:	bf00      	nop
 8007a18:	200009ba 	.word	0x200009ba

08007a1c <__sinit>:
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f7ff fff0 	bl	8007a04 <__sfp_lock_acquire>
 8007a24:	6a23      	ldr	r3, [r4, #32]
 8007a26:	b11b      	cbz	r3, 8007a30 <__sinit+0x14>
 8007a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2c:	f7ff bff0 	b.w	8007a10 <__sfp_lock_release>
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <__sinit+0x28>)
 8007a32:	6223      	str	r3, [r4, #32]
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <__sinit+0x2c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f5      	bne.n	8007a28 <__sinit+0xc>
 8007a3c:	f7ff ffc4 	bl	80079c8 <global_stdio_init.part.0>
 8007a40:	e7f2      	b.n	8007a28 <__sinit+0xc>
 8007a42:	bf00      	nop
 8007a44:	08007989 	.word	0x08007989
 8007a48:	200009b0 	.word	0x200009b0

08007a4c <fiprintf>:
 8007a4c:	b40e      	push	{r1, r2, r3}
 8007a4e:	b503      	push	{r0, r1, lr}
 8007a50:	4601      	mov	r1, r0
 8007a52:	ab03      	add	r3, sp, #12
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <fiprintf+0x20>)
 8007a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	f000 fbad 	bl	80081bc <_vfiprintf_r>
 8007a62:	b002      	add	sp, #8
 8007a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a68:	b003      	add	sp, #12
 8007a6a:	4770      	bx	lr
 8007a6c:	20000064 	.word	0x20000064

08007a70 <_fwalk_sglue>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	4607      	mov	r7, r0
 8007a76:	4688      	mov	r8, r1
 8007a78:	4614      	mov	r4, r2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a80:	f1b9 0901 	subs.w	r9, r9, #1
 8007a84:	d505      	bpl.n	8007a92 <_fwalk_sglue+0x22>
 8007a86:	6824      	ldr	r4, [r4, #0]
 8007a88:	2c00      	cmp	r4, #0
 8007a8a:	d1f7      	bne.n	8007a7c <_fwalk_sglue+0xc>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d907      	bls.n	8007aa8 <_fwalk_sglue+0x38>
 8007a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	d003      	beq.n	8007aa8 <_fwalk_sglue+0x38>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c0      	blx	r8
 8007aa6:	4306      	orrs	r6, r0
 8007aa8:	3568      	adds	r5, #104	; 0x68
 8007aaa:	e7e9      	b.n	8007a80 <_fwalk_sglue+0x10>

08007aac <__sread>:
 8007aac:	b510      	push	{r4, lr}
 8007aae:	460c      	mov	r4, r1
 8007ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab4:	f000 f8d2 	bl	8007c5c <_read_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	bfab      	itete	ge
 8007abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007abe:	89a3      	ldrhlt	r3, [r4, #12]
 8007ac0:	181b      	addge	r3, r3, r0
 8007ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ac6:	bfac      	ite	ge
 8007ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aca:	81a3      	strhlt	r3, [r4, #12]
 8007acc:	bd10      	pop	{r4, pc}

08007ace <__swrite>:
 8007ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad2:	461f      	mov	r7, r3
 8007ad4:	898b      	ldrh	r3, [r1, #12]
 8007ad6:	05db      	lsls	r3, r3, #23
 8007ad8:	4605      	mov	r5, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	4616      	mov	r6, r2
 8007ade:	d505      	bpl.n	8007aec <__swrite+0x1e>
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f000 f8a6 	bl	8007c38 <_lseek_r>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	4632      	mov	r2, r6
 8007afa:	463b      	mov	r3, r7
 8007afc:	4628      	mov	r0, r5
 8007afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	f000 b8e1 	b.w	8007cc8 <_write_r>

08007b06 <__sseek>:
 8007b06:	b510      	push	{r4, lr}
 8007b08:	460c      	mov	r4, r1
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	f000 f893 	bl	8007c38 <_lseek_r>
 8007b12:	1c43      	adds	r3, r0, #1
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	bf15      	itete	ne
 8007b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b22:	81a3      	strheq	r3, [r4, #12]
 8007b24:	bf18      	it	ne
 8007b26:	81a3      	strhne	r3, [r4, #12]
 8007b28:	bd10      	pop	{r4, pc}

08007b2a <__sclose>:
 8007b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2e:	f000 b873 	b.w	8007c18 <_close_r>
	...

08007b34 <_vsiprintf_r>:
 8007b34:	b500      	push	{lr}
 8007b36:	b09b      	sub	sp, #108	; 0x6c
 8007b38:	9100      	str	r1, [sp, #0]
 8007b3a:	9104      	str	r1, [sp, #16]
 8007b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b40:	9105      	str	r1, [sp, #20]
 8007b42:	9102      	str	r1, [sp, #8]
 8007b44:	4905      	ldr	r1, [pc, #20]	; (8007b5c <_vsiprintf_r+0x28>)
 8007b46:	9103      	str	r1, [sp, #12]
 8007b48:	4669      	mov	r1, sp
 8007b4a:	f000 fa0f 	bl	8007f6c <_svfiprintf_r>
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	b01b      	add	sp, #108	; 0x6c
 8007b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b5a:	bf00      	nop
 8007b5c:	ffff0208 	.word	0xffff0208

08007b60 <vsiprintf>:
 8007b60:	4613      	mov	r3, r2
 8007b62:	460a      	mov	r2, r1
 8007b64:	4601      	mov	r1, r0
 8007b66:	4802      	ldr	r0, [pc, #8]	; (8007b70 <vsiprintf+0x10>)
 8007b68:	6800      	ldr	r0, [r0, #0]
 8007b6a:	f7ff bfe3 	b.w	8007b34 <_vsiprintf_r>
 8007b6e:	bf00      	nop
 8007b70:	20000064 	.word	0x20000064

08007b74 <memmove>:
 8007b74:	4288      	cmp	r0, r1
 8007b76:	b510      	push	{r4, lr}
 8007b78:	eb01 0402 	add.w	r4, r1, r2
 8007b7c:	d902      	bls.n	8007b84 <memmove+0x10>
 8007b7e:	4284      	cmp	r4, r0
 8007b80:	4623      	mov	r3, r4
 8007b82:	d807      	bhi.n	8007b94 <memmove+0x20>
 8007b84:	1e43      	subs	r3, r0, #1
 8007b86:	42a1      	cmp	r1, r4
 8007b88:	d008      	beq.n	8007b9c <memmove+0x28>
 8007b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b92:	e7f8      	b.n	8007b86 <memmove+0x12>
 8007b94:	4402      	add	r2, r0
 8007b96:	4601      	mov	r1, r0
 8007b98:	428a      	cmp	r2, r1
 8007b9a:	d100      	bne.n	8007b9e <memmove+0x2a>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba6:	e7f7      	b.n	8007b98 <memmove+0x24>

08007ba8 <memset>:
 8007ba8:	4402      	add	r2, r0
 8007baa:	4603      	mov	r3, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <_raise_r>:
 8007bb8:	291f      	cmp	r1, #31
 8007bba:	b538      	push	{r3, r4, r5, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	460d      	mov	r5, r1
 8007bc0:	d904      	bls.n	8007bcc <_raise_r+0x14>
 8007bc2:	2316      	movs	r3, #22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bce:	b112      	cbz	r2, 8007bd6 <_raise_r+0x1e>
 8007bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bd4:	b94b      	cbnz	r3, 8007bea <_raise_r+0x32>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f864 	bl	8007ca4 <_getpid_r>
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4601      	mov	r1, r0
 8007be0:	4620      	mov	r0, r4
 8007be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be6:	f000 b84b 	b.w	8007c80 <_kill_r>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d00a      	beq.n	8007c04 <_raise_r+0x4c>
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	d103      	bne.n	8007bfa <_raise_r+0x42>
 8007bf2:	2316      	movs	r3, #22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7e7      	b.n	8007bca <_raise_r+0x12>
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c00:	4628      	mov	r0, r5
 8007c02:	4798      	blx	r3
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7e0      	b.n	8007bca <_raise_r+0x12>

08007c08 <raise>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <raise+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f7ff bfd3 	b.w	8007bb8 <_raise_r>
 8007c12:	bf00      	nop
 8007c14:	20000064 	.word	0x20000064

08007c18 <_close_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	; (8007c34 <_close_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7f9 f8e7 	bl	8000df6 <_close>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_close_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_close_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200009b4 	.word	0x200009b4

08007c38 <_lseek_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	; (8007c58 <_lseek_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7f9 f8fc 	bl	8000e44 <_lseek>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_lseek_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_lseek_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200009b4 	.word	0x200009b4

08007c5c <_read_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_read_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f9 f88a 	bl	8000d84 <_read>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_read_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_read_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200009b4 	.word	0x200009b4

08007c80 <_kill_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_kill_r+0x20>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	f7f9 f85f 	bl	8000d50 <_kill>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d102      	bne.n	8007c9c <_kill_r+0x1c>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b103      	cbz	r3, 8007c9c <_kill_r+0x1c>
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200009b4 	.word	0x200009b4

08007ca4 <_getpid_r>:
 8007ca4:	f7f9 b84c 	b.w	8000d40 <_getpid>

08007ca8 <_sbrk_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d06      	ldr	r5, [pc, #24]	; (8007cc4 <_sbrk_r+0x1c>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	602b      	str	r3, [r5, #0]
 8007cb4:	f7f9 f8d4 	bl	8000e60 <_sbrk>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_sbrk_r+0x1a>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_sbrk_r+0x1a>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	200009b4 	.word	0x200009b4

08007cc8 <_write_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_write_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7f9 f871 	bl	8000dbe <_write>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_write_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_write_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	200009b4 	.word	0x200009b4

08007cec <__errno>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <__errno+0x8>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000064 	.word	0x20000064

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	; (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	; (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	; (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f000 ff00 	bl	8008b10 <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08008f7c 	.word	0x08008f7c
 8007d34:	08008f7c 	.word	0x08008f7c
 8007d38:	08008f7c 	.word	0x08008f7c
 8007d3c:	08008f88 	.word	0x08008f88

08007d40 <__retarget_lock_init_recursive>:
 8007d40:	4770      	bx	lr

08007d42 <__retarget_lock_acquire_recursive>:
 8007d42:	4770      	bx	lr

08007d44 <__retarget_lock_release_recursive>:
 8007d44:	4770      	bx	lr

08007d46 <memcpy>:
 8007d46:	440a      	add	r2, r1
 8007d48:	4291      	cmp	r1, r2
 8007d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d4e:	d100      	bne.n	8007d52 <memcpy+0xc>
 8007d50:	4770      	bx	lr
 8007d52:	b510      	push	{r4, lr}
 8007d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d5c:	4291      	cmp	r1, r2
 8007d5e:	d1f9      	bne.n	8007d54 <memcpy+0xe>
 8007d60:	bd10      	pop	{r4, pc}
	...

08007d64 <__register_exitproc>:
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007e1c <__register_exitproc+0xb8>
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f8d8 0000 	ldr.w	r0, [r8]
 8007d72:	461f      	mov	r7, r3
 8007d74:	460d      	mov	r5, r1
 8007d76:	4691      	mov	r9, r2
 8007d78:	f7ff ffe3 	bl	8007d42 <__retarget_lock_acquire_recursive>
 8007d7c:	4b23      	ldr	r3, [pc, #140]	; (8007e0c <__register_exitproc+0xa8>)
 8007d7e:	681c      	ldr	r4, [r3, #0]
 8007d80:	b934      	cbnz	r4, 8007d90 <__register_exitproc+0x2c>
 8007d82:	4c23      	ldr	r4, [pc, #140]	; (8007e10 <__register_exitproc+0xac>)
 8007d84:	601c      	str	r4, [r3, #0]
 8007d86:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <__register_exitproc+0xb0>)
 8007d88:	b113      	cbz	r3, 8007d90 <__register_exitproc+0x2c>
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8007d90:	6863      	ldr	r3, [r4, #4]
 8007d92:	2b1f      	cmp	r3, #31
 8007d94:	dd07      	ble.n	8007da6 <__register_exitproc+0x42>
 8007d96:	f8d8 0000 	ldr.w	r0, [r8]
 8007d9a:	f7ff ffd3 	bl	8007d44 <__retarget_lock_release_recursive>
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da6:	b32e      	cbz	r6, 8007df4 <__register_exitproc+0x90>
 8007da8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007dac:	b968      	cbnz	r0, 8007dca <__register_exitproc+0x66>
 8007dae:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <__register_exitproc+0xb4>)
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <__register_exitproc+0x32>
 8007db4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007db8:	f7ff fce8 	bl	800778c <malloc>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d0ea      	beq.n	8007d96 <__register_exitproc+0x32>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007dc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007dd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007de2:	2e02      	cmp	r6, #2
 8007de4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007de8:	bf02      	ittt	eq
 8007dea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8007dee:	4313      	orreq	r3, r2
 8007df0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	f8d8 0000 	ldr.w	r0, [r8]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	6062      	str	r2, [r4, #4]
 8007e00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007e04:	f7ff ff9e 	bl	8007d44 <__retarget_lock_release_recursive>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e7ca      	b.n	8007da2 <__register_exitproc+0x3e>
 8007e0c:	20000a48 	.word	0x20000a48
 8007e10:	200009bc 	.word	0x200009bc
 8007e14:	00000000 	.word	0x00000000
 8007e18:	0800778d 	.word	0x0800778d
 8007e1c:	20000068 	.word	0x20000068

08007e20 <_free_r>:
 8007e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d044      	beq.n	8007eb0 <_free_r+0x90>
 8007e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2a:	9001      	str	r0, [sp, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e32:	bfb8      	it	lt
 8007e34:	18e4      	addlt	r4, r4, r3
 8007e36:	f7ff fd59 	bl	80078ec <__malloc_lock>
 8007e3a:	4a1e      	ldr	r2, [pc, #120]	; (8007eb4 <_free_r+0x94>)
 8007e3c:	9801      	ldr	r0, [sp, #4]
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	b933      	cbnz	r3, 8007e50 <_free_r+0x30>
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	6014      	str	r4, [r2, #0]
 8007e46:	b003      	add	sp, #12
 8007e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e4c:	f7ff bd54 	b.w	80078f8 <__malloc_unlock>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d908      	bls.n	8007e66 <_free_r+0x46>
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	1961      	adds	r1, r4, r5
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf01      	itttt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	1949      	addeq	r1, r1, r5
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	e7ed      	b.n	8007e42 <_free_r+0x22>
 8007e66:	461a      	mov	r2, r3
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b10b      	cbz	r3, 8007e70 <_free_r+0x50>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d9fa      	bls.n	8007e66 <_free_r+0x46>
 8007e70:	6811      	ldr	r1, [r2, #0]
 8007e72:	1855      	adds	r5, r2, r1
 8007e74:	42a5      	cmp	r5, r4
 8007e76:	d10b      	bne.n	8007e90 <_free_r+0x70>
 8007e78:	6824      	ldr	r4, [r4, #0]
 8007e7a:	4421      	add	r1, r4
 8007e7c:	1854      	adds	r4, r2, r1
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	d1e0      	bne.n	8007e46 <_free_r+0x26>
 8007e84:	681c      	ldr	r4, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	6053      	str	r3, [r2, #4]
 8007e8a:	440c      	add	r4, r1
 8007e8c:	6014      	str	r4, [r2, #0]
 8007e8e:	e7da      	b.n	8007e46 <_free_r+0x26>
 8007e90:	d902      	bls.n	8007e98 <_free_r+0x78>
 8007e92:	230c      	movs	r3, #12
 8007e94:	6003      	str	r3, [r0, #0]
 8007e96:	e7d6      	b.n	8007e46 <_free_r+0x26>
 8007e98:	6825      	ldr	r5, [r4, #0]
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf04      	itt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	6063      	str	r3, [r4, #4]
 8007ea6:	bf04      	itt	eq
 8007ea8:	1949      	addeq	r1, r1, r5
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	6054      	str	r4, [r2, #4]
 8007eae:	e7ca      	b.n	8007e46 <_free_r+0x26>
 8007eb0:	b003      	add	sp, #12
 8007eb2:	bd30      	pop	{r4, r5, pc}
 8007eb4:	20000870 	.word	0x20000870

08007eb8 <__ssputs_r>:
 8007eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	688e      	ldr	r6, [r1, #8]
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	42be      	cmp	r6, r7
 8007ec2:	680b      	ldr	r3, [r1, #0]
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4690      	mov	r8, r2
 8007eca:	d82c      	bhi.n	8007f26 <__ssputs_r+0x6e>
 8007ecc:	898a      	ldrh	r2, [r1, #12]
 8007ece:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ed2:	d026      	beq.n	8007f22 <__ssputs_r+0x6a>
 8007ed4:	6965      	ldr	r5, [r4, #20]
 8007ed6:	6909      	ldr	r1, [r1, #16]
 8007ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007edc:	eba3 0901 	sub.w	r9, r3, r1
 8007ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ee4:	1c7b      	adds	r3, r7, #1
 8007ee6:	444b      	add	r3, r9
 8007ee8:	106d      	asrs	r5, r5, #1
 8007eea:	429d      	cmp	r5, r3
 8007eec:	bf38      	it	cc
 8007eee:	461d      	movcc	r5, r3
 8007ef0:	0553      	lsls	r3, r2, #21
 8007ef2:	d527      	bpl.n	8007f44 <__ssputs_r+0x8c>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7ff fc79 	bl	80077ec <_malloc_r>
 8007efa:	4606      	mov	r6, r0
 8007efc:	b360      	cbz	r0, 8007f58 <__ssputs_r+0xa0>
 8007efe:	6921      	ldr	r1, [r4, #16]
 8007f00:	464a      	mov	r2, r9
 8007f02:	f7ff ff20 	bl	8007d46 <memcpy>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	6126      	str	r6, [r4, #16]
 8007f14:	6165      	str	r5, [r4, #20]
 8007f16:	444e      	add	r6, r9
 8007f18:	eba5 0509 	sub.w	r5, r5, r9
 8007f1c:	6026      	str	r6, [r4, #0]
 8007f1e:	60a5      	str	r5, [r4, #8]
 8007f20:	463e      	mov	r6, r7
 8007f22:	42be      	cmp	r6, r7
 8007f24:	d900      	bls.n	8007f28 <__ssputs_r+0x70>
 8007f26:	463e      	mov	r6, r7
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	4632      	mov	r2, r6
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	f7ff fe21 	bl	8007b74 <memmove>
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	1b9b      	subs	r3, r3, r6
 8007f36:	60a3      	str	r3, [r4, #8]
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	4433      	add	r3, r6
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f44:	462a      	mov	r2, r5
 8007f46:	f000 fd27 	bl	8008998 <_realloc_r>
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1e0      	bne.n	8007f12 <__ssputs_r+0x5a>
 8007f50:	6921      	ldr	r1, [r4, #16]
 8007f52:	4650      	mov	r0, sl
 8007f54:	f7ff ff64 	bl	8007e20 <_free_r>
 8007f58:	230c      	movs	r3, #12
 8007f5a:	f8ca 3000 	str.w	r3, [sl]
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6a:	e7e9      	b.n	8007f40 <__ssputs_r+0x88>

08007f6c <_svfiprintf_r>:
 8007f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	4698      	mov	r8, r3
 8007f72:	898b      	ldrh	r3, [r1, #12]
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	b09d      	sub	sp, #116	; 0x74
 8007f78:	4607      	mov	r7, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	d50e      	bpl.n	8007f9e <_svfiprintf_r+0x32>
 8007f80:	690b      	ldr	r3, [r1, #16]
 8007f82:	b963      	cbnz	r3, 8007f9e <_svfiprintf_r+0x32>
 8007f84:	2140      	movs	r1, #64	; 0x40
 8007f86:	f7ff fc31 	bl	80077ec <_malloc_r>
 8007f8a:	6028      	str	r0, [r5, #0]
 8007f8c:	6128      	str	r0, [r5, #16]
 8007f8e:	b920      	cbnz	r0, 8007f9a <_svfiprintf_r+0x2e>
 8007f90:	230c      	movs	r3, #12
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e0d0      	b.n	800813c <_svfiprintf_r+0x1d0>
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	616b      	str	r3, [r5, #20]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	2320      	movs	r3, #32
 8007fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fac:	2330      	movs	r3, #48	; 0x30
 8007fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008154 <_svfiprintf_r+0x1e8>
 8007fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fb6:	f04f 0901 	mov.w	r9, #1
 8007fba:	4623      	mov	r3, r4
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc2:	b10a      	cbz	r2, 8007fc8 <_svfiprintf_r+0x5c>
 8007fc4:	2a25      	cmp	r2, #37	; 0x25
 8007fc6:	d1f9      	bne.n	8007fbc <_svfiprintf_r+0x50>
 8007fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fcc:	d00b      	beq.n	8007fe6 <_svfiprintf_r+0x7a>
 8007fce:	465b      	mov	r3, fp
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff ff6f 	bl	8007eb8 <__ssputs_r>
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f000 80a9 	beq.w	8008132 <_svfiprintf_r+0x1c6>
 8007fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe2:	445a      	add	r2, fp
 8007fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 80a1 	beq.w	8008132 <_svfiprintf_r+0x1c6>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ffa:	f10a 0a01 	add.w	sl, sl, #1
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	9307      	str	r3, [sp, #28]
 8008002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008006:	931a      	str	r3, [sp, #104]	; 0x68
 8008008:	4654      	mov	r4, sl
 800800a:	2205      	movs	r2, #5
 800800c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008010:	4850      	ldr	r0, [pc, #320]	; (8008154 <_svfiprintf_r+0x1e8>)
 8008012:	f7f8 f8fd 	bl	8000210 <memchr>
 8008016:	9a04      	ldr	r2, [sp, #16]
 8008018:	b9d8      	cbnz	r0, 8008052 <_svfiprintf_r+0xe6>
 800801a:	06d0      	lsls	r0, r2, #27
 800801c:	bf44      	itt	mi
 800801e:	2320      	movmi	r3, #32
 8008020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008024:	0711      	lsls	r1, r2, #28
 8008026:	bf44      	itt	mi
 8008028:	232b      	movmi	r3, #43	; 0x2b
 800802a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802e:	f89a 3000 	ldrb.w	r3, [sl]
 8008032:	2b2a      	cmp	r3, #42	; 0x2a
 8008034:	d015      	beq.n	8008062 <_svfiprintf_r+0xf6>
 8008036:	9a07      	ldr	r2, [sp, #28]
 8008038:	4654      	mov	r4, sl
 800803a:	2000      	movs	r0, #0
 800803c:	f04f 0c0a 	mov.w	ip, #10
 8008040:	4621      	mov	r1, r4
 8008042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008046:	3b30      	subs	r3, #48	; 0x30
 8008048:	2b09      	cmp	r3, #9
 800804a:	d94d      	bls.n	80080e8 <_svfiprintf_r+0x17c>
 800804c:	b1b0      	cbz	r0, 800807c <_svfiprintf_r+0x110>
 800804e:	9207      	str	r2, [sp, #28]
 8008050:	e014      	b.n	800807c <_svfiprintf_r+0x110>
 8008052:	eba0 0308 	sub.w	r3, r0, r8
 8008056:	fa09 f303 	lsl.w	r3, r9, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	46a2      	mov	sl, r4
 8008060:	e7d2      	b.n	8008008 <_svfiprintf_r+0x9c>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	1d19      	adds	r1, r3, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	9103      	str	r1, [sp, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	bfbb      	ittet	lt
 800806e:	425b      	neglt	r3, r3
 8008070:	f042 0202 	orrlt.w	r2, r2, #2
 8008074:	9307      	strge	r3, [sp, #28]
 8008076:	9307      	strlt	r3, [sp, #28]
 8008078:	bfb8      	it	lt
 800807a:	9204      	strlt	r2, [sp, #16]
 800807c:	7823      	ldrb	r3, [r4, #0]
 800807e:	2b2e      	cmp	r3, #46	; 0x2e
 8008080:	d10c      	bne.n	800809c <_svfiprintf_r+0x130>
 8008082:	7863      	ldrb	r3, [r4, #1]
 8008084:	2b2a      	cmp	r3, #42	; 0x2a
 8008086:	d134      	bne.n	80080f2 <_svfiprintf_r+0x186>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfb8      	it	lt
 8008094:	f04f 33ff 	movlt.w	r3, #4294967295
 8008098:	3402      	adds	r4, #2
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008164 <_svfiprintf_r+0x1f8>
 80080a0:	7821      	ldrb	r1, [r4, #0]
 80080a2:	2203      	movs	r2, #3
 80080a4:	4650      	mov	r0, sl
 80080a6:	f7f8 f8b3 	bl	8000210 <memchr>
 80080aa:	b138      	cbz	r0, 80080bc <_svfiprintf_r+0x150>
 80080ac:	9b04      	ldr	r3, [sp, #16]
 80080ae:	eba0 000a 	sub.w	r0, r0, sl
 80080b2:	2240      	movs	r2, #64	; 0x40
 80080b4:	4082      	lsls	r2, r0
 80080b6:	4313      	orrs	r3, r2
 80080b8:	3401      	adds	r4, #1
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	4825      	ldr	r0, [pc, #148]	; (8008158 <_svfiprintf_r+0x1ec>)
 80080c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c6:	2206      	movs	r2, #6
 80080c8:	f7f8 f8a2 	bl	8000210 <memchr>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d038      	beq.n	8008142 <_svfiprintf_r+0x1d6>
 80080d0:	4b22      	ldr	r3, [pc, #136]	; (800815c <_svfiprintf_r+0x1f0>)
 80080d2:	bb1b      	cbnz	r3, 800811c <_svfiprintf_r+0x1b0>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	3307      	adds	r3, #7
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	3308      	adds	r3, #8
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e2:	4433      	add	r3, r6
 80080e4:	9309      	str	r3, [sp, #36]	; 0x24
 80080e6:	e768      	b.n	8007fba <_svfiprintf_r+0x4e>
 80080e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ec:	460c      	mov	r4, r1
 80080ee:	2001      	movs	r0, #1
 80080f0:	e7a6      	b.n	8008040 <_svfiprintf_r+0xd4>
 80080f2:	2300      	movs	r3, #0
 80080f4:	3401      	adds	r4, #1
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	4619      	mov	r1, r3
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4620      	mov	r0, r4
 8008100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008104:	3a30      	subs	r2, #48	; 0x30
 8008106:	2a09      	cmp	r2, #9
 8008108:	d903      	bls.n	8008112 <_svfiprintf_r+0x1a6>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0c6      	beq.n	800809c <_svfiprintf_r+0x130>
 800810e:	9105      	str	r1, [sp, #20]
 8008110:	e7c4      	b.n	800809c <_svfiprintf_r+0x130>
 8008112:	fb0c 2101 	mla	r1, ip, r1, r2
 8008116:	4604      	mov	r4, r0
 8008118:	2301      	movs	r3, #1
 800811a:	e7f0      	b.n	80080fe <_svfiprintf_r+0x192>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <_svfiprintf_r+0x1f4>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4638      	mov	r0, r7
 8008128:	f3af 8000 	nop.w
 800812c:	1c42      	adds	r2, r0, #1
 800812e:	4606      	mov	r6, r0
 8008130:	d1d6      	bne.n	80080e0 <_svfiprintf_r+0x174>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	065b      	lsls	r3, r3, #25
 8008136:	f53f af2d 	bmi.w	8007f94 <_svfiprintf_r+0x28>
 800813a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800813c:	b01d      	add	sp, #116	; 0x74
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	ab03      	add	r3, sp, #12
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	462a      	mov	r2, r5
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <_svfiprintf_r+0x1f4>)
 800814a:	a904      	add	r1, sp, #16
 800814c:	4638      	mov	r0, r7
 800814e:	f000 f9bd 	bl	80084cc <_printf_i>
 8008152:	e7eb      	b.n	800812c <_svfiprintf_r+0x1c0>
 8008154:	08008f3f 	.word	0x08008f3f
 8008158:	08008f49 	.word	0x08008f49
 800815c:	00000000 	.word	0x00000000
 8008160:	08007eb9 	.word	0x08007eb9
 8008164:	08008f45 	.word	0x08008f45

08008168 <__sfputc_r>:
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	b410      	push	{r4}
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	da08      	bge.n	8008186 <__sfputc_r+0x1e>
 8008174:	6994      	ldr	r4, [r2, #24]
 8008176:	42a3      	cmp	r3, r4
 8008178:	db01      	blt.n	800817e <__sfputc_r+0x16>
 800817a:	290a      	cmp	r1, #10
 800817c:	d103      	bne.n	8008186 <__sfputc_r+0x1e>
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	f000 bb73 	b.w	800886c <__swbuf_r>
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	1c58      	adds	r0, r3, #1
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	7019      	strb	r1, [r3, #0]
 800818e:	4608      	mov	r0, r1
 8008190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008194:	4770      	bx	lr

08008196 <__sfputs_r>:
 8008196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4614      	mov	r4, r2
 800819e:	18d5      	adds	r5, r2, r3
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	d101      	bne.n	80081a8 <__sfputs_r+0x12>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e007      	b.n	80081b8 <__sfputs_r+0x22>
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	463a      	mov	r2, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffda 	bl	8008168 <__sfputc_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1f3      	bne.n	80081a0 <__sfputs_r+0xa>
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081bc <_vfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	b09d      	sub	sp, #116	; 0x74
 80081c4:	4614      	mov	r4, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	4606      	mov	r6, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_vfiprintf_r+0x18>
 80081cc:	6a03      	ldr	r3, [r0, #32]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x18>
 80081d0:	f7ff fc24 	bl	8007a1c <__sinit>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e2:	f7ff fdae 	bl	8007d42 <__retarget_lock_acquire_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	d501      	bpl.n	80081f0 <_vfiprintf_r+0x34>
 80081ec:	692b      	ldr	r3, [r5, #16]
 80081ee:	b99b      	cbnz	r3, 8008218 <_vfiprintf_r+0x5c>
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 fb78 	bl	80088e8 <__swsetup_r>
 80081f8:	b170      	cbz	r0, 8008218 <_vfiprintf_r+0x5c>
 80081fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081fc:	07dc      	lsls	r4, r3, #31
 80081fe:	d504      	bpl.n	800820a <_vfiprintf_r+0x4e>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	b01d      	add	sp, #116	; 0x74
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	0598      	lsls	r0, r3, #22
 800820e:	d4f7      	bmi.n	8008200 <_vfiprintf_r+0x44>
 8008210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008212:	f7ff fd97 	bl	8007d44 <__retarget_lock_release_recursive>
 8008216:	e7f3      	b.n	8008200 <_vfiprintf_r+0x44>
 8008218:	2300      	movs	r3, #0
 800821a:	9309      	str	r3, [sp, #36]	; 0x24
 800821c:	2320      	movs	r3, #32
 800821e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008222:	f8cd 800c 	str.w	r8, [sp, #12]
 8008226:	2330      	movs	r3, #48	; 0x30
 8008228:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083dc <_vfiprintf_r+0x220>
 800822c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008230:	f04f 0901 	mov.w	r9, #1
 8008234:	4623      	mov	r3, r4
 8008236:	469a      	mov	sl, r3
 8008238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823c:	b10a      	cbz	r2, 8008242 <_vfiprintf_r+0x86>
 800823e:	2a25      	cmp	r2, #37	; 0x25
 8008240:	d1f9      	bne.n	8008236 <_vfiprintf_r+0x7a>
 8008242:	ebba 0b04 	subs.w	fp, sl, r4
 8008246:	d00b      	beq.n	8008260 <_vfiprintf_r+0xa4>
 8008248:	465b      	mov	r3, fp
 800824a:	4622      	mov	r2, r4
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffa1 	bl	8008196 <__sfputs_r>
 8008254:	3001      	adds	r0, #1
 8008256:	f000 80a9 	beq.w	80083ac <_vfiprintf_r+0x1f0>
 800825a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825c:	445a      	add	r2, fp
 800825e:	9209      	str	r2, [sp, #36]	; 0x24
 8008260:	f89a 3000 	ldrb.w	r3, [sl]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 80a1 	beq.w	80083ac <_vfiprintf_r+0x1f0>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008274:	f10a 0a01 	add.w	sl, sl, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008280:	931a      	str	r3, [sp, #104]	; 0x68
 8008282:	4654      	mov	r4, sl
 8008284:	2205      	movs	r2, #5
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4854      	ldr	r0, [pc, #336]	; (80083dc <_vfiprintf_r+0x220>)
 800828c:	f7f7 ffc0 	bl	8000210 <memchr>
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	b9d8      	cbnz	r0, 80082cc <_vfiprintf_r+0x110>
 8008294:	06d1      	lsls	r1, r2, #27
 8008296:	bf44      	itt	mi
 8008298:	2320      	movmi	r3, #32
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829e:	0713      	lsls	r3, r2, #28
 80082a0:	bf44      	itt	mi
 80082a2:	232b      	movmi	r3, #43	; 0x2b
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ac:	2b2a      	cmp	r3, #42	; 0x2a
 80082ae:	d015      	beq.n	80082dc <_vfiprintf_r+0x120>
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4654      	mov	r4, sl
 80082b4:	2000      	movs	r0, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	4621      	mov	r1, r4
 80082bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c0:	3b30      	subs	r3, #48	; 0x30
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d94d      	bls.n	8008362 <_vfiprintf_r+0x1a6>
 80082c6:	b1b0      	cbz	r0, 80082f6 <_vfiprintf_r+0x13a>
 80082c8:	9207      	str	r2, [sp, #28]
 80082ca:	e014      	b.n	80082f6 <_vfiprintf_r+0x13a>
 80082cc:	eba0 0308 	sub.w	r3, r0, r8
 80082d0:	fa09 f303 	lsl.w	r3, r9, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	46a2      	mov	sl, r4
 80082da:	e7d2      	b.n	8008282 <_vfiprintf_r+0xc6>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d19      	adds	r1, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbb      	ittet	lt
 80082e8:	425b      	neglt	r3, r3
 80082ea:	f042 0202 	orrlt.w	r2, r2, #2
 80082ee:	9307      	strge	r3, [sp, #28]
 80082f0:	9307      	strlt	r3, [sp, #28]
 80082f2:	bfb8      	it	lt
 80082f4:	9204      	strlt	r2, [sp, #16]
 80082f6:	7823      	ldrb	r3, [r4, #0]
 80082f8:	2b2e      	cmp	r3, #46	; 0x2e
 80082fa:	d10c      	bne.n	8008316 <_vfiprintf_r+0x15a>
 80082fc:	7863      	ldrb	r3, [r4, #1]
 80082fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008300:	d134      	bne.n	800836c <_vfiprintf_r+0x1b0>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	9203      	str	r2, [sp, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfb8      	it	lt
 800830e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008312:	3402      	adds	r4, #2
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80083ec <_vfiprintf_r+0x230>
 800831a:	7821      	ldrb	r1, [r4, #0]
 800831c:	2203      	movs	r2, #3
 800831e:	4650      	mov	r0, sl
 8008320:	f7f7 ff76 	bl	8000210 <memchr>
 8008324:	b138      	cbz	r0, 8008336 <_vfiprintf_r+0x17a>
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	eba0 000a 	sub.w	r0, r0, sl
 800832c:	2240      	movs	r2, #64	; 0x40
 800832e:	4082      	lsls	r2, r0
 8008330:	4313      	orrs	r3, r2
 8008332:	3401      	adds	r4, #1
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833a:	4829      	ldr	r0, [pc, #164]	; (80083e0 <_vfiprintf_r+0x224>)
 800833c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008340:	2206      	movs	r2, #6
 8008342:	f7f7 ff65 	bl	8000210 <memchr>
 8008346:	2800      	cmp	r0, #0
 8008348:	d03f      	beq.n	80083ca <_vfiprintf_r+0x20e>
 800834a:	4b26      	ldr	r3, [pc, #152]	; (80083e4 <_vfiprintf_r+0x228>)
 800834c:	bb1b      	cbnz	r3, 8008396 <_vfiprintf_r+0x1da>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	3307      	adds	r3, #7
 8008352:	f023 0307 	bic.w	r3, r3, #7
 8008356:	3308      	adds	r3, #8
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	443b      	add	r3, r7
 800835e:	9309      	str	r3, [sp, #36]	; 0x24
 8008360:	e768      	b.n	8008234 <_vfiprintf_r+0x78>
 8008362:	fb0c 3202 	mla	r2, ip, r2, r3
 8008366:	460c      	mov	r4, r1
 8008368:	2001      	movs	r0, #1
 800836a:	e7a6      	b.n	80082ba <_vfiprintf_r+0xfe>
 800836c:	2300      	movs	r3, #0
 800836e:	3401      	adds	r4, #1
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	4619      	mov	r1, r3
 8008374:	f04f 0c0a 	mov.w	ip, #10
 8008378:	4620      	mov	r0, r4
 800837a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837e:	3a30      	subs	r2, #48	; 0x30
 8008380:	2a09      	cmp	r2, #9
 8008382:	d903      	bls.n	800838c <_vfiprintf_r+0x1d0>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0c6      	beq.n	8008316 <_vfiprintf_r+0x15a>
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	e7c4      	b.n	8008316 <_vfiprintf_r+0x15a>
 800838c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008390:	4604      	mov	r4, r0
 8008392:	2301      	movs	r3, #1
 8008394:	e7f0      	b.n	8008378 <_vfiprintf_r+0x1bc>
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <_vfiprintf_r+0x22c>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4630      	mov	r0, r6
 80083a2:	f3af 8000 	nop.w
 80083a6:	4607      	mov	r7, r0
 80083a8:	1c78      	adds	r0, r7, #1
 80083aa:	d1d6      	bne.n	800835a <_vfiprintf_r+0x19e>
 80083ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d405      	bmi.n	80083be <_vfiprintf_r+0x202>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	059a      	lsls	r2, r3, #22
 80083b6:	d402      	bmi.n	80083be <_vfiprintf_r+0x202>
 80083b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ba:	f7ff fcc3 	bl	8007d44 <__retarget_lock_release_recursive>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	065b      	lsls	r3, r3, #25
 80083c2:	f53f af1d 	bmi.w	8008200 <_vfiprintf_r+0x44>
 80083c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c8:	e71c      	b.n	8008204 <_vfiprintf_r+0x48>
 80083ca:	ab03      	add	r3, sp, #12
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	462a      	mov	r2, r5
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <_vfiprintf_r+0x22c>)
 80083d2:	a904      	add	r1, sp, #16
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 f879 	bl	80084cc <_printf_i>
 80083da:	e7e4      	b.n	80083a6 <_vfiprintf_r+0x1ea>
 80083dc:	08008f3f 	.word	0x08008f3f
 80083e0:	08008f49 	.word	0x08008f49
 80083e4:	00000000 	.word	0x00000000
 80083e8:	08008197 	.word	0x08008197
 80083ec:	08008f45 	.word	0x08008f45

080083f0 <_printf_common>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	4616      	mov	r6, r2
 80083f6:	4699      	mov	r9, r3
 80083f8:	688a      	ldr	r2, [r1, #8]
 80083fa:	690b      	ldr	r3, [r1, #16]
 80083fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008400:	4293      	cmp	r3, r2
 8008402:	bfb8      	it	lt
 8008404:	4613      	movlt	r3, r2
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800840c:	4607      	mov	r7, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b10a      	cbz	r2, 8008416 <_printf_common+0x26>
 8008412:	3301      	adds	r3, #1
 8008414:	6033      	str	r3, [r6, #0]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	0699      	lsls	r1, r3, #26
 800841a:	bf42      	ittt	mi
 800841c:	6833      	ldrmi	r3, [r6, #0]
 800841e:	3302      	addmi	r3, #2
 8008420:	6033      	strmi	r3, [r6, #0]
 8008422:	6825      	ldr	r5, [r4, #0]
 8008424:	f015 0506 	ands.w	r5, r5, #6
 8008428:	d106      	bne.n	8008438 <_printf_common+0x48>
 800842a:	f104 0a19 	add.w	sl, r4, #25
 800842e:	68e3      	ldr	r3, [r4, #12]
 8008430:	6832      	ldr	r2, [r6, #0]
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc26      	bgt.n	8008486 <_printf_common+0x96>
 8008438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800843c:	1e13      	subs	r3, r2, #0
 800843e:	6822      	ldr	r2, [r4, #0]
 8008440:	bf18      	it	ne
 8008442:	2301      	movne	r3, #1
 8008444:	0692      	lsls	r2, r2, #26
 8008446:	d42b      	bmi.n	80084a0 <_printf_common+0xb0>
 8008448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844c:	4649      	mov	r1, r9
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	3001      	adds	r0, #1
 8008454:	d01e      	beq.n	8008494 <_printf_common+0xa4>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	2b04      	cmp	r3, #4
 8008460:	bf02      	ittt	eq
 8008462:	68e5      	ldreq	r5, [r4, #12]
 8008464:	6833      	ldreq	r3, [r6, #0]
 8008466:	1aed      	subeq	r5, r5, r3
 8008468:	68a3      	ldr	r3, [r4, #8]
 800846a:	bf0c      	ite	eq
 800846c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008470:	2500      	movne	r5, #0
 8008472:	4293      	cmp	r3, r2
 8008474:	bfc4      	itt	gt
 8008476:	1a9b      	subgt	r3, r3, r2
 8008478:	18ed      	addgt	r5, r5, r3
 800847a:	2600      	movs	r6, #0
 800847c:	341a      	adds	r4, #26
 800847e:	42b5      	cmp	r5, r6
 8008480:	d11a      	bne.n	80084b8 <_printf_common+0xc8>
 8008482:	2000      	movs	r0, #0
 8008484:	e008      	b.n	8008498 <_printf_common+0xa8>
 8008486:	2301      	movs	r3, #1
 8008488:	4652      	mov	r2, sl
 800848a:	4649      	mov	r1, r9
 800848c:	4638      	mov	r0, r7
 800848e:	47c0      	blx	r8
 8008490:	3001      	adds	r0, #1
 8008492:	d103      	bne.n	800849c <_printf_common+0xac>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	3501      	adds	r5, #1
 800849e:	e7c6      	b.n	800842e <_printf_common+0x3e>
 80084a0:	18e1      	adds	r1, r4, r3
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	2030      	movs	r0, #48	; 0x30
 80084a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084aa:	4422      	add	r2, r4
 80084ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b4:	3302      	adds	r3, #2
 80084b6:	e7c7      	b.n	8008448 <_printf_common+0x58>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4622      	mov	r2, r4
 80084bc:	4649      	mov	r1, r9
 80084be:	4638      	mov	r0, r7
 80084c0:	47c0      	blx	r8
 80084c2:	3001      	adds	r0, #1
 80084c4:	d0e6      	beq.n	8008494 <_printf_common+0xa4>
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7d9      	b.n	800847e <_printf_common+0x8e>
	...

080084cc <_printf_i>:
 80084cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	7e0f      	ldrb	r7, [r1, #24]
 80084d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d4:	2f78      	cmp	r7, #120	; 0x78
 80084d6:	4691      	mov	r9, r2
 80084d8:	4680      	mov	r8, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	469a      	mov	sl, r3
 80084de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084e2:	d807      	bhi.n	80084f4 <_printf_i+0x28>
 80084e4:	2f62      	cmp	r7, #98	; 0x62
 80084e6:	d80a      	bhi.n	80084fe <_printf_i+0x32>
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	f000 80d4 	beq.w	8008696 <_printf_i+0x1ca>
 80084ee:	2f58      	cmp	r7, #88	; 0x58
 80084f0:	f000 80c0 	beq.w	8008674 <_printf_i+0x1a8>
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084fc:	e03a      	b.n	8008574 <_printf_i+0xa8>
 80084fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008502:	2b15      	cmp	r3, #21
 8008504:	d8f6      	bhi.n	80084f4 <_printf_i+0x28>
 8008506:	a101      	add	r1, pc, #4	; (adr r1, 800850c <_printf_i+0x40>)
 8008508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800850c:	08008565 	.word	0x08008565
 8008510:	08008579 	.word	0x08008579
 8008514:	080084f5 	.word	0x080084f5
 8008518:	080084f5 	.word	0x080084f5
 800851c:	080084f5 	.word	0x080084f5
 8008520:	080084f5 	.word	0x080084f5
 8008524:	08008579 	.word	0x08008579
 8008528:	080084f5 	.word	0x080084f5
 800852c:	080084f5 	.word	0x080084f5
 8008530:	080084f5 	.word	0x080084f5
 8008534:	080084f5 	.word	0x080084f5
 8008538:	0800867d 	.word	0x0800867d
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008637 	.word	0x08008637
 8008544:	080084f5 	.word	0x080084f5
 8008548:	080084f5 	.word	0x080084f5
 800854c:	0800869f 	.word	0x0800869f
 8008550:	080084f5 	.word	0x080084f5
 8008554:	080085a5 	.word	0x080085a5
 8008558:	080084f5 	.word	0x080084f5
 800855c:	080084f5 	.word	0x080084f5
 8008560:	0800863f 	.word	0x0800863f
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	602a      	str	r2, [r5, #0]
 800856c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008574:	2301      	movs	r3, #1
 8008576:	e09f      	b.n	80086b8 <_printf_i+0x1ec>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	0607      	lsls	r7, r0, #24
 800857e:	f103 0104 	add.w	r1, r3, #4
 8008582:	6029      	str	r1, [r5, #0]
 8008584:	d501      	bpl.n	800858a <_printf_i+0xbe>
 8008586:	681e      	ldr	r6, [r3, #0]
 8008588:	e003      	b.n	8008592 <_printf_i+0xc6>
 800858a:	0646      	lsls	r6, r0, #25
 800858c:	d5fb      	bpl.n	8008586 <_printf_i+0xba>
 800858e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008592:	2e00      	cmp	r6, #0
 8008594:	da03      	bge.n	800859e <_printf_i+0xd2>
 8008596:	232d      	movs	r3, #45	; 0x2d
 8008598:	4276      	negs	r6, r6
 800859a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859e:	485a      	ldr	r0, [pc, #360]	; (8008708 <_printf_i+0x23c>)
 80085a0:	230a      	movs	r3, #10
 80085a2:	e012      	b.n	80085ca <_printf_i+0xfe>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	6029      	str	r1, [r5, #0]
 80085ac:	0605      	lsls	r5, r0, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xe8>
 80085b0:	681e      	ldr	r6, [r3, #0]
 80085b2:	e002      	b.n	80085ba <_printf_i+0xee>
 80085b4:	0641      	lsls	r1, r0, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xe4>
 80085b8:	881e      	ldrh	r6, [r3, #0]
 80085ba:	4853      	ldr	r0, [pc, #332]	; (8008708 <_printf_i+0x23c>)
 80085bc:	2f6f      	cmp	r7, #111	; 0x6f
 80085be:	bf0c      	ite	eq
 80085c0:	2308      	moveq	r3, #8
 80085c2:	230a      	movne	r3, #10
 80085c4:	2100      	movs	r1, #0
 80085c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ca:	6865      	ldr	r5, [r4, #4]
 80085cc:	60a5      	str	r5, [r4, #8]
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	bfa2      	ittt	ge
 80085d2:	6821      	ldrge	r1, [r4, #0]
 80085d4:	f021 0104 	bicge.w	r1, r1, #4
 80085d8:	6021      	strge	r1, [r4, #0]
 80085da:	b90e      	cbnz	r6, 80085e0 <_printf_i+0x114>
 80085dc:	2d00      	cmp	r5, #0
 80085de:	d04b      	beq.n	8008678 <_printf_i+0x1ac>
 80085e0:	4615      	mov	r5, r2
 80085e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e6:	fb03 6711 	mls	r7, r3, r1, r6
 80085ea:	5dc7      	ldrb	r7, [r0, r7]
 80085ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085f0:	4637      	mov	r7, r6
 80085f2:	42bb      	cmp	r3, r7
 80085f4:	460e      	mov	r6, r1
 80085f6:	d9f4      	bls.n	80085e2 <_printf_i+0x116>
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d10b      	bne.n	8008614 <_printf_i+0x148>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07de      	lsls	r6, r3, #31
 8008600:	d508      	bpl.n	8008614 <_printf_i+0x148>
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6861      	ldr	r1, [r4, #4]
 8008606:	4299      	cmp	r1, r3
 8008608:	bfde      	ittt	le
 800860a:	2330      	movle	r3, #48	; 0x30
 800860c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008614:	1b52      	subs	r2, r2, r5
 8008616:	6122      	str	r2, [r4, #16]
 8008618:	f8cd a000 	str.w	sl, [sp]
 800861c:	464b      	mov	r3, r9
 800861e:	aa03      	add	r2, sp, #12
 8008620:	4621      	mov	r1, r4
 8008622:	4640      	mov	r0, r8
 8008624:	f7ff fee4 	bl	80083f0 <_printf_common>
 8008628:	3001      	adds	r0, #1
 800862a:	d14a      	bne.n	80086c2 <_printf_i+0x1f6>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b004      	add	sp, #16
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	4833      	ldr	r0, [pc, #204]	; (800870c <_printf_i+0x240>)
 8008640:	2778      	movs	r7, #120	; 0x78
 8008642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	061f      	lsls	r7, r3, #24
 800864c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008650:	d402      	bmi.n	8008658 <_printf_i+0x18c>
 8008652:	065f      	lsls	r7, r3, #25
 8008654:	bf48      	it	mi
 8008656:	b2b6      	uxthmi	r6, r6
 8008658:	07df      	lsls	r7, r3, #31
 800865a:	bf48      	it	mi
 800865c:	f043 0320 	orrmi.w	r3, r3, #32
 8008660:	6029      	str	r1, [r5, #0]
 8008662:	bf48      	it	mi
 8008664:	6023      	strmi	r3, [r4, #0]
 8008666:	b91e      	cbnz	r6, 8008670 <_printf_i+0x1a4>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	2310      	movs	r3, #16
 8008672:	e7a7      	b.n	80085c4 <_printf_i+0xf8>
 8008674:	4824      	ldr	r0, [pc, #144]	; (8008708 <_printf_i+0x23c>)
 8008676:	e7e4      	b.n	8008642 <_printf_i+0x176>
 8008678:	4615      	mov	r5, r2
 800867a:	e7bd      	b.n	80085f8 <_printf_i+0x12c>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	6826      	ldr	r6, [r4, #0]
 8008680:	6961      	ldr	r1, [r4, #20]
 8008682:	1d18      	adds	r0, r3, #4
 8008684:	6028      	str	r0, [r5, #0]
 8008686:	0635      	lsls	r5, r6, #24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	d501      	bpl.n	8008690 <_printf_i+0x1c4>
 800868c:	6019      	str	r1, [r3, #0]
 800868e:	e002      	b.n	8008696 <_printf_i+0x1ca>
 8008690:	0670      	lsls	r0, r6, #25
 8008692:	d5fb      	bpl.n	800868c <_printf_i+0x1c0>
 8008694:	8019      	strh	r1, [r3, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	4615      	mov	r5, r2
 800869c:	e7bc      	b.n	8008618 <_printf_i+0x14c>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	2100      	movs	r1, #0
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7f7 fdb0 	bl	8000210 <memchr>
 80086b0:	b108      	cbz	r0, 80086b6 <_printf_i+0x1ea>
 80086b2:	1b40      	subs	r0, r0, r5
 80086b4:	6060      	str	r0, [r4, #4]
 80086b6:	6863      	ldr	r3, [r4, #4]
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	2300      	movs	r3, #0
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c0:	e7aa      	b.n	8008618 <_printf_i+0x14c>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4649      	mov	r1, r9
 80086c8:	4640      	mov	r0, r8
 80086ca:	47d0      	blx	sl
 80086cc:	3001      	adds	r0, #1
 80086ce:	d0ad      	beq.n	800862c <_printf_i+0x160>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	079b      	lsls	r3, r3, #30
 80086d4:	d413      	bmi.n	80086fe <_printf_i+0x232>
 80086d6:	68e0      	ldr	r0, [r4, #12]
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	4298      	cmp	r0, r3
 80086dc:	bfb8      	it	lt
 80086de:	4618      	movlt	r0, r3
 80086e0:	e7a6      	b.n	8008630 <_printf_i+0x164>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4632      	mov	r2, r6
 80086e6:	4649      	mov	r1, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	47d0      	blx	sl
 80086ec:	3001      	adds	r0, #1
 80086ee:	d09d      	beq.n	800862c <_printf_i+0x160>
 80086f0:	3501      	adds	r5, #1
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	9903      	ldr	r1, [sp, #12]
 80086f6:	1a5b      	subs	r3, r3, r1
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dcf2      	bgt.n	80086e2 <_printf_i+0x216>
 80086fc:	e7eb      	b.n	80086d6 <_printf_i+0x20a>
 80086fe:	2500      	movs	r5, #0
 8008700:	f104 0619 	add.w	r6, r4, #25
 8008704:	e7f5      	b.n	80086f2 <_printf_i+0x226>
 8008706:	bf00      	nop
 8008708:	08008f50 	.word	0x08008f50
 800870c:	08008f61 	.word	0x08008f61

08008710 <__sflush_r>:
 8008710:	898a      	ldrh	r2, [r1, #12]
 8008712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	4605      	mov	r5, r0
 8008718:	0710      	lsls	r0, r2, #28
 800871a:	460c      	mov	r4, r1
 800871c:	d458      	bmi.n	80087d0 <__sflush_r+0xc0>
 800871e:	684b      	ldr	r3, [r1, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc05      	bgt.n	8008730 <__sflush_r+0x20>
 8008724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	dc02      	bgt.n	8008730 <__sflush_r+0x20>
 800872a:	2000      	movs	r0, #0
 800872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008732:	2e00      	cmp	r6, #0
 8008734:	d0f9      	beq.n	800872a <__sflush_r+0x1a>
 8008736:	2300      	movs	r3, #0
 8008738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800873c:	682f      	ldr	r7, [r5, #0]
 800873e:	6a21      	ldr	r1, [r4, #32]
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	d032      	beq.n	80087aa <__sflush_r+0x9a>
 8008744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	075a      	lsls	r2, r3, #29
 800874a:	d505      	bpl.n	8008758 <__sflush_r+0x48>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	1ac0      	subs	r0, r0, r3
 8008750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008752:	b10b      	cbz	r3, 8008758 <__sflush_r+0x48>
 8008754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008756:	1ac0      	subs	r0, r0, r3
 8008758:	2300      	movs	r3, #0
 800875a:	4602      	mov	r2, r0
 800875c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800875e:	6a21      	ldr	r1, [r4, #32]
 8008760:	4628      	mov	r0, r5
 8008762:	47b0      	blx	r6
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	d106      	bne.n	8008778 <__sflush_r+0x68>
 800876a:	6829      	ldr	r1, [r5, #0]
 800876c:	291d      	cmp	r1, #29
 800876e:	d82b      	bhi.n	80087c8 <__sflush_r+0xb8>
 8008770:	4a29      	ldr	r2, [pc, #164]	; (8008818 <__sflush_r+0x108>)
 8008772:	410a      	asrs	r2, r1
 8008774:	07d6      	lsls	r6, r2, #31
 8008776:	d427      	bmi.n	80087c8 <__sflush_r+0xb8>
 8008778:	2200      	movs	r2, #0
 800877a:	6062      	str	r2, [r4, #4]
 800877c:	04d9      	lsls	r1, r3, #19
 800877e:	6922      	ldr	r2, [r4, #16]
 8008780:	6022      	str	r2, [r4, #0]
 8008782:	d504      	bpl.n	800878e <__sflush_r+0x7e>
 8008784:	1c42      	adds	r2, r0, #1
 8008786:	d101      	bne.n	800878c <__sflush_r+0x7c>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b903      	cbnz	r3, 800878e <__sflush_r+0x7e>
 800878c:	6560      	str	r0, [r4, #84]	; 0x54
 800878e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008790:	602f      	str	r7, [r5, #0]
 8008792:	2900      	cmp	r1, #0
 8008794:	d0c9      	beq.n	800872a <__sflush_r+0x1a>
 8008796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800879a:	4299      	cmp	r1, r3
 800879c:	d002      	beq.n	80087a4 <__sflush_r+0x94>
 800879e:	4628      	mov	r0, r5
 80087a0:	f7ff fb3e 	bl	8007e20 <_free_r>
 80087a4:	2000      	movs	r0, #0
 80087a6:	6360      	str	r0, [r4, #52]	; 0x34
 80087a8:	e7c0      	b.n	800872c <__sflush_r+0x1c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b0      	blx	r6
 80087b0:	1c41      	adds	r1, r0, #1
 80087b2:	d1c8      	bne.n	8008746 <__sflush_r+0x36>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0c5      	beq.n	8008746 <__sflush_r+0x36>
 80087ba:	2b1d      	cmp	r3, #29
 80087bc:	d001      	beq.n	80087c2 <__sflush_r+0xb2>
 80087be:	2b16      	cmp	r3, #22
 80087c0:	d101      	bne.n	80087c6 <__sflush_r+0xb6>
 80087c2:	602f      	str	r7, [r5, #0]
 80087c4:	e7b1      	b.n	800872a <__sflush_r+0x1a>
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	e7ad      	b.n	800872c <__sflush_r+0x1c>
 80087d0:	690f      	ldr	r7, [r1, #16]
 80087d2:	2f00      	cmp	r7, #0
 80087d4:	d0a9      	beq.n	800872a <__sflush_r+0x1a>
 80087d6:	0793      	lsls	r3, r2, #30
 80087d8:	680e      	ldr	r6, [r1, #0]
 80087da:	bf08      	it	eq
 80087dc:	694b      	ldreq	r3, [r1, #20]
 80087de:	600f      	str	r7, [r1, #0]
 80087e0:	bf18      	it	ne
 80087e2:	2300      	movne	r3, #0
 80087e4:	eba6 0807 	sub.w	r8, r6, r7
 80087e8:	608b      	str	r3, [r1, #8]
 80087ea:	f1b8 0f00 	cmp.w	r8, #0
 80087ee:	dd9c      	ble.n	800872a <__sflush_r+0x1a>
 80087f0:	6a21      	ldr	r1, [r4, #32]
 80087f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087f4:	4643      	mov	r3, r8
 80087f6:	463a      	mov	r2, r7
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b0      	blx	r6
 80087fc:	2800      	cmp	r0, #0
 80087fe:	dc06      	bgt.n	800880e <__sflush_r+0xfe>
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	e78e      	b.n	800872c <__sflush_r+0x1c>
 800880e:	4407      	add	r7, r0
 8008810:	eba8 0800 	sub.w	r8, r8, r0
 8008814:	e7e9      	b.n	80087ea <__sflush_r+0xda>
 8008816:	bf00      	nop
 8008818:	dfbffffe 	.word	0xdfbffffe

0800881c <_fflush_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	4605      	mov	r5, r0
 8008822:	460c      	mov	r4, r1
 8008824:	b913      	cbnz	r3, 800882c <_fflush_r+0x10>
 8008826:	2500      	movs	r5, #0
 8008828:	4628      	mov	r0, r5
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	b118      	cbz	r0, 8008836 <_fflush_r+0x1a>
 800882e:	6a03      	ldr	r3, [r0, #32]
 8008830:	b90b      	cbnz	r3, 8008836 <_fflush_r+0x1a>
 8008832:	f7ff f8f3 	bl	8007a1c <__sinit>
 8008836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f3      	beq.n	8008826 <_fflush_r+0xa>
 800883e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008840:	07d0      	lsls	r0, r2, #31
 8008842:	d404      	bmi.n	800884e <_fflush_r+0x32>
 8008844:	0599      	lsls	r1, r3, #22
 8008846:	d402      	bmi.n	800884e <_fflush_r+0x32>
 8008848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884a:	f7ff fa7a 	bl	8007d42 <__retarget_lock_acquire_recursive>
 800884e:	4628      	mov	r0, r5
 8008850:	4621      	mov	r1, r4
 8008852:	f7ff ff5d 	bl	8008710 <__sflush_r>
 8008856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008858:	07da      	lsls	r2, r3, #31
 800885a:	4605      	mov	r5, r0
 800885c:	d4e4      	bmi.n	8008828 <_fflush_r+0xc>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	059b      	lsls	r3, r3, #22
 8008862:	d4e1      	bmi.n	8008828 <_fflush_r+0xc>
 8008864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008866:	f7ff fa6d 	bl	8007d44 <__retarget_lock_release_recursive>
 800886a:	e7dd      	b.n	8008828 <_fflush_r+0xc>

0800886c <__swbuf_r>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	460e      	mov	r6, r1
 8008870:	4614      	mov	r4, r2
 8008872:	4605      	mov	r5, r0
 8008874:	b118      	cbz	r0, 800887e <__swbuf_r+0x12>
 8008876:	6a03      	ldr	r3, [r0, #32]
 8008878:	b90b      	cbnz	r3, 800887e <__swbuf_r+0x12>
 800887a:	f7ff f8cf 	bl	8007a1c <__sinit>
 800887e:	69a3      	ldr	r3, [r4, #24]
 8008880:	60a3      	str	r3, [r4, #8]
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	071a      	lsls	r2, r3, #28
 8008886:	d525      	bpl.n	80088d4 <__swbuf_r+0x68>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b31b      	cbz	r3, 80088d4 <__swbuf_r+0x68>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	1a98      	subs	r0, r3, r2
 8008892:	6963      	ldr	r3, [r4, #20]
 8008894:	b2f6      	uxtb	r6, r6
 8008896:	4283      	cmp	r3, r0
 8008898:	4637      	mov	r7, r6
 800889a:	dc04      	bgt.n	80088a6 <__swbuf_r+0x3a>
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f7ff ffbc 	bl	800881c <_fflush_r>
 80088a4:	b9e0      	cbnz	r0, 80088e0 <__swbuf_r+0x74>
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	60a3      	str	r3, [r4, #8]
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	6022      	str	r2, [r4, #0]
 80088b2:	701e      	strb	r6, [r3, #0]
 80088b4:	6962      	ldr	r2, [r4, #20]
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d004      	beq.n	80088c6 <__swbuf_r+0x5a>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	07db      	lsls	r3, r3, #31
 80088c0:	d506      	bpl.n	80088d0 <__swbuf_r+0x64>
 80088c2:	2e0a      	cmp	r6, #10
 80088c4:	d104      	bne.n	80088d0 <__swbuf_r+0x64>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff ffa7 	bl	800881c <_fflush_r>
 80088ce:	b938      	cbnz	r0, 80088e0 <__swbuf_r+0x74>
 80088d0:	4638      	mov	r0, r7
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d4:	4621      	mov	r1, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f806 	bl	80088e8 <__swsetup_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d0d5      	beq.n	800888c <__swbuf_r+0x20>
 80088e0:	f04f 37ff 	mov.w	r7, #4294967295
 80088e4:	e7f4      	b.n	80088d0 <__swbuf_r+0x64>
	...

080088e8 <__swsetup_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <__swsetup_r+0xac>)
 80088ec:	4605      	mov	r5, r0
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	460c      	mov	r4, r1
 80088f2:	b118      	cbz	r0, 80088fc <__swsetup_r+0x14>
 80088f4:	6a03      	ldr	r3, [r0, #32]
 80088f6:	b90b      	cbnz	r3, 80088fc <__swsetup_r+0x14>
 80088f8:	f7ff f890 	bl	8007a1c <__sinit>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008902:	0718      	lsls	r0, r3, #28
 8008904:	d422      	bmi.n	800894c <__swsetup_r+0x64>
 8008906:	06d9      	lsls	r1, r3, #27
 8008908:	d407      	bmi.n	800891a <__swsetup_r+0x32>
 800890a:	2309      	movs	r3, #9
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	e034      	b.n	8008984 <__swsetup_r+0x9c>
 800891a:	0758      	lsls	r0, r3, #29
 800891c:	d512      	bpl.n	8008944 <__swsetup_r+0x5c>
 800891e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008920:	b141      	cbz	r1, 8008934 <__swsetup_r+0x4c>
 8008922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008926:	4299      	cmp	r1, r3
 8008928:	d002      	beq.n	8008930 <__swsetup_r+0x48>
 800892a:	4628      	mov	r0, r5
 800892c:	f7ff fa78 	bl	8007e20 <_free_r>
 8008930:	2300      	movs	r3, #0
 8008932:	6363      	str	r3, [r4, #52]	; 0x34
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	2300      	movs	r3, #0
 800893e:	6063      	str	r3, [r4, #4]
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f043 0308 	orr.w	r3, r3, #8
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b94b      	cbnz	r3, 8008964 <__swsetup_r+0x7c>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800895a:	d003      	beq.n	8008964 <__swsetup_r+0x7c>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f86f 	bl	8008a42 <__smakebuf_r>
 8008964:	89a0      	ldrh	r0, [r4, #12]
 8008966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800896a:	f010 0301 	ands.w	r3, r0, #1
 800896e:	d00a      	beq.n	8008986 <__swsetup_r+0x9e>
 8008970:	2300      	movs	r3, #0
 8008972:	60a3      	str	r3, [r4, #8]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	425b      	negs	r3, r3
 8008978:	61a3      	str	r3, [r4, #24]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	b943      	cbnz	r3, 8008990 <__swsetup_r+0xa8>
 800897e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008982:	d1c4      	bne.n	800890e <__swsetup_r+0x26>
 8008984:	bd38      	pop	{r3, r4, r5, pc}
 8008986:	0781      	lsls	r1, r0, #30
 8008988:	bf58      	it	pl
 800898a:	6963      	ldrpl	r3, [r4, #20]
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	e7f4      	b.n	800897a <__swsetup_r+0x92>
 8008990:	2000      	movs	r0, #0
 8008992:	e7f7      	b.n	8008984 <__swsetup_r+0x9c>
 8008994:	20000064 	.word	0x20000064

08008998 <_realloc_r>:
 8008998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899c:	4680      	mov	r8, r0
 800899e:	4614      	mov	r4, r2
 80089a0:	460e      	mov	r6, r1
 80089a2:	b921      	cbnz	r1, 80089ae <_realloc_r+0x16>
 80089a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	4611      	mov	r1, r2
 80089aa:	f7fe bf1f 	b.w	80077ec <_malloc_r>
 80089ae:	b92a      	cbnz	r2, 80089bc <_realloc_r+0x24>
 80089b0:	f7ff fa36 	bl	8007e20 <_free_r>
 80089b4:	4625      	mov	r5, r4
 80089b6:	4628      	mov	r0, r5
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089bc:	f000 f8a0 	bl	8008b00 <_malloc_usable_size_r>
 80089c0:	4284      	cmp	r4, r0
 80089c2:	4607      	mov	r7, r0
 80089c4:	d802      	bhi.n	80089cc <_realloc_r+0x34>
 80089c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089ca:	d812      	bhi.n	80089f2 <_realloc_r+0x5a>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4640      	mov	r0, r8
 80089d0:	f7fe ff0c 	bl	80077ec <_malloc_r>
 80089d4:	4605      	mov	r5, r0
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d0ed      	beq.n	80089b6 <_realloc_r+0x1e>
 80089da:	42bc      	cmp	r4, r7
 80089dc:	4622      	mov	r2, r4
 80089de:	4631      	mov	r1, r6
 80089e0:	bf28      	it	cs
 80089e2:	463a      	movcs	r2, r7
 80089e4:	f7ff f9af 	bl	8007d46 <memcpy>
 80089e8:	4631      	mov	r1, r6
 80089ea:	4640      	mov	r0, r8
 80089ec:	f7ff fa18 	bl	8007e20 <_free_r>
 80089f0:	e7e1      	b.n	80089b6 <_realloc_r+0x1e>
 80089f2:	4635      	mov	r5, r6
 80089f4:	e7df      	b.n	80089b6 <_realloc_r+0x1e>

080089f6 <__swhatbuf_r>:
 80089f6:	b570      	push	{r4, r5, r6, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	2900      	cmp	r1, #0
 8008a00:	b096      	sub	sp, #88	; 0x58
 8008a02:	4615      	mov	r5, r2
 8008a04:	461e      	mov	r6, r3
 8008a06:	da0d      	bge.n	8008a24 <__swhatbuf_r+0x2e>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	bf0c      	ite	eq
 8008a14:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a18:	2340      	movne	r3, #64	; 0x40
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	6031      	str	r1, [r6, #0]
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	b016      	add	sp, #88	; 0x58
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	466a      	mov	r2, sp
 8008a26:	f000 f849 	bl	8008abc <_fstat_r>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	dbec      	blt.n	8008a08 <__swhatbuf_r+0x12>
 8008a2e:	9901      	ldr	r1, [sp, #4]
 8008a30:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a34:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a38:	4259      	negs	r1, r3
 8008a3a:	4159      	adcs	r1, r3
 8008a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a40:	e7eb      	b.n	8008a1a <__swhatbuf_r+0x24>

08008a42 <__smakebuf_r>:
 8008a42:	898b      	ldrh	r3, [r1, #12]
 8008a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a46:	079d      	lsls	r5, r3, #30
 8008a48:	4606      	mov	r6, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	d507      	bpl.n	8008a5e <__smakebuf_r+0x1c>
 8008a4e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	2301      	movs	r3, #1
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	b002      	add	sp, #8
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
 8008a5e:	ab01      	add	r3, sp, #4
 8008a60:	466a      	mov	r2, sp
 8008a62:	f7ff ffc8 	bl	80089f6 <__swhatbuf_r>
 8008a66:	9900      	ldr	r1, [sp, #0]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7fe febe 	bl	80077ec <_malloc_r>
 8008a70:	b948      	cbnz	r0, 8008a86 <__smakebuf_r+0x44>
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	059a      	lsls	r2, r3, #22
 8008a78:	d4ef      	bmi.n	8008a5a <__smakebuf_r+0x18>
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	f043 0302 	orr.w	r3, r3, #2
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	e7e3      	b.n	8008a4e <__smakebuf_r+0xc>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	6020      	str	r0, [r4, #0]
 8008a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	9b00      	ldr	r3, [sp, #0]
 8008a92:	6163      	str	r3, [r4, #20]
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	6120      	str	r0, [r4, #16]
 8008a98:	b15b      	cbz	r3, 8008ab2 <__smakebuf_r+0x70>
 8008a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f000 f81e 	bl	8008ae0 <_isatty_r>
 8008aa4:	b128      	cbz	r0, 8008ab2 <__smakebuf_r+0x70>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	431d      	orrs	r5, r3
 8008ab6:	81a5      	strh	r5, [r4, #12]
 8008ab8:	e7cf      	b.n	8008a5a <__smakebuf_r+0x18>
	...

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_fstat_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f8 f9a0 	bl	8000e0e <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	200009b4 	.word	0x200009b4

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	; (8008afc <_isatty_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f8 f99f 	bl	8000e2e <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	200009b4 	.word	0x200009b4

08008b00 <_malloc_usable_size_r>:
 8008b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b04:	1f18      	subs	r0, r3, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bfbc      	itt	lt
 8008b0a:	580b      	ldrlt	r3, [r1, r0]
 8008b0c:	18c0      	addlt	r0, r0, r3
 8008b0e:	4770      	bx	lr

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
